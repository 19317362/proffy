<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<?xml-stylesheet type="text/xsl" href="Xhtml.xsl"?>
<ProffyResults>

  <Summary>
    <DelayBetweenSamplesInSeconds>0.05</DelayBetweenSamplesInSeconds>
    <Title>AllThreads</Title>
    <SampleCount>103</SampleCount>
    <CallstackCount>104</CallstackCount>
    <WallClockTimeInSeconds>14.642</WallClockTimeInSeconds>
  </Summary>

  <PointsEncountered>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="0" LineDisplacement="17" LineNumber="3619" SymbolDisplacement="118" SymbolName="SampleTarget32!std::_Sort&lt;int *,int>@22816"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility" Id="1" LineDisplacement="0" LineNumber="104" SymbolDisplacement="40" SymbolName="SampleTarget32!std::swap&lt;int>@23520"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="2" LineDisplacement="43" LineNumber="3593" SymbolDisplacement="454" SymbolName="SampleTarget32!std::_Unguarded_partition&lt;int *>@23584"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility" Id="3" LineDisplacement="0" LineNumber="105" SymbolDisplacement="59" SymbolName="SampleTarget32!std::swap&lt;int>@23520"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="4" LineDisplacement="24" LineNumber="2228" SymbolDisplacement="162" SymbolName="SampleTarget32!std::_Random_shuffle&lt;int *,int>@22640"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="5" LineDisplacement="44" LineNumber="2238" SymbolDisplacement="66" SymbolName="SampleTarget32!std::random_shuffle&lt;std::_Vector_iterator&lt;std::_Vector_val&lt;int,std::allocator&lt;int> > > >@21584"/>
    <Point FileName="c:\users\paul\documents\programs\proffy\sampletarget\main.cpp" Id="6" LineDisplacement="41" LineNumber="46" SymbolDisplacement="417" SymbolName="SampleTarget32!main@4096"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="7" LineDisplacement="14" LineNumber="3571" SymbolDisplacement="181" SymbolName="SampleTarget32!std::_Unguarded_partition&lt;int *>@23584"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility" Id="8" LineDisplacement="9" LineNumber="103" SymbolDisplacement="30" SymbolName="SampleTarget32!std::swap&lt;int>@23520"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="9" LineDisplacement="0" LineNumber="3582" SymbolDisplacement="296" SymbolName="SampleTarget32!std::_Unguarded_partition&lt;int *>@23584"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility" Id="10" LineDisplacement="29" LineNumber="2630" SymbolDisplacement="45" SymbolName="SampleTarget32!std::_Move_backward&lt;int *,int *>@25824"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility" Id="11" LineDisplacement="41" LineNumber="2640" SymbolDisplacement="45" SymbolName="SampleTarget32!std::_Move_backward&lt;int *,int *>@25552"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="12" LineDisplacement="26" LineNumber="3502" SymbolDisplacement="104" SymbolName="SampleTarget32!std::_Insertion_sort1&lt;int *,int>@24880"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="13" LineDisplacement="26" LineNumber="3519" SymbolDisplacement="29" SymbolName="SampleTarget32!std::_Insertion_sort&lt;int *>@24304"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="14" LineDisplacement="13" LineNumber="3635" SymbolDisplacement="219" SymbolName="SampleTarget32!std::_Sort&lt;int *,int>@22816"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility" Id="15" LineDisplacement="3" LineNumber="2134" SymbolDisplacement="6" SymbolName="SampleTarget32!std::iter_swap&lt;int *,int *>@23488"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="16" LineDisplacement="13" LineNumber="3598" SymbolDisplacement="506" SymbolName="SampleTarget32!std::_Unguarded_partition&lt;int *>@23584"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="17" LineDisplacement="8" LineNumber="3574" SymbolDisplacement="208" SymbolName="SampleTarget32!std::_Unguarded_partition&lt;int *>@23584"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="18" LineDisplacement="0" LineNumber="3574" SymbolDisplacement="200" SymbolName="SampleTarget32!std::_Unguarded_partition&lt;int *>@23584"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="19" LineDisplacement="3" LineNumber="3581" SymbolDisplacement="286" SymbolName="SampleTarget32!std::_Unguarded_partition&lt;int *>@23584"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="20" LineDisplacement="0" LineNumber="3585" SymbolDisplacement="330" SymbolName="SampleTarget32!std::_Unguarded_partition&lt;int *>@23584"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility" Id="21" LineDisplacement="17" LineNumber="103" SymbolDisplacement="38" SymbolName="SampleTarget32!std::swap&lt;int>@23520"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="22" LineDisplacement="9" LineNumber="3498" SymbolDisplacement="60" SymbolName="SampleTarget32!std::_Insertion_sort1&lt;int *,int>@24880"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility" Id="23" LineDisplacement="0" LineNumber="103" SymbolDisplacement="21" SymbolName="SampleTarget32!std::swap&lt;int>@23520"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility" Id="24" LineDisplacement="0" LineNumber="2133" SymbolDisplacement="0" SymbolName="SampleTarget32!std::iter_swap&lt;int *,int *>@23488"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory" Id="25" LineDisplacement="0" LineNumber="112" SymbolDisplacement="6" SymbolName="SampleTarget32!std::forward&lt;int * &amp;>@25200"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="26" LineDisplacement="20" LineNumber="3509" SymbolDisplacement="154" SymbolName="SampleTarget32!std::_Insertion_sort1&lt;int *,int>@24880"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="27" LineDisplacement="8" LineNumber="3591" SymbolDisplacement="394" SymbolName="SampleTarget32!std::_Unguarded_partition&lt;int *>@23584"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="28" LineDisplacement="6" LineNumber="3585" SymbolDisplacement="336" SymbolName="SampleTarget32!std::_Unguarded_partition&lt;int *>@23584"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility" Id="29" LineDisplacement="0" LineNumber="101" SymbolDisplacement="0" SymbolName="SampleTarget32!std::swap&lt;int>@23520"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="30" LineDisplacement="5" LineNumber="3578" SymbolDisplacement="254" SymbolName="SampleTarget32!std::_Unguarded_partition&lt;int *>@23584"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="31" LineDisplacement="9" LineNumber="3540" SymbolDisplacement="89" SymbolName="SampleTarget32!std::_Median&lt;int *>@24432"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="32" LineDisplacement="20" LineNumber="3553" SymbolDisplacement="49" SymbolName="SampleTarget32!std::_Unguarded_partition&lt;int *>@23584"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="33" LineDisplacement="12" LineNumber="3599" SymbolDisplacement="521" SymbolName="SampleTarget32!std::_Unguarded_partition&lt;int *>@23584"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility" Id="34" LineDisplacement="29" LineNumber="247" SymbolDisplacement="29" SymbolName="SampleTarget32!std::pair&lt;int *,int *>::pair&lt;int *,int *>&lt;int * &amp;,int * &amp;>@24656"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="35" LineDisplacement="16" LineNumber="3586" SymbolDisplacement="362" SymbolName="SampleTarget32!std::_Unguarded_partition&lt;int *>@23584"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="36" LineDisplacement="9" LineNumber="3579" SymbolDisplacement="277" SymbolName="SampleTarget32!std::_Unguarded_partition&lt;int *>@23584"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="37" LineDisplacement="4" LineNumber="3586" SymbolDisplacement="350" SymbolName="SampleTarget32!std::_Unguarded_partition&lt;int *>@23584"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="38" LineDisplacement="0" LineNumber="3598" SymbolDisplacement="493" SymbolName="SampleTarget32!std::_Unguarded_partition&lt;int *>@23584"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="39" LineDisplacement="0" LineNumber="3575" SymbolDisplacement="212" SymbolName="SampleTarget32!std::_Unguarded_partition&lt;int *>@23584"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="40" LineDisplacement="13" LineNumber="3591" SymbolDisplacement="399" SymbolName="SampleTarget32!std::_Unguarded_partition&lt;int *>@23584"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="41" LineDisplacement="0" LineNumber="3597" SymbolDisplacement="467" SymbolName="SampleTarget32!std::_Unguarded_partition&lt;int *>@23584"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory" Id="42" LineDisplacement="1" LineNumber="110" SymbolDisplacement="1" SymbolName="SampleTarget32!std::forward&lt;int * &amp;>@25200"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility" Id="43" LineDisplacement="9" LineNumber="102" SymbolDisplacement="13" SymbolName="SampleTarget32!std::swap&lt;int>@23520"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="44" LineDisplacement="13" LineNumber="3526" SymbolDisplacement="28" SymbolName="SampleTarget32!std::_Med3&lt;int *>@25104"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="45" LineDisplacement="35" LineNumber="3541" SymbolDisplacement="149" SymbolName="SampleTarget32!std::_Median&lt;int *>@24432"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="46" LineDisplacement="3" LineNumber="3574" SymbolDisplacement="203" SymbolName="SampleTarget32!std::_Unguarded_partition&lt;int *>@23584"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="47" LineDisplacement="0" LineNumber="3510" SymbolDisplacement="161" SymbolName="SampleTarget32!std::_Insertion_sort1&lt;int *,int>@24880"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="48" LineDisplacement="13" LineNumber="3579" SymbolDisplacement="281" SymbolName="SampleTarget32!std::_Unguarded_partition&lt;int *>@23584"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility" Id="49" LineDisplacement="4" LineNumber="103" SymbolDisplacement="25" SymbolName="SampleTarget32!std::swap&lt;int>@23520"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="50" LineDisplacement="12" LineNumber="2219" SymbolDisplacement="39" SymbolName="SampleTarget32!std::_Random_shuffle&lt;int *,int>@22640"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="51" LineDisplacement="23" LineNumber="3602" SymbolDisplacement="559" SymbolName="SampleTarget32!std::_Unguarded_partition&lt;int *>@23584"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="52" LineDisplacement="3" LineNumber="3530" SymbolDisplacement="74" SymbolName="SampleTarget32!std::_Med3&lt;int *>@25104"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="53" LineDisplacement="6" LineNumber="3574" SymbolDisplacement="206" SymbolName="SampleTarget32!std::_Unguarded_partition&lt;int *>@23584"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="54" LineDisplacement="6" LineNumber="3500" SymbolDisplacement="74" SymbolName="SampleTarget32!std::_Insertion_sort1&lt;int *,int>@24880"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility" Id="55" LineDisplacement="0" LineNumber="102" SymbolDisplacement="4" SymbolName="SampleTarget32!std::swap&lt;int>@23520"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="56" LineDisplacement="0" LineNumber="3572" SymbolDisplacement="186" SymbolName="SampleTarget32!std::_Unguarded_partition&lt;int *>@23584"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="57" LineDisplacement="18" LineNumber="3597" SymbolDisplacement="485" SymbolName="SampleTarget32!std::_Unguarded_partition&lt;int *>@23584"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="58" LineDisplacement="12" LineNumber="3572" SymbolDisplacement="198" SymbolName="SampleTarget32!std::_Unguarded_partition&lt;int *>@23584"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="59" LineDisplacement="2" LineNumber="3509" SymbolDisplacement="136" SymbolName="SampleTarget32!std::_Insertion_sort1&lt;int *,int>@24880"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="60" LineDisplacement="0" LineNumber="3579" SymbolDisplacement="268" SymbolName="SampleTarget32!std::_Unguarded_partition&lt;int *>@23584"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="61" LineDisplacement="14" LineNumber="2228" SymbolDisplacement="152" SymbolName="SampleTarget32!std::_Random_shuffle&lt;int *,int>@22640"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="62" LineDisplacement="0" LineNumber="3500" SymbolDisplacement="68" SymbolName="SampleTarget32!std::_Insertion_sort1&lt;int *,int>@24880"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="63" LineDisplacement="19" LineNumber="3510" SymbolDisplacement="180" SymbolName="SampleTarget32!std::_Insertion_sort1&lt;int *,int>@24880"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="64" LineDisplacement="6" LineNumber="3572" SymbolDisplacement="192" SymbolName="SampleTarget32!std::_Unguarded_partition&lt;int *>@23584"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="65" LineDisplacement="9" LineNumber="3510" SymbolDisplacement="170" SymbolName="SampleTarget32!std::_Insertion_sort1&lt;int *,int>@24880"/>
    <Point FileName="c:\users\paul\documents\programs\proffy\proffy\launcher.h" Id="66" LineDisplacement="25" LineNumber="128" SymbolDisplacement="166" SymbolName="SampleTarget32!Proffy::Launcher::Finish@6112"/>
    <Point FileName="c:\users\paul\documents\programs\proffy\sampletarget\main.cpp" Id="67" LineDisplacement="0" LineNumber="51" SymbolDisplacement="474" SymbolName="SampleTarget32!main@4096"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="68" LineDisplacement="0" LineNumber="3602" SymbolDisplacement="536" SymbolName="SampleTarget32!std::_Unguarded_partition&lt;int *>@23584"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory" Id="69" LineDisplacement="0" LineNumber="110" SymbolDisplacement="0" SymbolName="SampleTarget32!std::forward&lt;int * &amp;>@25200"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="70" LineDisplacement="17" LineNumber="3614" SymbolDisplacement="51" SymbolName="SampleTarget32!std::_Sort&lt;int *,int>@22816"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="71" LineDisplacement="31" LineNumber="3577" SymbolDisplacement="247" SymbolName="SampleTarget32!std::_Unguarded_partition&lt;int *>@23584"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="72" LineDisplacement="44" LineNumber="3642" SymbolDisplacement="47" SymbolName="SampleTarget32!std::sort&lt;std::_Vector_iterator&lt;std::_Vector_val&lt;int,std::allocator&lt;int> > > >@21664"/>
    <Point FileName="c:\users\paul\documents\programs\proffy\sampletarget\main.cpp" Id="73" LineDisplacement="41" LineNumber="47" SymbolDisplacement="461" SymbolName="SampleTarget32!main@4096"/>
    <Point FileName="f:\dd\vctools\crt_bld\self_x86\crt\src\crtexe.c" Id="74" LineDisplacement="23" LineNumber="555" SymbolDisplacement="290" SymbolName="SampleTarget32!__tmainCRTStartup@26231"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="75" LineDisplacement="0" LineNumber="3581" SymbolDisplacement="283" SymbolName="SampleTarget32!std::_Unguarded_partition&lt;int *>@23584"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="76" LineDisplacement="17" LineNumber="3624" SymbolDisplacement="146" SymbolName="SampleTarget32!std::_Sort&lt;int *,int>@22816"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility" Id="77" LineDisplacement="9" LineNumber="104" SymbolDisplacement="49" SymbolName="SampleTarget32!std::swap&lt;int>@23520"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility" Id="78" LineDisplacement="13" LineNumber="2134" SymbolDisplacement="16" SymbolName="SampleTarget32!std::iter_swap&lt;int *,int *>@23488"/>
    <Point FileName="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm" Id="79" LineDisplacement="28" LineNumber="3602" SymbolDisplacement="564" SymbolName="SampleTarget32!std::_Unguarded_partition&lt;int *>@23584"/>
  </PointsEncountered>

  <CallCounters>
    <Counter CalleeId="0" CallerId="0" Count="19"/>
    <Counter CalleeId="14" CallerId="0" Count="6"/>
    <Counter CalleeId="70" CallerId="0" Count="21"/>
    <Counter CalleeId="76" CallerId="0" Count="21"/>
    <Counter CalleeId="-1" CallerId="1" Count="2"/>
    <Counter CalleeId="78" CallerId="2" Count="3"/>
    <Counter CalleeId="-1" CallerId="3" Count="3"/>
    <Counter CalleeId="-1" CallerId="4" Count="1"/>
    <Counter CalleeId="24" CallerId="4" Count="1"/>
    <Counter CalleeId="78" CallerId="4" Count="8"/>
    <Counter CalleeId="-1" CallerId="5" Count="9"/>
    <Counter CalleeId="4" CallerId="5" Count="10"/>
    <Counter CalleeId="50" CallerId="5" Count="1"/>
    <Counter CalleeId="61" CallerId="5" Count="1"/>
    <Counter CalleeId="5" CallerId="6" Count="21"/>
    <Counter CalleeId="-1" CallerId="7" Count="1"/>
    <Counter CalleeId="-1" CallerId="8" Count="1"/>
    <Counter CalleeId="25" CallerId="8" Count="3"/>
    <Counter CalleeId="69" CallerId="8" Count="1"/>
    <Counter CalleeId="-1" CallerId="9" Count="1"/>
    <Counter CalleeId="-1" CallerId="10" Count="3"/>
    <Counter CalleeId="-1" CallerId="11" Count="1"/>
    <Counter CalleeId="10" CallerId="11" Count="3"/>
    <Counter CalleeId="11" CallerId="12" Count="4"/>
    <Counter CalleeId="12" CallerId="13" Count="4"/>
    <Counter CalleeId="22" CallerId="13" Count="2"/>
    <Counter CalleeId="26" CallerId="13" Count="3"/>
    <Counter CalleeId="47" CallerId="13" Count="2"/>
    <Counter CalleeId="54" CallerId="13" Count="1"/>
    <Counter CalleeId="59" CallerId="13" Count="1"/>
    <Counter CalleeId="62" CallerId="13" Count="1"/>
    <Counter CalleeId="63" CallerId="13" Count="1"/>
    <Counter CalleeId="65" CallerId="13" Count="1"/>
    <Counter CalleeId="13" CallerId="14" Count="16"/>
    <Counter CalleeId="-1" CallerId="15" Count="3"/>
    <Counter CalleeId="15" CallerId="16" Count="1"/>
    <Counter CalleeId="78" CallerId="16" Count="6"/>
    <Counter CalleeId="-1" CallerId="17" Count="1"/>
    <Counter CalleeId="-1" CallerId="18" Count="2"/>
    <Counter CalleeId="-1" CallerId="19" Count="2"/>
    <Counter CalleeId="-1" CallerId="20" Count="1"/>
    <Counter CalleeId="-1" CallerId="21" Count="2"/>
    <Counter CalleeId="-1" CallerId="22" Count="1"/>
    <Counter CalleeId="25" CallerId="22" Count="1"/>
    <Counter CalleeId="-1" CallerId="23" Count="2"/>
    <Counter CalleeId="-1" CallerId="24" Count="2"/>
    <Counter CalleeId="-1" CallerId="25" Count="6"/>
    <Counter CalleeId="-1" CallerId="26" Count="3"/>
    <Counter CalleeId="-1" CallerId="27" Count="1"/>
    <Counter CalleeId="-1" CallerId="28" Count="1"/>
    <Counter CalleeId="-1" CallerId="29" Count="1"/>
    <Counter CalleeId="-1" CallerId="30" Count="2"/>
    <Counter CalleeId="-1" CallerId="31" Count="1"/>
    <Counter CalleeId="31" CallerId="32" Count="1"/>
    <Counter CalleeId="45" CallerId="32" Count="2"/>
    <Counter CalleeId="-1" CallerId="33" Count="1"/>
    <Counter CalleeId="69" CallerId="34" Count="1"/>
    <Counter CalleeId="34" CallerId="35" Count="1"/>
    <Counter CalleeId="-1" CallerId="36" Count="1"/>
    <Counter CalleeId="-1" CallerId="37" Count="1"/>
    <Counter CalleeId="-1" CallerId="38" Count="1"/>
    <Counter CalleeId="-1" CallerId="39" Count="2"/>
    <Counter CalleeId="15" CallerId="40" Count="1"/>
    <Counter CalleeId="78" CallerId="40" Count="2"/>
    <Counter CalleeId="-1" CallerId="41" Count="1"/>
    <Counter CalleeId="-1" CallerId="42" Count="1"/>
    <Counter CalleeId="25" CallerId="43" Count="1"/>
    <Counter CalleeId="42" CallerId="43" Count="1"/>
    <Counter CalleeId="78" CallerId="44" Count="1"/>
    <Counter CalleeId="44" CallerId="45" Count="1"/>
    <Counter CalleeId="52" CallerId="45" Count="1"/>
    <Counter CalleeId="-1" CallerId="46" Count="1"/>
    <Counter CalleeId="-1" CallerId="47" Count="2"/>
    <Counter CalleeId="-1" CallerId="48" Count="7"/>
    <Counter CalleeId="-1" CallerId="49" Count="1"/>
    <Counter CalleeId="-1" CallerId="50" Count="1"/>
    <Counter CalleeId="-1" CallerId="51" Count="1"/>
    <Counter CalleeId="-1" CallerId="52" Count="1"/>
    <Counter CalleeId="-1" CallerId="53" Count="1"/>
    <Counter CalleeId="-1" CallerId="54" Count="1"/>
    <Counter CalleeId="-1" CallerId="55" Count="2"/>
    <Counter CalleeId="-1" CallerId="56" Count="1"/>
    <Counter CalleeId="-1" CallerId="57" Count="1"/>
    <Counter CalleeId="-1" CallerId="58" Count="1"/>
    <Counter CalleeId="-1" CallerId="59" Count="1"/>
    <Counter CalleeId="-1" CallerId="60" Count="1"/>
    <Counter CalleeId="-1" CallerId="61" Count="1"/>
    <Counter CalleeId="-1" CallerId="62" Count="1"/>
    <Counter CalleeId="-1" CallerId="63" Count="1"/>
    <Counter CalleeId="-1" CallerId="64" Count="1"/>
    <Counter CalleeId="69" CallerId="65" Count="1"/>
    <Counter CalleeId="-1" CallerId="66" Count="1"/>
    <Counter CalleeId="66" CallerId="67" Count="1"/>
    <Counter CalleeId="-1" CallerId="68" Count="1"/>
    <Counter CalleeId="-1" CallerId="69" Count="4"/>
    <Counter CalleeId="2" CallerId="70" Count="3"/>
    <Counter CalleeId="7" CallerId="70" Count="1"/>
    <Counter CalleeId="9" CallerId="70" Count="1"/>
    <Counter CalleeId="16" CallerId="70" Count="7"/>
    <Counter CalleeId="17" CallerId="70" Count="1"/>
    <Counter CalleeId="18" CallerId="70" Count="2"/>
    <Counter CalleeId="19" CallerId="70" Count="2"/>
    <Counter CalleeId="20" CallerId="70" Count="1"/>
    <Counter CalleeId="27" CallerId="70" Count="1"/>
    <Counter CalleeId="28" CallerId="70" Count="1"/>
    <Counter CalleeId="30" CallerId="70" Count="2"/>
    <Counter CalleeId="32" CallerId="70" Count="3"/>
    <Counter CalleeId="33" CallerId="70" Count="1"/>
    <Counter CalleeId="35" CallerId="70" Count="1"/>
    <Counter CalleeId="36" CallerId="70" Count="1"/>
    <Counter CalleeId="37" CallerId="70" Count="1"/>
    <Counter CalleeId="38" CallerId="70" Count="1"/>
    <Counter CalleeId="39" CallerId="70" Count="2"/>
    <Counter CalleeId="40" CallerId="70" Count="3"/>
    <Counter CalleeId="41" CallerId="70" Count="1"/>
    <Counter CalleeId="46" CallerId="70" Count="1"/>
    <Counter CalleeId="48" CallerId="70" Count="7"/>
    <Counter CalleeId="51" CallerId="70" Count="1"/>
    <Counter CalleeId="53" CallerId="70" Count="1"/>
    <Counter CalleeId="56" CallerId="70" Count="1"/>
    <Counter CalleeId="57" CallerId="70" Count="1"/>
    <Counter CalleeId="58" CallerId="70" Count="1"/>
    <Counter CalleeId="60" CallerId="70" Count="1"/>
    <Counter CalleeId="64" CallerId="70" Count="1"/>
    <Counter CalleeId="68" CallerId="70" Count="1"/>
    <Counter CalleeId="71" CallerId="70" Count="2"/>
    <Counter CalleeId="75" CallerId="70" Count="2"/>
    <Counter CalleeId="79" CallerId="70" Count="9"/>
    <Counter CalleeId="-1" CallerId="71" Count="2"/>
    <Counter CalleeId="0" CallerId="72" Count="30"/>
    <Counter CalleeId="70" CallerId="72" Count="16"/>
    <Counter CalleeId="76" CallerId="72" Count="35"/>
    <Counter CalleeId="72" CallerId="73" Count="81"/>
    <Counter CalleeId="6" CallerId="74" Count="21"/>
    <Counter CalleeId="67" CallerId="74" Count="1"/>
    <Counter CalleeId="73" CallerId="74" Count="81"/>
    <Counter CalleeId="-1" CallerId="75" Count="2"/>
    <Counter CalleeId="0" CallerId="76" Count="18"/>
    <Counter CalleeId="14" CallerId="76" Count="10"/>
    <Counter CalleeId="70" CallerId="76" Count="28"/>
    <Counter CalleeId="76" CallerId="76" Count="22"/>
    <Counter CalleeId="-1" CallerId="77" Count="2"/>
    <Counter CalleeId="25" CallerId="77" Count="1"/>
    <Counter CalleeId="69" CallerId="77" Count="1"/>
    <Counter CalleeId="-1" CallerId="78" Count="2"/>
    <Counter CalleeId="1" CallerId="78" Count="2"/>
    <Counter CalleeId="3" CallerId="78" Count="3"/>
    <Counter CalleeId="8" CallerId="78" Count="5"/>
    <Counter CalleeId="21" CallerId="78" Count="2"/>
    <Counter CalleeId="23" CallerId="78" Count="2"/>
    <Counter CalleeId="29" CallerId="78" Count="1"/>
    <Counter CalleeId="43" CallerId="78" Count="2"/>
    <Counter CalleeId="49" CallerId="78" Count="1"/>
    <Counter CalleeId="55" CallerId="78" Count="2"/>
    <Counter CalleeId="77" CallerId="78" Count="4"/>
    <Counter CalleeId="-1" CallerId="79" Count="1"/>
    <Counter CalleeId="15" CallerId="79" Count="1"/>
    <Counter CalleeId="24" CallerId="79" Count="1"/>
    <Counter CalleeId="78" CallerId="79" Count="6"/>
  </CallCounters>

  <Files>
    <File Name="c:\program files (x86)\microsoft visual studio 10.0\vc\include\algorithm">
      <Line Number="1"><![CDATA[// algorithm standard header]]></Line>
      <Line Number="2"><![CDATA[#pragma once]]></Line>
      <Line Number="3"><![CDATA[#ifndef _ALGORITHM_]]></Line>
      <Line Number="4"><![CDATA[#define _ALGORITHM_]]></Line>
      <Line Number="5"><![CDATA[#ifndef RC_INVOKED]]></Line>
      <Line Number="6"><![CDATA[#include <memory>]]></Line>
      <Line Number="7"><![CDATA[]]></Line>
      <Line Number="8"><![CDATA[ #pragma pack(push,_CRT_PACKING)]]></Line>
      <Line Number="9"><![CDATA[ #pragma warning(push,3)]]></Line>
      <Line Number="10"><![CDATA[ #pragma warning(disable: 4244)]]></Line>
      <Line Number="11"><![CDATA[]]></Line>
      <Line Number="12"><![CDATA[_STD_BEGIN]]></Line>
      <Line Number="13"><![CDATA[		// COMMON SORT PARAMETERS]]></Line>
      <Line Number="14"><![CDATA[const int _ISORT_MAX = 32;	// maximum size for insertion sort]]></Line>
      <Line Number="15"><![CDATA[]]></Line>
      <Line Number="16"><![CDATA[		// TEMPLATE FUNCTION for_each]]></Line>
      <Line Number="17"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="18"><![CDATA[	class _Fn1> inline]]></Line>
      <Line Number="19"><![CDATA[	_Fn1 _For_each(_InIt _First, _InIt _Last, _Fn1 _Func)]]></Line>
      <Line Number="20"><![CDATA[	{	// perform function for each element]]></Line>
      <Line Number="21"><![CDATA[	for (; _First != _Last; ++_First)]]></Line>
      <Line Number="22"><![CDATA[		_Func(*_First);]]></Line>
      <Line Number="23"><![CDATA[	return (_Func);]]></Line>
      <Line Number="24"><![CDATA[	}]]></Line>
      <Line Number="25"><![CDATA[]]></Line>
      <Line Number="26"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="27"><![CDATA[	class _Fn1> inline]]></Line>
      <Line Number="28"><![CDATA[	_Fn1 for_each(_InIt _First, _InIt _Last, _Fn1 _Func)]]></Line>
      <Line Number="29"><![CDATA[	{	// perform function for each element]]></Line>
      <Line Number="30"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="31"><![CDATA[	_DEBUG_POINTER(_Func);]]></Line>
      <Line Number="32"><![CDATA[	return (_For_each(_Unchecked(_First), _Unchecked(_Last), _Func));]]></Line>
      <Line Number="33"><![CDATA[	}]]></Line>
      <Line Number="34"><![CDATA[]]></Line>
      <Line Number="35"><![CDATA[		// TEMPLATE FUNCTION find]]></Line>
      <Line Number="36"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="37"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="38"><![CDATA[	_InIt _Find(_InIt _First, _InIt _Last, const _Ty& _Val)]]></Line>
      <Line Number="39"><![CDATA[	{	// find first matching _Val]]></Line>
      <Line Number="40"><![CDATA[	for (; _First != _Last; ++_First)]]></Line>
      <Line Number="41"><![CDATA[		if (*_First == _Val)]]></Line>
      <Line Number="42"><![CDATA[			break;]]></Line>
      <Line Number="43"><![CDATA[	return (_First);]]></Line>
      <Line Number="44"><![CDATA[	}]]></Line>
      <Line Number="45"><![CDATA[]]></Line>
      <Line Number="46"><![CDATA[inline const char *_Find(const char *_First, const char *_Last, int _Val)]]></Line>
      <Line Number="47"><![CDATA[	{	// find first char that matches _Val]]></Line>
      <Line Number="48"><![CDATA[	_First = (const char *)_CSTD memchr(_First, _Val, _Last - _First);]]></Line>
      <Line Number="49"><![CDATA[	return (_First == 0 ? _Last : _First);]]></Line>
      <Line Number="50"><![CDATA[	}]]></Line>
      <Line Number="51"><![CDATA[]]></Line>
      <Line Number="52"><![CDATA[inline const signed char *_Find(const signed char *_First,]]></Line>
      <Line Number="53"><![CDATA[	const signed char *_Last, int _Val)]]></Line>
      <Line Number="54"><![CDATA[	{	// find first signed char that matches _Val]]></Line>
      <Line Number="55"><![CDATA[	_First = (const signed char *)_CSTD memchr(_First, _Val,]]></Line>
      <Line Number="56"><![CDATA[		_Last - _First);]]></Line>
      <Line Number="57"><![CDATA[	return (_First == 0 ? _Last : _First);]]></Line>
      <Line Number="58"><![CDATA[	}]]></Line>
      <Line Number="59"><![CDATA[]]></Line>
      <Line Number="60"><![CDATA[inline const unsigned char *_Find(const unsigned char *_First,]]></Line>
      <Line Number="61"><![CDATA[	const unsigned char *_Last, int _Val)]]></Line>
      <Line Number="62"><![CDATA[	{	// find first unsigned char that matches _Val]]></Line>
      <Line Number="63"><![CDATA[	_First = (const unsigned char *)_CSTD memchr(_First, _Val,]]></Line>
      <Line Number="64"><![CDATA[		_Last - _First);]]></Line>
      <Line Number="65"><![CDATA[	return (_First == 0 ? _Last : _First);]]></Line>
      <Line Number="66"><![CDATA[	}]]></Line>
      <Line Number="67"><![CDATA[]]></Line>
      <Line Number="68"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="69"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="70"><![CDATA[	_InIt find(_InIt _First, _InIt _Last, const _Ty& _Val)]]></Line>
      <Line Number="71"><![CDATA[	{	// find first matching _Val]]></Line>
      <Line Number="72"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="73"><![CDATA[	return (_Rechecked(_First,]]></Line>
      <Line Number="74"><![CDATA[		_Find(_Unchecked(_First), _Unchecked(_Last), _Val)));]]></Line>
      <Line Number="75"><![CDATA[	}]]></Line>
      <Line Number="76"><![CDATA[]]></Line>
      <Line Number="77"><![CDATA[		// TEMPLATE FUNCTION find_if]]></Line>
      <Line Number="78"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="79"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="80"><![CDATA[	_InIt _Find_if(_InIt _First, _InIt _Last, _Pr _Pred)]]></Line>
      <Line Number="81"><![CDATA[	{	// find first satisfying _Pred]]></Line>
      <Line Number="82"><![CDATA[	for (; _First != _Last; ++_First)]]></Line>
      <Line Number="83"><![CDATA[		if (_Pred(*_First))]]></Line>
      <Line Number="84"><![CDATA[			break;]]></Line>
      <Line Number="85"><![CDATA[	return (_First);]]></Line>
      <Line Number="86"><![CDATA[	}]]></Line>
      <Line Number="87"><![CDATA[]]></Line>
      <Line Number="88"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="89"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="90"><![CDATA[	_InIt find_if(_InIt _First, _InIt _Last, _Pr _Pred)]]></Line>
      <Line Number="91"><![CDATA[	{	// find first satisfying _Pred]]></Line>
      <Line Number="92"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="93"><![CDATA[	_DEBUG_POINTER(_Pred);]]></Line>
      <Line Number="94"><![CDATA[	return (_Rechecked(_First,]]></Line>
      <Line Number="95"><![CDATA[		_Find_if(_Unchecked(_First), _Unchecked(_Last), _Pred)));]]></Line>
      <Line Number="96"><![CDATA[	}]]></Line>
      <Line Number="97"><![CDATA[]]></Line>
      <Line Number="98"><![CDATA[		// TEMPLATE FUNCTION adjacent_find]]></Line>
      <Line Number="99"><![CDATA[template<class _FwdIt> inline]]></Line>
      <Line Number="100"><![CDATA[	_FwdIt _Adjacent_find(_FwdIt _First, _FwdIt _Last)]]></Line>
      <Line Number="101"><![CDATA[	{	// find first matching successor]]></Line>
      <Line Number="102"><![CDATA[	if (_First != _Last)]]></Line>
      <Line Number="103"><![CDATA[		for (_FwdIt _Firstb; (_Firstb = _First), ++_First != _Last; )]]></Line>
      <Line Number="104"><![CDATA[			if (*_Firstb == *_First)]]></Line>
      <Line Number="105"><![CDATA[				return (_Firstb);]]></Line>
      <Line Number="106"><![CDATA[	return (_Last);]]></Line>
      <Line Number="107"><![CDATA[	}]]></Line>
      <Line Number="108"><![CDATA[]]></Line>
      <Line Number="109"><![CDATA[template<class _FwdIt> inline]]></Line>
      <Line Number="110"><![CDATA[	_FwdIt adjacent_find(_FwdIt _First, _FwdIt _Last)]]></Line>
      <Line Number="111"><![CDATA[	{	// find first matching successor]]></Line>
      <Line Number="112"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="113"><![CDATA[	return (_Rechecked(_First,]]></Line>
      <Line Number="114"><![CDATA[		_Adjacent_find(_Unchecked(_First), _Unchecked(_Last))));]]></Line>
      <Line Number="115"><![CDATA[	}]]></Line>
      <Line Number="116"><![CDATA[]]></Line>
      <Line Number="117"><![CDATA[		// TEMPLATE FUNCTION adjacent_find WITH PRED]]></Line>
      <Line Number="118"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="119"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="120"><![CDATA[	_FwdIt _Adjacent_find(_FwdIt _First, _FwdIt _Last, _Pr _Pred)]]></Line>
      <Line Number="121"><![CDATA[	{	// find first satisfying _Pred with successor]]></Line>
      <Line Number="122"><![CDATA[	if (_First != _Last)]]></Line>
      <Line Number="123"><![CDATA[		for (_FwdIt _Firstb; (_Firstb = _First), ++_First != _Last; )]]></Line>
      <Line Number="124"><![CDATA[			if (_Pred(*_Firstb, *_First))]]></Line>
      <Line Number="125"><![CDATA[				return (_Firstb);]]></Line>
      <Line Number="126"><![CDATA[	return (_Last);]]></Line>
      <Line Number="127"><![CDATA[	}]]></Line>
      <Line Number="128"><![CDATA[]]></Line>
      <Line Number="129"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="130"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="131"><![CDATA[	_FwdIt adjacent_find(_FwdIt _First, _FwdIt _Last, _Pr _Pred)]]></Line>
      <Line Number="132"><![CDATA[	{	// find first satisfying _Pred with successor]]></Line>
      <Line Number="133"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="134"><![CDATA[	_DEBUG_POINTER(_Pred);]]></Line>
      <Line Number="135"><![CDATA[	return (_Rechecked(_First,]]></Line>
      <Line Number="136"><![CDATA[		_Adjacent_find(_Unchecked(_First), _Unchecked(_Last), _Pred)));]]></Line>
      <Line Number="137"><![CDATA[	}]]></Line>
      <Line Number="138"><![CDATA[]]></Line>
      <Line Number="139"><![CDATA[		// TEMPLATE FUNCTION count]]></Line>
      <Line Number="140"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="141"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="142"><![CDATA[	typename iterator_traits<_InIt>::difference_type]]></Line>
      <Line Number="143"><![CDATA[		_Count(_InIt _First, _InIt _Last, const _Ty& _Val)]]></Line>
      <Line Number="144"><![CDATA[	{	// count elements that match _Val]]></Line>
      <Line Number="145"><![CDATA[	typename iterator_traits<_InIt>::difference_type _Count = 0;]]></Line>
      <Line Number="146"><![CDATA[]]></Line>
      <Line Number="147"><![CDATA[	for (; _First != _Last; ++_First)]]></Line>
      <Line Number="148"><![CDATA[		if (*_First == _Val)]]></Line>
      <Line Number="149"><![CDATA[			++_Count;]]></Line>
      <Line Number="150"><![CDATA[	return (_Count);]]></Line>
      <Line Number="151"><![CDATA[	}]]></Line>
      <Line Number="152"><![CDATA[]]></Line>
      <Line Number="153"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="154"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="155"><![CDATA[	typename iterator_traits<_InIt>::difference_type]]></Line>
      <Line Number="156"><![CDATA[		count(_InIt _First, _InIt _Last, const _Ty& _Val)]]></Line>
      <Line Number="157"><![CDATA[	{	// count elements that match _Val]]></Line>
      <Line Number="158"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="159"><![CDATA[	return (_Count(_Unchecked(_First), _Unchecked(_Last), _Val));]]></Line>
      <Line Number="160"><![CDATA[	}]]></Line>
      <Line Number="161"><![CDATA[]]></Line>
      <Line Number="162"><![CDATA[		// TEMPLATE FUNCTION count_if]]></Line>
      <Line Number="163"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="164"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="165"><![CDATA[	typename iterator_traits<_InIt>::difference_type]]></Line>
      <Line Number="166"><![CDATA[		_Count_if(_InIt _First, _InIt _Last, _Pr _Pred)]]></Line>
      <Line Number="167"><![CDATA[	{	// count elements satisfying _Pred]]></Line>
      <Line Number="168"><![CDATA[	typename iterator_traits<_InIt>::difference_type _Count = 0;]]></Line>
      <Line Number="169"><![CDATA[]]></Line>
      <Line Number="170"><![CDATA[	for (; _First != _Last; ++_First)]]></Line>
      <Line Number="171"><![CDATA[		if (_Pred(*_First))]]></Line>
      <Line Number="172"><![CDATA[			++_Count;]]></Line>
      <Line Number="173"><![CDATA[	return (_Count);]]></Line>
      <Line Number="174"><![CDATA[	}]]></Line>
      <Line Number="175"><![CDATA[]]></Line>
      <Line Number="176"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="177"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="178"><![CDATA[	typename iterator_traits<_InIt>::difference_type]]></Line>
      <Line Number="179"><![CDATA[		count_if(_InIt _First, _InIt _Last, _Pr _Pred)]]></Line>
      <Line Number="180"><![CDATA[	{	// count elements satisfying _Pred]]></Line>
      <Line Number="181"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="182"><![CDATA[	_DEBUG_POINTER(_Pred);]]></Line>
      <Line Number="183"><![CDATA[	return (_Count_if(_Unchecked(_First), _Unchecked(_Last), _Pred));]]></Line>
      <Line Number="184"><![CDATA[	}]]></Line>
      <Line Number="185"><![CDATA[]]></Line>
      <Line Number="186"><![CDATA[ #if _HAS_CPP0X]]></Line>
      <Line Number="187"><![CDATA[		// TEMPLATE FUNCTION all_of]]></Line>
      <Line Number="188"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="189"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="190"><![CDATA[	bool _All_of(_InIt _First, _InIt _Last, _Pr _Pred)]]></Line>
      <Line Number="191"><![CDATA[	{	// test if all elements satisfy _Pred]]></Line>
      <Line Number="192"><![CDATA[	for (; _First != _Last; ++_First)]]></Line>
      <Line Number="193"><![CDATA[		if (!_Pred(*_First))]]></Line>
      <Line Number="194"><![CDATA[			return (false);]]></Line>
      <Line Number="195"><![CDATA[	return (true);]]></Line>
      <Line Number="196"><![CDATA[	}]]></Line>
      <Line Number="197"><![CDATA[]]></Line>
      <Line Number="198"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="199"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="200"><![CDATA[	bool all_of(_InIt _First, _InIt _Last, _Pr _Pred)]]></Line>
      <Line Number="201"><![CDATA[	{	// test if all elements satisfy _Pred]]></Line>
      <Line Number="202"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="203"><![CDATA[	_DEBUG_POINTER(_Pred);]]></Line>
      <Line Number="204"><![CDATA[	return (_All_of(_Unchecked(_First), _Unchecked(_Last), _Pred));]]></Line>
      <Line Number="205"><![CDATA[	}]]></Line>
      <Line Number="206"><![CDATA[]]></Line>
      <Line Number="207"><![CDATA[		// TEMPLATE FUNCTION any_of]]></Line>
      <Line Number="208"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="209"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="210"><![CDATA[	bool _Any_of(_InIt _First, _InIt _Last, _Pr _Pred)]]></Line>
      <Line Number="211"><![CDATA[	{	// test if any element satisfies _Pred]]></Line>
      <Line Number="212"><![CDATA[	for (; _First != _Last; ++_First)]]></Line>
      <Line Number="213"><![CDATA[		if (_Pred(*_First))]]></Line>
      <Line Number="214"><![CDATA[			return (true);]]></Line>
      <Line Number="215"><![CDATA[	return (false);]]></Line>
      <Line Number="216"><![CDATA[	}]]></Line>
      <Line Number="217"><![CDATA[]]></Line>
      <Line Number="218"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="219"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="220"><![CDATA[	bool any_of(_InIt _First, _InIt _Last, _Pr _Pred)]]></Line>
      <Line Number="221"><![CDATA[	{	// test if any element satisfies _Pred]]></Line>
      <Line Number="222"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="223"><![CDATA[	_DEBUG_POINTER(_Pred);]]></Line>
      <Line Number="224"><![CDATA[	return (_Any_of(_Unchecked(_First), _Unchecked(_Last), _Pred));]]></Line>
      <Line Number="225"><![CDATA[	}]]></Line>
      <Line Number="226"><![CDATA[]]></Line>
      <Line Number="227"><![CDATA[		// TEMPLATE FUNCTION none_of]]></Line>
      <Line Number="228"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="229"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="230"><![CDATA[	bool _None_of(_InIt _First, _InIt _Last, _Pr _Pred)]]></Line>
      <Line Number="231"><![CDATA[	{	// test if no elements satisfy _Pred]]></Line>
      <Line Number="232"><![CDATA[	for (; _First != _Last; ++_First)]]></Line>
      <Line Number="233"><![CDATA[		if (_Pred(*_First))]]></Line>
      <Line Number="234"><![CDATA[			return (false);]]></Line>
      <Line Number="235"><![CDATA[	return (true);]]></Line>
      <Line Number="236"><![CDATA[	}]]></Line>
      <Line Number="237"><![CDATA[]]></Line>
      <Line Number="238"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="239"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="240"><![CDATA[	bool none_of(_InIt _First, _InIt _Last, _Pr _Pred)]]></Line>
      <Line Number="241"><![CDATA[	{	// test if no elements satisfy _Pred]]></Line>
      <Line Number="242"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="243"><![CDATA[	_DEBUG_POINTER(_Pred);]]></Line>
      <Line Number="244"><![CDATA[	return (_None_of(_Unchecked(_First), _Unchecked(_Last), _Pred));]]></Line>
      <Line Number="245"><![CDATA[	}]]></Line>
      <Line Number="246"><![CDATA[]]></Line>
      <Line Number="247"><![CDATA[		// TEMPLATE FUNCTION find_if_not]]></Line>
      <Line Number="248"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="249"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="250"><![CDATA[	_InIt _Find_if_not(_InIt _First, _InIt _Last, _Pr _Pred)]]></Line>
      <Line Number="251"><![CDATA[	{	// find first element that satisfies !_Pred]]></Line>
      <Line Number="252"><![CDATA[	for (; _First != _Last; ++_First)]]></Line>
      <Line Number="253"><![CDATA[		if (!_Pred(*_First))]]></Line>
      <Line Number="254"><![CDATA[			break;]]></Line>
      <Line Number="255"><![CDATA[	return (_First);]]></Line>
      <Line Number="256"><![CDATA[	}]]></Line>
      <Line Number="257"><![CDATA[]]></Line>
      <Line Number="258"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="259"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="260"><![CDATA[	_InIt find_if_not(_InIt _First, _InIt _Last, _Pr _Pred)]]></Line>
      <Line Number="261"><![CDATA[	{	// find first element that satisfies !_Pred]]></Line>
      <Line Number="262"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="263"><![CDATA[	_DEBUG_POINTER(_Pred);]]></Line>
      <Line Number="264"><![CDATA[	return (_Rechecked(_First,]]></Line>
      <Line Number="265"><![CDATA[		_Find_if_not(_Unchecked(_First), _Unchecked(_Last), _Pred)));]]></Line>
      <Line Number="266"><![CDATA[	}]]></Line>
      <Line Number="267"><![CDATA[]]></Line>
      <Line Number="268"><![CDATA[		// TEMPLATE FUNCTION copy_if]]></Line>
      <Line Number="269"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="270"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="271"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="272"><![CDATA[	_OutIt _Copy_if(_InIt _First, _InIt _Last, _OutIt _Dest,]]></Line>
      <Line Number="273"><![CDATA[		_Pr _Pred)]]></Line>
      <Line Number="274"><![CDATA[	{	// copy each satisfying _Pred]]></Line>
      <Line Number="275"><![CDATA[	for (; _First != _Last; ++_First)]]></Line>
      <Line Number="276"><![CDATA[		if (_Pred(*_First))]]></Line>
      <Line Number="277"><![CDATA[			*_Dest++ = *_First;]]></Line>
      <Line Number="278"><![CDATA[	return (_Dest);]]></Line>
      <Line Number="279"><![CDATA[	}]]></Line>
      <Line Number="280"><![CDATA[]]></Line>
      <Line Number="281"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 0]]></Line>
      <Line Number="282"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="283"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="284"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="285"><![CDATA[	_OutIt copy_if(_InIt _First, _InIt _Last, _OutIt _Dest,]]></Line>
      <Line Number="286"><![CDATA[		_Pr _Pred)]]></Line>
      <Line Number="287"><![CDATA[	{	// copy each satisfying _Pred]]></Line>
      <Line Number="288"><![CDATA[	return (_Copy_if(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="289"><![CDATA[		_Dest, _Pred));]]></Line>
      <Line Number="290"><![CDATA[	}]]></Line>
      <Line Number="291"><![CDATA[]]></Line>
      <Line Number="292"><![CDATA[ #else /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="293"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="294"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="295"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="296"><![CDATA[	_OutIt _Copy_if(_InIt _First, _InIt _Last, _OutIt _Dest,]]></Line>
      <Line Number="297"><![CDATA[		_Pr _Pred, _STD tr1::true_type)]]></Line>
      <Line Number="298"><![CDATA[	{	// copy each satisfying _Pred, checked dest]]></Line>
      <Line Number="299"><![CDATA[	return (_Copy_if(_First, _Last,]]></Line>
      <Line Number="300"><![CDATA[		_Dest, _Pred));]]></Line>
      <Line Number="301"><![CDATA[	}]]></Line>
      <Line Number="302"><![CDATA[]]></Line>
      <Line Number="303"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="304"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="305"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="306"><![CDATA[_SCL_INSECURE_DEPRECATE]]></Line>
      <Line Number="307"><![CDATA[	_OutIt _Copy_if(_InIt _First, _InIt _Last, _OutIt _Dest,]]></Line>
      <Line Number="308"><![CDATA[		_Pr _Pred, _STD tr1::false_type)]]></Line>
      <Line Number="309"><![CDATA[	{	// copy each satisfying _Pred, unchecked dest]]></Line>
      <Line Number="310"><![CDATA[	return (_Copy_if(_First, _Last,]]></Line>
      <Line Number="311"><![CDATA[		_Dest, _Pred));]]></Line>
      <Line Number="312"><![CDATA[	}]]></Line>
      <Line Number="313"><![CDATA[]]></Line>
      <Line Number="314"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="315"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="316"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="317"><![CDATA[	_OutIt copy_if(_InIt _First, _InIt _Last, _OutIt _Dest,]]></Line>
      <Line Number="318"><![CDATA[		_Pr _Pred)]]></Line>
      <Line Number="319"><![CDATA[	{	// copy each satisfying _Pred]]></Line>
      <Line Number="320"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="321"><![CDATA[	_DEBUG_POINTER(_Dest);]]></Line>
      <Line Number="322"><![CDATA[	_DEBUG_POINTER(_Pred);]]></Line>
      <Line Number="323"><![CDATA[	return (_STD _Copy_if(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="324"><![CDATA[		_Dest, _Pred, _Is_checked(_Dest)));]]></Line>
      <Line Number="325"><![CDATA[	}]]></Line>
      <Line Number="326"><![CDATA[]]></Line>
      <Line Number="327"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="328"><![CDATA[	class _OutTy,]]></Line>
      <Line Number="329"><![CDATA[	size_t _OutSize,]]></Line>
      <Line Number="330"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="331"><![CDATA[	_OutTy *copy_if(_InIt _First, _InIt _Last, _OutTy (&_Dest)[_OutSize],]]></Line>
      <Line Number="332"><![CDATA[		_Pr _Pred)]]></Line>
      <Line Number="333"><![CDATA[	{	// copy each satisfying _Pred, array dest]]></Line>
      <Line Number="334"><![CDATA[	return (_Unchecked(]]></Line>
      <Line Number="335"><![CDATA[		_STD copy_if(_First, _Last,]]></Line>
      <Line Number="336"><![CDATA[			_Array_iterator<_OutTy, _OutSize>(_Dest), _Pred)));]]></Line>
      <Line Number="337"><![CDATA[	}]]></Line>
      <Line Number="338"><![CDATA[]]></Line>
      <Line Number="339"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="340"><![CDATA[]]></Line>
      <Line Number="341"><![CDATA[		// TEMPLATE FUNCTION partition_copy]]></Line>
      <Line Number="342"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="343"><![CDATA[	class _OutIt1,]]></Line>
      <Line Number="344"><![CDATA[	class _OutIt2,]]></Line>
      <Line Number="345"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="346"><![CDATA[	_STD pair<_OutIt1, _OutIt2>]]></Line>
      <Line Number="347"><![CDATA[		_Partition_copy(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="348"><![CDATA[			_OutIt1 _Dest1, _OutIt2 _Dest2, _Pr _Pred)]]></Line>
      <Line Number="349"><![CDATA[	{	// copy true partition *_Dest1++, false to *_Dest2++]]></Line>
      <Line Number="350"><![CDATA[	for (; _First != _Last; ++_First)]]></Line>
      <Line Number="351"><![CDATA[		if (_Pred(*_First))]]></Line>
      <Line Number="352"><![CDATA[			*_Dest1++ = *_First;]]></Line>
      <Line Number="353"><![CDATA[		else]]></Line>
      <Line Number="354"><![CDATA[			*_Dest2++ = *_First;]]></Line>
      <Line Number="355"><![CDATA[	return (_STD pair<_OutIt1, _OutIt2>( _Dest1, _Dest2));]]></Line>
      <Line Number="356"><![CDATA[	}]]></Line>
      <Line Number="357"><![CDATA[]]></Line>
      <Line Number="358"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 0]]></Line>
      <Line Number="359"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="360"><![CDATA[	class _OutIt1,]]></Line>
      <Line Number="361"><![CDATA[	class _OutIt2,]]></Line>
      <Line Number="362"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="363"><![CDATA[	_STD pair<_OutIt1, _OutIt2>]]></Line>
      <Line Number="364"><![CDATA[		partition_copy(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="365"><![CDATA[			_OutIt1 _Dest1, _OutIt2 _Dest2, _Pr _Pred)]]></Line>
      <Line Number="366"><![CDATA[	{	// copy true partition *_Dest1++, false to *_Dest2++]]></Line>
      <Line Number="367"><![CDATA[	return (_STD pair<_OutIt1, _OutIt2>(]]></Line>
      <Line Number="368"><![CDATA[		_Partition_copy(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="369"><![CDATA[			_Dest1, _Dest2, _Pred)));]]></Line>
      <Line Number="370"><![CDATA[	}]]></Line>
      <Line Number="371"><![CDATA[]]></Line>
      <Line Number="372"><![CDATA[ #else /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="373"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="374"><![CDATA[	class _OutIt1,]]></Line>
      <Line Number="375"><![CDATA[	class _OutIt2,]]></Line>
      <Line Number="376"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="377"><![CDATA[	_STD pair<_OutIt1, _OutIt2>]]></Line>
      <Line Number="378"><![CDATA[		_Partition_copy(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="379"><![CDATA[			_OutIt1 _Dest1, _OutIt2 _Dest2, _Pr _Pred,]]></Line>
      <Line Number="380"><![CDATA[			_STD tr1::true_type, _STD tr1::true_type)]]></Line>
      <Line Number="381"><![CDATA[	{	// copy true partition *_Dest1++, false to *_Dest2++, checked dest]]></Line>
      <Line Number="382"><![CDATA[	return (_STD pair<_OutIt1, _OutIt2>(]]></Line>
      <Line Number="383"><![CDATA[		_Partition_copy(_First, _Last,]]></Line>
      <Line Number="384"><![CDATA[			_Dest1, _Dest2, _Pred)));]]></Line>
      <Line Number="385"><![CDATA[	}]]></Line>
      <Line Number="386"><![CDATA[]]></Line>
      <Line Number="387"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="388"><![CDATA[	class _OutIt1,]]></Line>
      <Line Number="389"><![CDATA[	class _OutIt2,]]></Line>
      <Line Number="390"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="391"><![CDATA[_SCL_INSECURE_DEPRECATE]]></Line>
      <Line Number="392"><![CDATA[	_STD pair<_OutIt1, _OutIt2>]]></Line>
      <Line Number="393"><![CDATA[		_Partition_copy(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="394"><![CDATA[			_OutIt1 _Dest1, _OutIt2 _Dest2, _Pr _Pred,]]></Line>
      <Line Number="395"><![CDATA[			_STD tr1::true_type, _STD tr1::false_type)]]></Line>
      <Line Number="396"><![CDATA[	{	// copy true partition *_Dest1++, false to *_Dest2++, unchecked dest]]></Line>
      <Line Number="397"><![CDATA[	return (_STD pair<_OutIt1, _OutIt2>(]]></Line>
      <Line Number="398"><![CDATA[		_Partition_copy(_First, _Last,]]></Line>
      <Line Number="399"><![CDATA[			_Dest1, _Dest2, _Pred)));]]></Line>
      <Line Number="400"><![CDATA[	}]]></Line>
      <Line Number="401"><![CDATA[]]></Line>
      <Line Number="402"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="403"><![CDATA[	class _OutIt1,]]></Line>
      <Line Number="404"><![CDATA[	class _OutIt2,]]></Line>
      <Line Number="405"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="406"><![CDATA[_SCL_INSECURE_DEPRECATE]]></Line>
      <Line Number="407"><![CDATA[	_STD pair<_OutIt1, _OutIt2>]]></Line>
      <Line Number="408"><![CDATA[		_Partition_copy(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="409"><![CDATA[			_OutIt1 _Dest1, _OutIt2 _Dest2, _Pr _Pred,]]></Line>
      <Line Number="410"><![CDATA[			_STD tr1::false_type, _STD tr1::true_type)]]></Line>
      <Line Number="411"><![CDATA[	{	// copy true partition *_Dest1++, false to *_Dest2++, unchecked dest]]></Line>
      <Line Number="412"><![CDATA[	return (_STD pair<_OutIt1, _OutIt2>(]]></Line>
      <Line Number="413"><![CDATA[		_Partition_copy(_First, _Last,]]></Line>
      <Line Number="414"><![CDATA[			_Dest1, _Dest2, _Pred)));]]></Line>
      <Line Number="415"><![CDATA[	}]]></Line>
      <Line Number="416"><![CDATA[]]></Line>
      <Line Number="417"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="418"><![CDATA[	class _OutIt1,]]></Line>
      <Line Number="419"><![CDATA[	class _OutIt2,]]></Line>
      <Line Number="420"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="421"><![CDATA[_SCL_INSECURE_DEPRECATE]]></Line>
      <Line Number="422"><![CDATA[	_STD pair<_OutIt1, _OutIt2>]]></Line>
      <Line Number="423"><![CDATA[		_Partition_copy(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="424"><![CDATA[			_OutIt1 _Dest1, _OutIt2 _Dest2, _Pr _Pred,]]></Line>
      <Line Number="425"><![CDATA[			_STD tr1::false_type, _STD tr1::false_type)]]></Line>
      <Line Number="426"><![CDATA[	{	// copy true partition *_Dest1++, false to *_Dest2++, unchecked dest]]></Line>
      <Line Number="427"><![CDATA[	return (_STD pair<_OutIt1, _OutIt2>(]]></Line>
      <Line Number="428"><![CDATA[		_Partition_copy(_First, _Last,]]></Line>
      <Line Number="429"><![CDATA[			_Dest1, _Dest2, _Pred)));]]></Line>
      <Line Number="430"><![CDATA[	}]]></Line>
      <Line Number="431"><![CDATA[]]></Line>
      <Line Number="432"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="433"><![CDATA[	class _OutIt1,]]></Line>
      <Line Number="434"><![CDATA[	class _OutIt2,]]></Line>
      <Line Number="435"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="436"><![CDATA[	_STD pair<_OutIt1, _OutIt2>]]></Line>
      <Line Number="437"><![CDATA[		partition_copy(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="438"><![CDATA[			_OutIt1 _Dest1, _OutIt2 _Dest2, _Pr _Pred)]]></Line>
      <Line Number="439"><![CDATA[	{	// copy true partition *_Dest1++, false to *_Dest2++]]></Line>
      <Line Number="440"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="441"><![CDATA[	_DEBUG_POINTER(_Dest1);]]></Line>
      <Line Number="442"><![CDATA[	_DEBUG_POINTER(_Dest2);]]></Line>
      <Line Number="443"><![CDATA[	_DEBUG_POINTER(_Pred);]]></Line>
      <Line Number="444"><![CDATA[	return (_STD pair<_OutIt1, _OutIt2>(]]></Line>
      <Line Number="445"><![CDATA[		_STD _Partition_copy(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="446"><![CDATA[			_Dest1, _Dest2, _Pred,]]></Line>
      <Line Number="447"><![CDATA[			_Is_checked(_Dest1), _Is_checked(_Dest2))));]]></Line>
      <Line Number="448"><![CDATA[	}]]></Line>
      <Line Number="449"><![CDATA[]]></Line>
      <Line Number="450"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="451"><![CDATA[	class _OutTy1,]]></Line>
      <Line Number="452"><![CDATA[	size_t _OutSize1,]]></Line>
      <Line Number="453"><![CDATA[	class _OutIt2,]]></Line>
      <Line Number="454"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="455"><![CDATA[	_STD pair<_OutTy1 *, _OutIt2>]]></Line>
      <Line Number="456"><![CDATA[		partition_copy(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="457"><![CDATA[			_OutTy1 (&_Dest1)[_OutSize1], _OutIt2 _Dest2, _Pr _Pred)]]></Line>
      <Line Number="458"><![CDATA[	{	// copy true partition *_Dest1++, false to *_Dest2++, array dest]]></Line>
      <Line Number="459"><![CDATA[	_STD pair<_Array_iterator<_OutTy1, _OutSize1>, _OutIt2> _Ans =]]></Line>
      <Line Number="460"><![CDATA[		_STD partition_copy(_First, _Last,]]></Line>
      <Line Number="461"><![CDATA[			_Array_iterator<_OutTy1, _OutSize1>(_Dest1), _Dest2, _Pred);]]></Line>
      <Line Number="462"><![CDATA[	return (_STD pair<_OutTy1 *, _OutIt2>(]]></Line>
      <Line Number="463"><![CDATA[		_Unchecked(_Ans.first),]]></Line>
      <Line Number="464"><![CDATA[		_Ans.second));]]></Line>
      <Line Number="465"><![CDATA[	}]]></Line>
      <Line Number="466"><![CDATA[]]></Line>
      <Line Number="467"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="468"><![CDATA[	class _OutIt1,]]></Line>
      <Line Number="469"><![CDATA[	class _OutTy2,]]></Line>
      <Line Number="470"><![CDATA[	size_t _OutSize2,]]></Line>
      <Line Number="471"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="472"><![CDATA[	_STD pair<_OutIt1, _OutTy2 *>]]></Line>
      <Line Number="473"><![CDATA[		partition_copy(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="474"><![CDATA[			_OutIt1 _Dest1, _OutTy2 (&_Dest2)[_OutSize2], _Pr _Pred)]]></Line>
      <Line Number="475"><![CDATA[	{	// copy true partition *_Dest1++, false to *_Dest2++, array dest]]></Line>
      <Line Number="476"><![CDATA[	_STD pair<_OutIt1, _Array_iterator<_OutTy2, _OutSize2> > _Ans =]]></Line>
      <Line Number="477"><![CDATA[		_STD partition_copy(_First, _Last,]]></Line>
      <Line Number="478"><![CDATA[			_Dest1, _Array_iterator<_OutTy2, _OutSize2>(_Dest2), _Pred);]]></Line>
      <Line Number="479"><![CDATA[	return (_STD pair<_OutIt1, _OutTy2 *>(]]></Line>
      <Line Number="480"><![CDATA[		_Ans.first,]]></Line>
      <Line Number="481"><![CDATA[		_Unchecked(_Ans.second)));]]></Line>
      <Line Number="482"><![CDATA[	}]]></Line>
      <Line Number="483"><![CDATA[]]></Line>
      <Line Number="484"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="485"><![CDATA[	class _OutTy1,]]></Line>
      <Line Number="486"><![CDATA[	size_t _OutSize1,]]></Line>
      <Line Number="487"><![CDATA[	class _OutTy2,]]></Line>
      <Line Number="488"><![CDATA[	size_t _OutSize2,]]></Line>
      <Line Number="489"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="490"><![CDATA[	_STD pair<_OutTy1 *, _OutTy2 *>]]></Line>
      <Line Number="491"><![CDATA[		partition_copy(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="492"><![CDATA[			_OutTy1 (&_Dest1)[_OutSize1], _OutTy2 (&_Dest2)[_OutSize2],]]></Line>
      <Line Number="493"><![CDATA[			_Pr _Pred)]]></Line>
      <Line Number="494"><![CDATA[	{	// copy true partition *_Dest1++, false to *_Dest2++, array dest]]></Line>
      <Line Number="495"><![CDATA[	_STD pair<_Array_iterator<_OutTy1, _OutSize1>,]]></Line>
      <Line Number="496"><![CDATA[		_Array_iterator<_OutTy2, _OutSize2> > _Ans =]]></Line>
      <Line Number="497"><![CDATA[			_STD partition_copy(_First, _Last,]]></Line>
      <Line Number="498"><![CDATA[				_Array_iterator<_OutTy1, _OutSize1>(_Dest1),]]></Line>
      <Line Number="499"><![CDATA[				_Array_iterator<_OutTy2, _OutSize2>(_Dest2), _Pred);]]></Line>
      <Line Number="500"><![CDATA[	return (_STD pair<_OutTy1 *, _OutTy2 *>(]]></Line>
      <Line Number="501"><![CDATA[		_Unchecked(_Ans.first),]]></Line>
      <Line Number="502"><![CDATA[		_Unchecked(_Ans.second)));]]></Line>
      <Line Number="503"><![CDATA[	}]]></Line>
      <Line Number="504"><![CDATA[]]></Line>
      <Line Number="505"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="506"><![CDATA[]]></Line>
      <Line Number="507"><![CDATA[		// TEMPLATE FUNCTION is_partitioned]]></Line>
      <Line Number="508"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="509"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="510"><![CDATA[	bool _Is_partitioned(_InIt _First, _InIt _Last, _Pr _Pred)]]></Line>
      <Line Number="511"><![CDATA[	{	// test if [_First, _Last) partitioned by _Pred]]></Line>
      <Line Number="512"><![CDATA[	for (; _First != _Last; ++_First)]]></Line>
      <Line Number="513"><![CDATA[		if (!_Pred(*_First))]]></Line>
      <Line Number="514"><![CDATA[			break;	// skip true partition]]></Line>
      <Line Number="515"><![CDATA[	for (; _First != _Last; ++_First)]]></Line>
      <Line Number="516"><![CDATA[		if (_Pred(*_First))]]></Line>
      <Line Number="517"><![CDATA[			return (false);	// found out of place element]]></Line>
      <Line Number="518"><![CDATA[	return (true);]]></Line>
      <Line Number="519"><![CDATA[	}]]></Line>
      <Line Number="520"><![CDATA[]]></Line>
      <Line Number="521"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="522"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="523"><![CDATA[	bool is_partitioned(_InIt _First, _InIt _Last, _Pr _Pred)]]></Line>
      <Line Number="524"><![CDATA[	{	// test if [_First, _Last) partitioned by _Pred]]></Line>
      <Line Number="525"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="526"><![CDATA[	_DEBUG_POINTER(_Pred);]]></Line>
      <Line Number="527"><![CDATA[	return (_Is_partitioned(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="528"><![CDATA[		_Pred));]]></Line>
      <Line Number="529"><![CDATA[	}]]></Line>
      <Line Number="530"><![CDATA[]]></Line>
      <Line Number="531"><![CDATA[		// TEMPLATE FUNCTION partition_point]]></Line>
      <Line Number="532"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="533"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="534"><![CDATA[	_FwdIt _Partition_point(_FwdIt _First, _FwdIt _Last, _Pr _Pred)]]></Line>
      <Line Number="535"><![CDATA[	{	// find beginning of false partition in [_First, _Last)]]></Line>
      <Line Number="536"><![CDATA[	for (; _First != _Last; ++_First)]]></Line>
      <Line Number="537"><![CDATA[		if (!_Pred(*_First))]]></Line>
      <Line Number="538"><![CDATA[			break;	// skip true partition]]></Line>
      <Line Number="539"><![CDATA[	return (_First);]]></Line>
      <Line Number="540"><![CDATA[	}]]></Line>
      <Line Number="541"><![CDATA[]]></Line>
      <Line Number="542"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="543"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="544"><![CDATA[	_FwdIt partition_point(_FwdIt _First, _FwdIt _Last, _Pr _Pred)]]></Line>
      <Line Number="545"><![CDATA[	{	// find beginning of false partition in [_First, _Last)]]></Line>
      <Line Number="546"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="547"><![CDATA[	_DEBUG_POINTER(_Pred);]]></Line>
      <Line Number="548"><![CDATA[	return (_Rechecked(_First,]]></Line>
      <Line Number="549"><![CDATA[		_Partition_point(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="550"><![CDATA[			_Pred)));]]></Line>
      <Line Number="551"><![CDATA[	}]]></Line>
      <Line Number="552"><![CDATA[ #endif /* _HAS_CPP0X */]]></Line>
      <Line Number="553"><![CDATA[]]></Line>
      <Line Number="554"><![CDATA[		// TEMPLATE FUNCTION search]]></Line>
      <Line Number="555"><![CDATA[template<class _FwdIt1,]]></Line>
      <Line Number="556"><![CDATA[	class _FwdIt2,]]></Line>
      <Line Number="557"><![CDATA[	class _Diff1,]]></Line>
      <Line Number="558"><![CDATA[	class _Diff2> inline]]></Line>
      <Line Number="559"><![CDATA[	_FwdIt1 _Search(_FwdIt1 _First1, _FwdIt1 _Last1,]]></Line>
      <Line Number="560"><![CDATA[		_FwdIt2 _First2, _FwdIt2 _Last2, _Diff1 *, _Diff2 *)]]></Line>
      <Line Number="561"><![CDATA[	{	// find first [_First2, _Last2) match]]></Line>
      <Line Number="562"><![CDATA[	_Diff1 _Count1 = 0;]]></Line>
      <Line Number="563"><![CDATA[	_Distance(_First1, _Last1, _Count1);]]></Line>
      <Line Number="564"><![CDATA[	_Diff2 _Count2 = 0;]]></Line>
      <Line Number="565"><![CDATA[	_Distance(_First2, _Last2, _Count2);]]></Line>
      <Line Number="566"><![CDATA[]]></Line>
      <Line Number="567"><![CDATA[	for (; _Count2 <= _Count1; ++_First1, --_Count1)]]></Line>
      <Line Number="568"><![CDATA[		{	// room for match, try it]]></Line>
      <Line Number="569"><![CDATA[		_FwdIt1 _Mid1 = _First1;]]></Line>
      <Line Number="570"><![CDATA[		for (_FwdIt2 _Mid2 = _First2; ; ++_Mid1, ++_Mid2)]]></Line>
      <Line Number="571"><![CDATA[			if (_Mid2 == _Last2)]]></Line>
      <Line Number="572"><![CDATA[				return (_First1);]]></Line>
      <Line Number="573"><![CDATA[			else if (!(*_Mid1 == *_Mid2))]]></Line>
      <Line Number="574"><![CDATA[				break;]]></Line>
      <Line Number="575"><![CDATA[		}]]></Line>
      <Line Number="576"><![CDATA[	return (_Last1);]]></Line>
      <Line Number="577"><![CDATA[	}]]></Line>
      <Line Number="578"><![CDATA[]]></Line>
      <Line Number="579"><![CDATA[template<class _FwdIt1,]]></Line>
      <Line Number="580"><![CDATA[	class _FwdIt2> inline]]></Line>
      <Line Number="581"><![CDATA[	_FwdIt1 search(_FwdIt1 _First1, _FwdIt1 _Last1,]]></Line>
      <Line Number="582"><![CDATA[		_FwdIt2 _First2, _FwdIt2 _Last2)]]></Line>
      <Line Number="583"><![CDATA[	{	// find first [_First2, _Last2) match]]></Line>
      <Line Number="584"><![CDATA[	_DEBUG_RANGE(_First1, _Last1);]]></Line>
      <Line Number="585"><![CDATA[	_DEBUG_RANGE(_First2, _Last2);]]></Line>
      <Line Number="586"><![CDATA[	return (_Rechecked(_First1,]]></Line>
      <Line Number="587"><![CDATA[		_Search(_Unchecked(_First1), _Unchecked(_Last1),]]></Line>
      <Line Number="588"><![CDATA[			_Unchecked(_First2), _Unchecked(_Last2),]]></Line>
      <Line Number="589"><![CDATA[			_Dist_type(_First1), _Dist_type(_First2))));]]></Line>
      <Line Number="590"><![CDATA[	}]]></Line>
      <Line Number="591"><![CDATA[]]></Line>
      <Line Number="592"><![CDATA[		// TEMPLATE FUNCTION search WITH PRED]]></Line>
      <Line Number="593"><![CDATA[template<class _FwdIt1,]]></Line>
      <Line Number="594"><![CDATA[	class _FwdIt2,]]></Line>
      <Line Number="595"><![CDATA[	class _Diff1,]]></Line>
      <Line Number="596"><![CDATA[	class _Diff2,]]></Line>
      <Line Number="597"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="598"><![CDATA[	_FwdIt1 _Search(_FwdIt1 _First1, _FwdIt1 _Last1,]]></Line>
      <Line Number="599"><![CDATA[		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred, _Diff1 *, _Diff2 *)]]></Line>
      <Line Number="600"><![CDATA[	{	// find first [_First2, _Last2) satisfying _Pred]]></Line>
      <Line Number="601"><![CDATA[	_Diff1 _Count1 = 0;]]></Line>
      <Line Number="602"><![CDATA[	_Distance(_First1, _Last1, _Count1);]]></Line>
      <Line Number="603"><![CDATA[	_Diff2 _Count2 = 0;]]></Line>
      <Line Number="604"><![CDATA[	_Distance(_First2, _Last2, _Count2);]]></Line>
      <Line Number="605"><![CDATA[]]></Line>
      <Line Number="606"><![CDATA[	for (; _Count2 <= _Count1; ++_First1, --_Count1)]]></Line>
      <Line Number="607"><![CDATA[		{	// room for match, try it]]></Line>
      <Line Number="608"><![CDATA[		_FwdIt1 _Mid1 = _First1;]]></Line>
      <Line Number="609"><![CDATA[		for (_FwdIt2 _Mid2 = _First2; ; ++_Mid1, ++_Mid2)]]></Line>
      <Line Number="610"><![CDATA[			if (_Mid2 == _Last2)]]></Line>
      <Line Number="611"><![CDATA[				return (_First1);]]></Line>
      <Line Number="612"><![CDATA[			else if (!_Pred(*_Mid1, *_Mid2))]]></Line>
      <Line Number="613"><![CDATA[				break;]]></Line>
      <Line Number="614"><![CDATA[		}]]></Line>
      <Line Number="615"><![CDATA[	return (_Last1);]]></Line>
      <Line Number="616"><![CDATA[	}]]></Line>
      <Line Number="617"><![CDATA[]]></Line>
      <Line Number="618"><![CDATA[template<class _FwdIt1,]]></Line>
      <Line Number="619"><![CDATA[	class _FwdIt2,]]></Line>
      <Line Number="620"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="621"><![CDATA[	_FwdIt1 search(_FwdIt1 _First1, _FwdIt1 _Last1,]]></Line>
      <Line Number="622"><![CDATA[		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)]]></Line>
      <Line Number="623"><![CDATA[	{	// find first [_First2, _Last2) satisfying _Pred]]></Line>
      <Line Number="624"><![CDATA[	_DEBUG_RANGE(_First1, _Last1);]]></Line>
      <Line Number="625"><![CDATA[	_DEBUG_RANGE(_First2, _Last2);]]></Line>
      <Line Number="626"><![CDATA[	_DEBUG_POINTER(_Pred);]]></Line>
      <Line Number="627"><![CDATA[	return (_Rechecked(_First1,]]></Line>
      <Line Number="628"><![CDATA[		_Search(_Unchecked(_First1), _Unchecked(_Last1),]]></Line>
      <Line Number="629"><![CDATA[			_Unchecked(_First2), _Unchecked(_Last2), _Pred,]]></Line>
      <Line Number="630"><![CDATA[			_Dist_type(_First1), _Dist_type(_First2))));]]></Line>
      <Line Number="631"><![CDATA[	}]]></Line>
      <Line Number="632"><![CDATA[]]></Line>
      <Line Number="633"><![CDATA[		// TEMPLATE FUNCTION search_n]]></Line>
      <Line Number="634"><![CDATA[template<class _FwdIt1,]]></Line>
      <Line Number="635"><![CDATA[	class _Diff2,]]></Line>
      <Line Number="636"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="637"><![CDATA[	_FwdIt1 _Search_n(_FwdIt1 _First1, _FwdIt1 _Last1,]]></Line>
      <Line Number="638"><![CDATA[		_Diff2 _Count, const _Ty& _Val, forward_iterator_tag)]]></Line>
      <Line Number="639"><![CDATA[	{	// find first _Count * _Val match, forward iterators]]></Line>
      <Line Number="640"><![CDATA[	if (_Count <= 0)]]></Line>
      <Line Number="641"><![CDATA[		return (_First1);]]></Line>
      <Line Number="642"><![CDATA[]]></Line>
      <Line Number="643"><![CDATA[	for (; _First1 != _Last1; ++_First1)]]></Line>
      <Line Number="644"><![CDATA[		if (*_First1 == _Val)]]></Line>
      <Line Number="645"><![CDATA[			{	// found start of possible match, check it out]]></Line>
      <Line Number="646"><![CDATA[			_FwdIt1 _Mid1 = _First1;]]></Line>
      <Line Number="647"><![CDATA[]]></Line>
      <Line Number="648"><![CDATA[			for (_Diff2 _Count1 = _Count; ; )]]></Line>
      <Line Number="649"><![CDATA[				if (--_Count1 == 0)]]></Line>
      <Line Number="650"><![CDATA[					return (_First1);	// found rest of match, report it]]></Line>
      <Line Number="651"><![CDATA[				else if (++_Mid1 == _Last1)]]></Line>
      <Line Number="652"><![CDATA[					return (_Last1);	// short match at end]]></Line>
      <Line Number="653"><![CDATA[				else if (!(*_Mid1 == _Val))]]></Line>
      <Line Number="654"><![CDATA[					break;	// short match not at end]]></Line>
      <Line Number="655"><![CDATA[]]></Line>
      <Line Number="656"><![CDATA[			_First1 = _Mid1;	// pick up just beyond failed match]]></Line>
      <Line Number="657"><![CDATA[			}]]></Line>
      <Line Number="658"><![CDATA[	return (_Last1);]]></Line>
      <Line Number="659"><![CDATA[	}]]></Line>
      <Line Number="660"><![CDATA[]]></Line>
      <Line Number="661"><![CDATA[template<class _FwdIt1,]]></Line>
      <Line Number="662"><![CDATA[	class _Diff2,]]></Line>
      <Line Number="663"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="664"><![CDATA[	_FwdIt1 _Search_n(_FwdIt1 _First1, _FwdIt1 _Last1,]]></Line>
      <Line Number="665"><![CDATA[		_Diff2 _Count, const _Ty& _Val, random_access_iterator_tag)]]></Line>
      <Line Number="666"><![CDATA[	{	// find first _Count * _Val match, random-access iterators]]></Line>
      <Line Number="667"><![CDATA[	if (_Count <= 0)]]></Line>
      <Line Number="668"><![CDATA[		return (_First1);]]></Line>
      <Line Number="669"><![CDATA[]]></Line>
      <Line Number="670"><![CDATA[	_FwdIt1 _Oldfirst1 = _First1;]]></Line>
      <Line Number="671"><![CDATA[	for (_Diff2 _Inc = 0; _Count <= _Last1 - _Oldfirst1; )]]></Line>
      <Line Number="672"><![CDATA[		{	// enough room, look for a match]]></Line>
      <Line Number="673"><![CDATA[		_First1 = _Oldfirst1 + _Inc;]]></Line>
      <Line Number="674"><![CDATA[		if (*_First1 == _Val)]]></Line>
      <Line Number="675"><![CDATA[			{	// found part of possible match, check it out]]></Line>
      <Line Number="676"><![CDATA[			_Diff2 _Count1 = _Count;]]></Line>
      <Line Number="677"><![CDATA[			_FwdIt1 _Mid1 = _First1;]]></Line>
      <Line Number="678"><![CDATA[]]></Line>
      <Line Number="679"><![CDATA[			for (; _Oldfirst1 != _First1 && _First1[-1] == _Val; --_First1)]]></Line>
      <Line Number="680"><![CDATA[				--_Count1;	// back up over any skipped prefix]]></Line>
      <Line Number="681"><![CDATA[]]></Line>
      <Line Number="682"><![CDATA[			if (_Count1 <= _Last1 - _Mid1)]]></Line>
      <Line Number="683"><![CDATA[				for (; ; )	// enough left, test suffix]]></Line>
      <Line Number="684"><![CDATA[					if (--_Count1 == 0)]]></Line>
      <Line Number="685"><![CDATA[						return (_First1);	// found rest of match, report it]]></Line>
      <Line Number="686"><![CDATA[					else if (!(*++_Mid1 == _Val))]]></Line>
      <Line Number="687"><![CDATA[						break;	// short match not at end]]></Line>
      <Line Number="688"><![CDATA[]]></Line>
      <Line Number="689"><![CDATA[			_Oldfirst1 = ++_Mid1;	// failed match, take small jump]]></Line>
      <Line Number="690"><![CDATA[			_Inc = 0;]]></Line>
      <Line Number="691"><![CDATA[			}]]></Line>
      <Line Number="692"><![CDATA[		else]]></Line>
      <Line Number="693"><![CDATA[			{	// no match, take big jump and back up as needed]]></Line>
      <Line Number="694"><![CDATA[			_Oldfirst1 = _First1 + 1;]]></Line>
      <Line Number="695"><![CDATA[			_Inc = _Count - 1;]]></Line>
      <Line Number="696"><![CDATA[			}]]></Line>
      <Line Number="697"><![CDATA[		}]]></Line>
      <Line Number="698"><![CDATA[	return (_Last1);]]></Line>
      <Line Number="699"><![CDATA[	}]]></Line>
      <Line Number="700"><![CDATA[]]></Line>
      <Line Number="701"><![CDATA[template<class _FwdIt1,]]></Line>
      <Line Number="702"><![CDATA[	class _Diff2,]]></Line>
      <Line Number="703"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="704"><![CDATA[	_FwdIt1 search_n(_FwdIt1 _First1, _FwdIt1 _Last1,]]></Line>
      <Line Number="705"><![CDATA[		_Diff2 _Count, const _Ty& _Val)]]></Line>
      <Line Number="706"><![CDATA[	{	// find first _Count * _Val match]]></Line>
      <Line Number="707"><![CDATA[	_DEBUG_RANGE(_First1, _Last1);]]></Line>
      <Line Number="708"><![CDATA[	return (_Rechecked(_First1,]]></Line>
      <Line Number="709"><![CDATA[		_Search_n(_Unchecked(_First1), _Unchecked(_Last1), _Count, _Val,]]></Line>
      <Line Number="710"><![CDATA[			_Iter_cat(_First1))));]]></Line>
      <Line Number="711"><![CDATA[	}]]></Line>
      <Line Number="712"><![CDATA[]]></Line>
      <Line Number="713"><![CDATA[		// TEMPLATE FUNCTION search_n WITH PRED]]></Line>
      <Line Number="714"><![CDATA[template<class _FwdIt1,]]></Line>
      <Line Number="715"><![CDATA[	class _Diff2,]]></Line>
      <Line Number="716"><![CDATA[	class _Ty,]]></Line>
      <Line Number="717"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="718"><![CDATA[	_FwdIt1 _Search_n(_FwdIt1 _First1, _FwdIt1 _Last1,]]></Line>
      <Line Number="719"><![CDATA[		_Diff2 _Count, const _Ty& _Val, _Pr _Pred, forward_iterator_tag)]]></Line>
      <Line Number="720"><![CDATA[	{	// find first _Count * _Val satisfying _Pred, forward iterators]]></Line>
      <Line Number="721"><![CDATA[	if (_Count <= 0)]]></Line>
      <Line Number="722"><![CDATA[		return (_First1);]]></Line>
      <Line Number="723"><![CDATA[]]></Line>
      <Line Number="724"><![CDATA[	for (; _First1 != _Last1; ++_First1)]]></Line>
      <Line Number="725"><![CDATA[		if (_Pred(*_First1, _Val))]]></Line>
      <Line Number="726"><![CDATA[			{	// found start of possible match, check it out]]></Line>
      <Line Number="727"><![CDATA[			_FwdIt1 _Mid1 = _First1;]]></Line>
      <Line Number="728"><![CDATA[]]></Line>
      <Line Number="729"><![CDATA[			for (_Diff2 _Count1 = _Count; ; )]]></Line>
      <Line Number="730"><![CDATA[				if (--_Count1 == 0)]]></Line>
      <Line Number="731"><![CDATA[					return (_First1);	// found rest of match, report it]]></Line>
      <Line Number="732"><![CDATA[				else if (++_Mid1 == _Last1)]]></Line>
      <Line Number="733"><![CDATA[					return (_Last1);	// short match at end]]></Line>
      <Line Number="734"><![CDATA[				else if (!_Pred(*_Mid1, _Val))]]></Line>
      <Line Number="735"><![CDATA[					break;	// short match not at end]]></Line>
      <Line Number="736"><![CDATA[]]></Line>
      <Line Number="737"><![CDATA[			_First1 = _Mid1;	// pick up just beyond failed match]]></Line>
      <Line Number="738"><![CDATA[			}]]></Line>
      <Line Number="739"><![CDATA[	return (_Last1);]]></Line>
      <Line Number="740"><![CDATA[	}]]></Line>
      <Line Number="741"><![CDATA[]]></Line>
      <Line Number="742"><![CDATA[template<class _FwdIt1,]]></Line>
      <Line Number="743"><![CDATA[	class _Diff2,]]></Line>
      <Line Number="744"><![CDATA[	class _Ty,]]></Line>
      <Line Number="745"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="746"><![CDATA[	_FwdIt1 _Search_n(_FwdIt1 _First1, _FwdIt1 _Last1,]]></Line>
      <Line Number="747"><![CDATA[		_Diff2 _Count, const _Ty& _Val, _Pr _Pred, random_access_iterator_tag)]]></Line>
      <Line Number="748"><![CDATA[	{	// find first _Count * _Val satisfying _Pred, random-access iterators]]></Line>
      <Line Number="749"><![CDATA[	if (_Count <= 0)]]></Line>
      <Line Number="750"><![CDATA[		return (_First1);]]></Line>
      <Line Number="751"><![CDATA[]]></Line>
      <Line Number="752"><![CDATA[	_FwdIt1 _Oldfirst1 = _First1;]]></Line>
      <Line Number="753"><![CDATA[	for (; _Count <= _Last1 - _Oldfirst1; )]]></Line>
      <Line Number="754"><![CDATA[		{	// enough room, look for a match]]></Line>
      <Line Number="755"><![CDATA[		if (_Pred(*_First1, _Val))]]></Line>
      <Line Number="756"><![CDATA[			{	// found part of possible match, check it out]]></Line>
      <Line Number="757"><![CDATA[			_Diff2 _Count1 = _Count;]]></Line>
      <Line Number="758"><![CDATA[			_FwdIt1 _Mid1 = _First1;]]></Line>
      <Line Number="759"><![CDATA[]]></Line>
      <Line Number="760"><![CDATA[			for (; _Oldfirst1 != _First1 && _Pred(_First1[-1], _Val);]]></Line>
      <Line Number="761"><![CDATA[				--_First1)]]></Line>
      <Line Number="762"><![CDATA[				--_Count1;	// back up over any skipped prefix]]></Line>
      <Line Number="763"><![CDATA[]]></Line>
      <Line Number="764"><![CDATA[			if (_Count1 <= _Last1 - _Mid1)]]></Line>
      <Line Number="765"><![CDATA[				for (; ; )	// enough left, test suffix]]></Line>
      <Line Number="766"><![CDATA[					if (--_Count1 == 0)]]></Line>
      <Line Number="767"><![CDATA[						return (_First1);	// found rest of match, report it]]></Line>
      <Line Number="768"><![CDATA[					else if (!_Pred(*++_Mid1, _Val))]]></Line>
      <Line Number="769"><![CDATA[						break;	// short match not at end]]></Line>
      <Line Number="770"><![CDATA[]]></Line>
      <Line Number="771"><![CDATA[			_Oldfirst1 = ++_Mid1;	// failed match, take small jump]]></Line>
      <Line Number="772"><![CDATA[			_First1 = _Oldfirst1;]]></Line>
      <Line Number="773"><![CDATA[			}]]></Line>
      <Line Number="774"><![CDATA[		else]]></Line>
      <Line Number="775"><![CDATA[			{	// no match, take big jump and back up as needed]]></Line>
      <Line Number="776"><![CDATA[			_Oldfirst1 = _First1 + 1;]]></Line>
      <Line Number="777"><![CDATA[			_First1 += _Count;]]></Line>
      <Line Number="778"><![CDATA[			}]]></Line>
      <Line Number="779"><![CDATA[		}]]></Line>
      <Line Number="780"><![CDATA[	return (_Last1);]]></Line>
      <Line Number="781"><![CDATA[	}]]></Line>
      <Line Number="782"><![CDATA[]]></Line>
      <Line Number="783"><![CDATA[template<class _FwdIt1,]]></Line>
      <Line Number="784"><![CDATA[	class _Diff2,]]></Line>
      <Line Number="785"><![CDATA[	class _Ty,]]></Line>
      <Line Number="786"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="787"><![CDATA[	_FwdIt1 search_n(_FwdIt1 _First1, _FwdIt1 _Last1,]]></Line>
      <Line Number="788"><![CDATA[		_Diff2 _Count, const _Ty& _Val, _Pr _Pred)]]></Line>
      <Line Number="789"><![CDATA[	{	// find first _Count * _Val satisfying _Pred]]></Line>
      <Line Number="790"><![CDATA[	_DEBUG_RANGE(_First1, _Last1);]]></Line>
      <Line Number="791"><![CDATA[	_DEBUG_POINTER(_Pred);]]></Line>
      <Line Number="792"><![CDATA[	return (_Rechecked(_First1,]]></Line>
      <Line Number="793"><![CDATA[		_Search_n(_Unchecked(_First1), _Unchecked(_Last1), _Count, _Val,]]></Line>
      <Line Number="794"><![CDATA[			_Pred, _Iter_cat(_First1))));]]></Line>
      <Line Number="795"><![CDATA[	}]]></Line>
      <Line Number="796"><![CDATA[]]></Line>
      <Line Number="797"><![CDATA[		// TEMPLATE FUNCTION find_end]]></Line>
      <Line Number="798"><![CDATA[template<class _FwdIt1,]]></Line>
      <Line Number="799"><![CDATA[	class _FwdIt2,]]></Line>
      <Line Number="800"><![CDATA[	class _Diff1,]]></Line>
      <Line Number="801"><![CDATA[	class _Diff2> inline]]></Line>
      <Line Number="802"><![CDATA[	_FwdIt1 _Find_end(_FwdIt1 _First1, _FwdIt1 _Last1,]]></Line>
      <Line Number="803"><![CDATA[		_FwdIt2 _First2, _FwdIt2 _Last2, _Diff1 *, _Diff2 *)]]></Line>
      <Line Number="804"><![CDATA[	{	// find last [_First2, _Last2) match]]></Line>
      <Line Number="805"><![CDATA[	_Diff1 _Count1 = 0;]]></Line>
      <Line Number="806"><![CDATA[	_Distance(_First1, _Last1, _Count1);]]></Line>
      <Line Number="807"><![CDATA[	_Diff2 _Count2 = 0;]]></Line>
      <Line Number="808"><![CDATA[	_Distance(_First2, _Last2, _Count2);]]></Line>
      <Line Number="809"><![CDATA[	_FwdIt1 _Ans = _Last1;]]></Line>
      <Line Number="810"><![CDATA[]]></Line>
      <Line Number="811"><![CDATA[	if (0 < _Count2)]]></Line>
      <Line Number="812"><![CDATA[		for (; _Count2 <= _Count1; ++_First1, --_Count1)]]></Line>
      <Line Number="813"><![CDATA[			{	// room for match, try it]]></Line>
      <Line Number="814"><![CDATA[			_FwdIt1 _Mid1 = _First1;]]></Line>
      <Line Number="815"><![CDATA[			for (_FwdIt2 _Mid2 = _First2; ; ++_Mid1)]]></Line>
      <Line Number="816"><![CDATA[				if (!(*_Mid1 == *_Mid2))]]></Line>
      <Line Number="817"><![CDATA[					break;]]></Line>
      <Line Number="818"><![CDATA[				else if (++_Mid2 == _Last2)]]></Line>
      <Line Number="819"><![CDATA[					{	// potential answer, save it]]></Line>
      <Line Number="820"><![CDATA[					_Ans = _First1;]]></Line>
      <Line Number="821"><![CDATA[					break;]]></Line>
      <Line Number="822"><![CDATA[					}]]></Line>
      <Line Number="823"><![CDATA[			}]]></Line>
      <Line Number="824"><![CDATA[	return (_Ans);]]></Line>
      <Line Number="825"><![CDATA[	}]]></Line>
      <Line Number="826"><![CDATA[]]></Line>
      <Line Number="827"><![CDATA[template<class _FwdIt1,]]></Line>
      <Line Number="828"><![CDATA[	class _FwdIt2> inline]]></Line>
      <Line Number="829"><![CDATA[	_FwdIt1 find_end(_FwdIt1 _First1, _FwdIt1 _Last1,]]></Line>
      <Line Number="830"><![CDATA[		_FwdIt2 _First2, _FwdIt2 _Last2)]]></Line>
      <Line Number="831"><![CDATA[	{	// find last [_First2, _Last2) match]]></Line>
      <Line Number="832"><![CDATA[	_DEBUG_RANGE(_First1, _Last1);]]></Line>
      <Line Number="833"><![CDATA[	_DEBUG_RANGE(_First2, _Last2);]]></Line>
      <Line Number="834"><![CDATA[	return (_Rechecked(_First1,]]></Line>
      <Line Number="835"><![CDATA[		_Find_end(_Unchecked(_First1), _Unchecked(_Last1),]]></Line>
      <Line Number="836"><![CDATA[			_Unchecked(_First2), _Unchecked(_Last2),]]></Line>
      <Line Number="837"><![CDATA[			_Dist_type(_First1), _Dist_type(_First2))));]]></Line>
      <Line Number="838"><![CDATA[	}]]></Line>
      <Line Number="839"><![CDATA[]]></Line>
      <Line Number="840"><![CDATA[		// TEMPLATE FUNCTION find_end WITH PRED]]></Line>
      <Line Number="841"><![CDATA[template<class _FwdIt1,]]></Line>
      <Line Number="842"><![CDATA[	class _FwdIt2,]]></Line>
      <Line Number="843"><![CDATA[	class _Diff1,]]></Line>
      <Line Number="844"><![CDATA[	class _Diff2,]]></Line>
      <Line Number="845"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="846"><![CDATA[	_FwdIt1 _Find_end(_FwdIt1 _First1, _FwdIt1 _Last1,]]></Line>
      <Line Number="847"><![CDATA[		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred, _Diff1 *, _Diff2 *)]]></Line>
      <Line Number="848"><![CDATA[	{	// find last [_First2, _Last2) satisfying _Pred]]></Line>
      <Line Number="849"><![CDATA[	_Diff1 _Count1 = 0;]]></Line>
      <Line Number="850"><![CDATA[	_Distance(_First1, _Last1, _Count1);]]></Line>
      <Line Number="851"><![CDATA[	_Diff2 _Count2 = 0;]]></Line>
      <Line Number="852"><![CDATA[	_Distance(_First2, _Last2, _Count2);]]></Line>
      <Line Number="853"><![CDATA[	_FwdIt1 _Ans = _Last1;]]></Line>
      <Line Number="854"><![CDATA[]]></Line>
      <Line Number="855"><![CDATA[	if (0 < _Count2)]]></Line>
      <Line Number="856"><![CDATA[		for (; _Count2 <= _Count1; ++_First1, --_Count1)]]></Line>
      <Line Number="857"><![CDATA[			{	// room for match, try it]]></Line>
      <Line Number="858"><![CDATA[			_FwdIt1 _Mid1 = _First1;]]></Line>
      <Line Number="859"><![CDATA[			for (_FwdIt2 _Mid2 = _First2; ; ++_Mid1)]]></Line>
      <Line Number="860"><![CDATA[				if (!_Pred(*_Mid1, *_Mid2))]]></Line>
      <Line Number="861"><![CDATA[					break;]]></Line>
      <Line Number="862"><![CDATA[				else if (++_Mid2 == _Last2)]]></Line>
      <Line Number="863"><![CDATA[					{	// potential answer, save it]]></Line>
      <Line Number="864"><![CDATA[					_Ans = _First1;]]></Line>
      <Line Number="865"><![CDATA[					break;]]></Line>
      <Line Number="866"><![CDATA[					}]]></Line>
      <Line Number="867"><![CDATA[			}]]></Line>
      <Line Number="868"><![CDATA[	return (_Ans);]]></Line>
      <Line Number="869"><![CDATA[	}]]></Line>
      <Line Number="870"><![CDATA[]]></Line>
      <Line Number="871"><![CDATA[template<class _FwdIt1,]]></Line>
      <Line Number="872"><![CDATA[	class _FwdIt2,]]></Line>
      <Line Number="873"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="874"><![CDATA[	_FwdIt1 find_end(_FwdIt1 _First1, _FwdIt1 _Last1,]]></Line>
      <Line Number="875"><![CDATA[		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)]]></Line>
      <Line Number="876"><![CDATA[	{	// find last [_First2, _Last2) satisfying _Pred]]></Line>
      <Line Number="877"><![CDATA[	_DEBUG_RANGE(_First1, _Last1);]]></Line>
      <Line Number="878"><![CDATA[	_DEBUG_RANGE(_First2, _Last2);]]></Line>
      <Line Number="879"><![CDATA[	_DEBUG_POINTER(_Pred);]]></Line>
      <Line Number="880"><![CDATA[	return (_Rechecked(_First1,]]></Line>
      <Line Number="881"><![CDATA[		_Find_end(_Unchecked(_First1), _Unchecked(_Last1),]]></Line>
      <Line Number="882"><![CDATA[			_Unchecked(_First2), _Unchecked(_Last2), _Pred,]]></Line>
      <Line Number="883"><![CDATA[			_Dist_type(_First1), _Dist_type(_First2))));]]></Line>
      <Line Number="884"><![CDATA[	}]]></Line>
      <Line Number="885"><![CDATA[]]></Line>
      <Line Number="886"><![CDATA[		// TEMPLATE FUNCTION find_first_of]]></Line>
      <Line Number="887"><![CDATA[template<class _FwdIt1,]]></Line>
      <Line Number="888"><![CDATA[	class _FwdIt2> inline]]></Line>
      <Line Number="889"><![CDATA[	_FwdIt1 _Find_first_of(_FwdIt1 _First1, _FwdIt1 _Last1,]]></Line>
      <Line Number="890"><![CDATA[		_FwdIt2 _First2, _FwdIt2 _Last2)]]></Line>
      <Line Number="891"><![CDATA[	{	// look for one of [_First2, _Last2) that matches element]]></Line>
      <Line Number="892"><![CDATA[	for (; _First1 != _Last1; ++_First1)]]></Line>
      <Line Number="893"><![CDATA[		for (_FwdIt2 _Mid2 = _First2; _Mid2 != _Last2; ++_Mid2)]]></Line>
      <Line Number="894"><![CDATA[			if (*_First1 == *_Mid2)]]></Line>
      <Line Number="895"><![CDATA[				return (_First1);]]></Line>
      <Line Number="896"><![CDATA[	return (_First1);]]></Line>
      <Line Number="897"><![CDATA[	}]]></Line>
      <Line Number="898"><![CDATA[]]></Line>
      <Line Number="899"><![CDATA[template<class _FwdIt1,]]></Line>
      <Line Number="900"><![CDATA[	class _FwdIt2> inline]]></Line>
      <Line Number="901"><![CDATA[	_FwdIt1 find_first_of(_FwdIt1 _First1, _FwdIt1 _Last1,]]></Line>
      <Line Number="902"><![CDATA[		_FwdIt2 _First2, _FwdIt2 _Last2)]]></Line>
      <Line Number="903"><![CDATA[	{	// look for one of [_First2, _Last2) that matches element]]></Line>
      <Line Number="904"><![CDATA[	_DEBUG_RANGE(_First1, _Last1);]]></Line>
      <Line Number="905"><![CDATA[	_DEBUG_RANGE(_First2, _Last2);]]></Line>
      <Line Number="906"><![CDATA[	return (_Rechecked(_First1,]]></Line>
      <Line Number="907"><![CDATA[		_Find_first_of(_Unchecked(_First1), _Unchecked(_Last1),]]></Line>
      <Line Number="908"><![CDATA[			_Unchecked(_First2), _Unchecked(_Last2))));]]></Line>
      <Line Number="909"><![CDATA[	}]]></Line>
      <Line Number="910"><![CDATA[]]></Line>
      <Line Number="911"><![CDATA[		// TEMPLATE FUNCTION find_first_of WITH PRED]]></Line>
      <Line Number="912"><![CDATA[template<class _FwdIt1,]]></Line>
      <Line Number="913"><![CDATA[	class _FwdIt2,]]></Line>
      <Line Number="914"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="915"><![CDATA[	_FwdIt1 _Find_first_of(_FwdIt1 _First1, _FwdIt1 _Last1,]]></Line>
      <Line Number="916"><![CDATA[		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)]]></Line>
      <Line Number="917"><![CDATA[	{	// look for one of [_First2, _Last2) satisfying _Pred with element]]></Line>
      <Line Number="918"><![CDATA[	for (; _First1 != _Last1; ++_First1)]]></Line>
      <Line Number="919"><![CDATA[		for (_FwdIt2 _Mid2 = _First2; _Mid2 != _Last2; ++_Mid2)]]></Line>
      <Line Number="920"><![CDATA[			if (_Pred(*_First1, *_Mid2))]]></Line>
      <Line Number="921"><![CDATA[				return (_First1);]]></Line>
      <Line Number="922"><![CDATA[	return (_First1);]]></Line>
      <Line Number="923"><![CDATA[	}]]></Line>
      <Line Number="924"><![CDATA[]]></Line>
      <Line Number="925"><![CDATA[template<class _FwdIt1,]]></Line>
      <Line Number="926"><![CDATA[	class _FwdIt2,]]></Line>
      <Line Number="927"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="928"><![CDATA[	_FwdIt1 find_first_of(_FwdIt1 _First1, _FwdIt1 _Last1,]]></Line>
      <Line Number="929"><![CDATA[		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)]]></Line>
      <Line Number="930"><![CDATA[	{	// look for one of [_First2, _Last2) satisfying _Pred with element]]></Line>
      <Line Number="931"><![CDATA[	_DEBUG_RANGE(_First1, _Last1);]]></Line>
      <Line Number="932"><![CDATA[	_DEBUG_RANGE(_First2, _Last2);]]></Line>
      <Line Number="933"><![CDATA[	_DEBUG_POINTER(_Pred);]]></Line>
      <Line Number="934"><![CDATA[	return (_Rechecked(_First1,]]></Line>
      <Line Number="935"><![CDATA[		_Find_first_of(_Unchecked(_First1), _Unchecked(_Last1),]]></Line>
      <Line Number="936"><![CDATA[			_Unchecked(_First2), _Unchecked(_Last2), _Pred)));]]></Line>
      <Line Number="937"><![CDATA[	}]]></Line>
      <Line Number="938"><![CDATA[]]></Line>
      <Line Number="939"><![CDATA[		// TEMPLATE FUNCTION swap_ranges]]></Line>
      <Line Number="940"><![CDATA[template<class _FwdIt1,]]></Line>
      <Line Number="941"><![CDATA[	class _FwdIt2> inline]]></Line>
      <Line Number="942"><![CDATA[	_FwdIt2 _Swap_ranges(_FwdIt1 _First1, _FwdIt1 _Last1,]]></Line>
      <Line Number="943"><![CDATA[		_FwdIt2 _Dest)]]></Line>
      <Line Number="944"><![CDATA[	{	// swap [_First1, _Last1) with [_Dest, ...)]]></Line>
      <Line Number="945"><![CDATA[	for (; _First1 != _Last1; ++_First1, ++_Dest)]]></Line>
      <Line Number="946"><![CDATA[		_STD iter_swap(_First1, _Dest);]]></Line>
      <Line Number="947"><![CDATA[	return (_Dest);]]></Line>
      <Line Number="948"><![CDATA[	}]]></Line>
      <Line Number="949"><![CDATA[]]></Line>
      <Line Number="950"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 0]]></Line>
      <Line Number="951"><![CDATA[template<class _FwdIt1,]]></Line>
      <Line Number="952"><![CDATA[	class _FwdIt2> inline]]></Line>
      <Line Number="953"><![CDATA[	_FwdIt2 swap_ranges(_FwdIt1 _First1, _FwdIt1 _Last1,]]></Line>
      <Line Number="954"><![CDATA[		_FwdIt2 _Dest)]]></Line>
      <Line Number="955"><![CDATA[	{	// swap [_First1, _Last1) with [_Dest, ...)]]></Line>
      <Line Number="956"><![CDATA[	return (_Swap_ranges(_Unchecked(_First1), _Unchecked(_Last1),]]></Line>
      <Line Number="957"><![CDATA[		_Dest));]]></Line>
      <Line Number="958"><![CDATA[	}]]></Line>
      <Line Number="959"><![CDATA[]]></Line>
      <Line Number="960"><![CDATA[ #else /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="961"><![CDATA[template<class _FwdIt1,]]></Line>
      <Line Number="962"><![CDATA[	class _FwdIt2> inline]]></Line>
      <Line Number="963"><![CDATA[	_FwdIt2 _Swap_ranges(_FwdIt1 _First1, _FwdIt1 _Last1,]]></Line>
      <Line Number="964"><![CDATA[		_FwdIt2 _Dest,]]></Line>
      <Line Number="965"><![CDATA[		forward_iterator_tag, forward_iterator_tag)]]></Line>
      <Line Number="966"><![CDATA[	{	// swap [_First1, _Last1) with [_Dest, ...), arbitrary iterators]]></Line>
      <Line Number="967"><![CDATA[	return (_Swap_ranges(_First1, _Last1,]]></Line>
      <Line Number="968"><![CDATA[		_Dest));]]></Line>
      <Line Number="969"><![CDATA[	}]]></Line>
      <Line Number="970"><![CDATA[]]></Line>
      <Line Number="971"><![CDATA[template<class _FwdIt1,]]></Line>
      <Line Number="972"><![CDATA[	class _FwdIt2> inline]]></Line>
      <Line Number="973"><![CDATA[	_FwdIt2 _Swap_ranges(_FwdIt1 _First1, _FwdIt1 _Last1,]]></Line>
      <Line Number="974"><![CDATA[		_FwdIt2 _Dest,]]></Line>
      <Line Number="975"><![CDATA[		random_access_iterator_tag, random_access_iterator_tag)]]></Line>
      <Line Number="976"><![CDATA[	{	// swap [_First1, _Last1) with [_Dest, ...), random-access iterators]]></Line>
      <Line Number="977"><![CDATA[	_FwdIt2 _Ans = _Dest + (_Last1 - _First1);	// also checks range]]></Line>
      <Line Number="978"><![CDATA[	_Swap_ranges(_First1, _Last1,]]></Line>
      <Line Number="979"><![CDATA[		_Unchecked(_Dest));]]></Line>
      <Line Number="980"><![CDATA[	return (_Ans);]]></Line>
      <Line Number="981"><![CDATA[	}]]></Line>
      <Line Number="982"><![CDATA[]]></Line>
      <Line Number="983"><![CDATA[template<class _FwdIt1,]]></Line>
      <Line Number="984"><![CDATA[	class _FwdIt2> inline]]></Line>
      <Line Number="985"><![CDATA[	_FwdIt2 _Swap_ranges(_FwdIt1 _First1, _FwdIt1 _Last1,]]></Line>
      <Line Number="986"><![CDATA[		_FwdIt2 _Dest, _STD tr1::true_type)]]></Line>
      <Line Number="987"><![CDATA[	{	// swap [_First1, _Last1) with [_Dest, ...), checked dest]]></Line>
      <Line Number="988"><![CDATA[	return (_Swap_ranges(_First1, _Last1,]]></Line>
      <Line Number="989"><![CDATA[		_Dest, _Iter_cat(_First1), _Iter_cat(_Dest)));]]></Line>
      <Line Number="990"><![CDATA[	}]]></Line>
      <Line Number="991"><![CDATA[]]></Line>
      <Line Number="992"><![CDATA[template<class _FwdIt1,]]></Line>
      <Line Number="993"><![CDATA[	class _FwdIt2> inline]]></Line>
      <Line Number="994"><![CDATA[_SCL_INSECURE_DEPRECATE]]></Line>
      <Line Number="995"><![CDATA[	_FwdIt2 _Swap_ranges(_FwdIt1 _First1, _FwdIt1 _Last1,]]></Line>
      <Line Number="996"><![CDATA[		_FwdIt2 _Dest, _STD tr1::false_type)]]></Line>
      <Line Number="997"><![CDATA[	{	// swap [_First1, _Last1) with [_Dest, ...), unchecked dest]]></Line>
      <Line Number="998"><![CDATA[	return (_Swap_ranges(_First1, _Last1,]]></Line>
      <Line Number="999"><![CDATA[		_Dest, _Iter_cat(_First1), _Iter_cat(_Dest)));]]></Line>
      <Line Number="1000"><![CDATA[	}]]></Line>
      <Line Number="1001"><![CDATA[]]></Line>
      <Line Number="1002"><![CDATA[template<class _FwdIt1,]]></Line>
      <Line Number="1003"><![CDATA[	class _FwdIt2> inline]]></Line>
      <Line Number="1004"><![CDATA[	_FwdIt2 swap_ranges(_FwdIt1 _First1, _FwdIt1 _Last1,]]></Line>
      <Line Number="1005"><![CDATA[		_FwdIt2 _Dest)]]></Line>
      <Line Number="1006"><![CDATA[	{	// swap [_First1, _Last1) with [_Dest, ...)]]></Line>
      <Line Number="1007"><![CDATA[	_DEBUG_RANGE(_First1, _Last1);]]></Line>
      <Line Number="1008"><![CDATA[	_DEBUG_POINTER(_Dest);]]></Line>
      <Line Number="1009"><![CDATA[	return (_STD _Swap_ranges(_Unchecked(_First1), _Unchecked(_Last1),]]></Line>
      <Line Number="1010"><![CDATA[		_Dest, _Is_checked(_Dest)));]]></Line>
      <Line Number="1011"><![CDATA[	}]]></Line>
      <Line Number="1012"><![CDATA[]]></Line>
      <Line Number="1013"><![CDATA[template<class _FwdIt1,]]></Line>
      <Line Number="1014"><![CDATA[	class _OutTy,]]></Line>
      <Line Number="1015"><![CDATA[	size_t _OutSize> inline]]></Line>
      <Line Number="1016"><![CDATA[	_OutTy *swap_ranges(_FwdIt1 _First1, _FwdIt1 _Last1,]]></Line>
      <Line Number="1017"><![CDATA[		_OutTy (&_Dest)[_OutSize])]]></Line>
      <Line Number="1018"><![CDATA[	{	// swap [_First1, _Last1) with [_Dest, ...), array dest]]></Line>
      <Line Number="1019"><![CDATA[	return (_Unchecked(]]></Line>
      <Line Number="1020"><![CDATA[		_STD swap_ranges(_First1, _Last1,]]></Line>
      <Line Number="1021"><![CDATA[		_Array_iterator<_OutTy, _OutSize>(_Dest))));]]></Line>
      <Line Number="1022"><![CDATA[	}]]></Line>
      <Line Number="1023"><![CDATA[]]></Line>
      <Line Number="1024"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="1025"><![CDATA[]]></Line>
      <Line Number="1026"><![CDATA[		// TEMPLATE FUNCTION swap]]></Line>
      <Line Number="1027"><![CDATA[template<class _Ty,]]></Line>
      <Line Number="1028"><![CDATA[	size_t _Size> inline]]></Line>
      <Line Number="1029"><![CDATA[	void swap(_Ty (&_Left)[_Size], _Ty (&_Right)[_Size])]]></Line>
      <Line Number="1030"><![CDATA[	{	// exchange arrays stored at _Left and _Right]]></Line>
      <Line Number="1031"><![CDATA[	if (&_Left != &_Right)]]></Line>
      <Line Number="1032"><![CDATA[		_Swap_ranges(&_Left[0], &_Left[0] + _Size, &_Right[0]);]]></Line>
      <Line Number="1033"><![CDATA[	}]]></Line>
      <Line Number="1034"><![CDATA[]]></Line>
      <Line Number="1035"><![CDATA[		// TEMPLATE FUNCTION transform WITH UNARY OP]]></Line>
      <Line Number="1036"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="1037"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="1038"><![CDATA[	class _Fn1> inline]]></Line>
      <Line Number="1039"><![CDATA[	_OutIt _Transform(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="1040"><![CDATA[		_OutIt _Dest, _Fn1 _Func)]]></Line>
      <Line Number="1041"><![CDATA[	{	// transform [_First, _Last) with _Func]]></Line>
      <Line Number="1042"><![CDATA[	for (; _First != _Last; ++_First, ++_Dest)]]></Line>
      <Line Number="1043"><![CDATA[		*_Dest = _Func(*_First);]]></Line>
      <Line Number="1044"><![CDATA[	return (_Dest);]]></Line>
      <Line Number="1045"><![CDATA[	}]]></Line>
      <Line Number="1046"><![CDATA[]]></Line>
      <Line Number="1047"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 0]]></Line>
      <Line Number="1048"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="1049"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="1050"><![CDATA[	class _Fn1> inline]]></Line>
      <Line Number="1051"><![CDATA[	_OutIt transform(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="1052"><![CDATA[		_OutIt _Dest, _Fn1 _Func)]]></Line>
      <Line Number="1053"><![CDATA[	{	// transform [_First, _Last) with _Func]]></Line>
      <Line Number="1054"><![CDATA[	if (_First != _Last)]]></Line>
      <Line Number="1055"><![CDATA[		return (_Transform(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="1056"><![CDATA[			_Dest, _Func));]]></Line>
      <Line Number="1057"><![CDATA[	return (_Dest);]]></Line>
      <Line Number="1058"><![CDATA[	}]]></Line>
      <Line Number="1059"><![CDATA[]]></Line>
      <Line Number="1060"><![CDATA[ #else /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="1061"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="1062"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="1063"><![CDATA[	class _Fn1> inline]]></Line>
      <Line Number="1064"><![CDATA[	_OutIt _Transform1(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="1065"><![CDATA[		_OutIt _Dest, _Fn1 _Func,]]></Line>
      <Line Number="1066"><![CDATA[		input_iterator_tag, output_iterator_tag)]]></Line>
      <Line Number="1067"><![CDATA[	{	// transform [_First, _Last) with _Func, arbitrary iterators]]></Line>
      <Line Number="1068"><![CDATA[	return (_Transform(_First, _Last,]]></Line>
      <Line Number="1069"><![CDATA[		_Dest, _Func));]]></Line>
      <Line Number="1070"><![CDATA[	}]]></Line>
      <Line Number="1071"><![CDATA[]]></Line>
      <Line Number="1072"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="1073"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="1074"><![CDATA[	class _Fn1> inline]]></Line>
      <Line Number="1075"><![CDATA[	_OutIt _Transform1(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="1076"><![CDATA[		_OutIt _Dest, _Fn1 _Func,]]></Line>
      <Line Number="1077"><![CDATA[		random_access_iterator_tag, random_access_iterator_tag)]]></Line>
      <Line Number="1078"><![CDATA[	{	// transform [_First, _Last) with _Func, random-access iterators]]></Line>
      <Line Number="1079"><![CDATA[	_OutIt _Ans = _Dest + (_Last - _First);	// also checks range]]></Line>
      <Line Number="1080"><![CDATA[	_Transform(_First, _Last,]]></Line>
      <Line Number="1081"><![CDATA[		_Unchecked(_Dest), _Func);]]></Line>
      <Line Number="1082"><![CDATA[	return (_Ans);]]></Line>
      <Line Number="1083"><![CDATA[	}]]></Line>
      <Line Number="1084"><![CDATA[]]></Line>
      <Line Number="1085"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="1086"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="1087"><![CDATA[	class _Fn1> inline]]></Line>
      <Line Number="1088"><![CDATA[	_OutIt _Transform1(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="1089"><![CDATA[		_OutIt _Dest, _Fn1 _Func, _STD tr1::true_type)]]></Line>
      <Line Number="1090"><![CDATA[	{	// transform [_First, _Last) with _Func, checked dest]]></Line>
      <Line Number="1091"><![CDATA[	return (_Transform1(_First, _Last,]]></Line>
      <Line Number="1092"><![CDATA[		_Dest, _Func,]]></Line>
      <Line Number="1093"><![CDATA[		_Iter_cat(_First), _Iter_cat(_Dest)));]]></Line>
      <Line Number="1094"><![CDATA[	}]]></Line>
      <Line Number="1095"><![CDATA[]]></Line>
      <Line Number="1096"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="1097"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="1098"><![CDATA[	class _Fn1> inline]]></Line>
      <Line Number="1099"><![CDATA[_SCL_INSECURE_DEPRECATE]]></Line>
      <Line Number="1100"><![CDATA[	_OutIt _Transform1(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="1101"><![CDATA[		_OutIt _Dest, _Fn1 _Func, _STD tr1::false_type)]]></Line>
      <Line Number="1102"><![CDATA[	{	// transform [_First, _Last) with _Func, unchecked dest]]></Line>
      <Line Number="1103"><![CDATA[	return (_Transform1(_First, _Last,]]></Line>
      <Line Number="1104"><![CDATA[		_Dest, _Func,]]></Line>
      <Line Number="1105"><![CDATA[		_Iter_cat(_First), _Iter_cat(_Dest)));]]></Line>
      <Line Number="1106"><![CDATA[	}]]></Line>
      <Line Number="1107"><![CDATA[]]></Line>
      <Line Number="1108"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="1109"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="1110"><![CDATA[	class _Fn1> inline]]></Line>
      <Line Number="1111"><![CDATA[	_OutIt transform(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="1112"><![CDATA[		_OutIt _Dest, _Fn1 _Func)]]></Line>
      <Line Number="1113"><![CDATA[	{	// transform [_First, _Last) with _Func]]></Line>
      <Line Number="1114"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="1115"><![CDATA[	_DEBUG_POINTER(_Dest);]]></Line>
      <Line Number="1116"><![CDATA[	_DEBUG_POINTER(_Func);]]></Line>
      <Line Number="1117"><![CDATA[	if (_First != _Last)]]></Line>
      <Line Number="1118"><![CDATA[		return (_Transform1(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="1119"><![CDATA[			_Dest, _Func, _Is_checked(_Dest)));]]></Line>
      <Line Number="1120"><![CDATA[	return (_Dest);]]></Line>
      <Line Number="1121"><![CDATA[	}]]></Line>
      <Line Number="1122"><![CDATA[]]></Line>
      <Line Number="1123"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="1124"><![CDATA[	class _OutTy,]]></Line>
      <Line Number="1125"><![CDATA[	size_t _OutSize,]]></Line>
      <Line Number="1126"><![CDATA[	class _Fn1> inline]]></Line>
      <Line Number="1127"><![CDATA[	_OutTy *transform(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="1128"><![CDATA[		_OutTy (&_Dest)[_OutSize], _Fn1 _Func)]]></Line>
      <Line Number="1129"><![CDATA[	{	// transform [_First, _Last) with _Func, array dest]]></Line>
      <Line Number="1130"><![CDATA[	return (_Unchecked(]]></Line>
      <Line Number="1131"><![CDATA[		_STD transform(_First, _Last,]]></Line>
      <Line Number="1132"><![CDATA[			_Array_iterator<_OutTy, _OutSize>(_Dest), _Func)));]]></Line>
      <Line Number="1133"><![CDATA[	}]]></Line>
      <Line Number="1134"><![CDATA[]]></Line>
      <Line Number="1135"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="1136"><![CDATA[]]></Line>
      <Line Number="1137"><![CDATA[		// TEMPLATE FUNCTION transform WITH BINARY OP]]></Line>
      <Line Number="1138"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="1139"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="1140"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="1141"><![CDATA[	class _Fn2> inline]]></Line>
      <Line Number="1142"><![CDATA[	_OutIt _Transform(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="1143"><![CDATA[		_InIt2 _First2, _OutIt _Dest, _Fn2 _Func)]]></Line>
      <Line Number="1144"><![CDATA[	{	// transform [_First1, _Last1) and [_First2, ...) with _Func]]></Line>
      <Line Number="1145"><![CDATA[	for (; _First1 != _Last1; ++_First1, ++_First2, ++_Dest)]]></Line>
      <Line Number="1146"><![CDATA[		*_Dest = _Func(*_First1, *_First2);]]></Line>
      <Line Number="1147"><![CDATA[	return (_Dest);]]></Line>
      <Line Number="1148"><![CDATA[	}]]></Line>
      <Line Number="1149"><![CDATA[]]></Line>
      <Line Number="1150"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 0]]></Line>
      <Line Number="1151"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="1152"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="1153"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="1154"><![CDATA[	class _Fn2> inline]]></Line>
      <Line Number="1155"><![CDATA[	_OutIt transform(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="1156"><![CDATA[		_InIt2 _First2, _OutIt _Dest, _Fn2 _Func)]]></Line>
      <Line Number="1157"><![CDATA[	{	// transform [_First1, _Last1) and [_First2, ...) with _Func]]></Line>
      <Line Number="1158"><![CDATA[	if (_First1 != _Last1)]]></Line>
      <Line Number="1159"><![CDATA[		return (_Transform(_Unchecked(_First1), _Unchecked(_Last1),]]></Line>
      <Line Number="1160"><![CDATA[			_First2, _Dest, _Func));]]></Line>
      <Line Number="1161"><![CDATA[	return (_Dest);]]></Line>
      <Line Number="1162"><![CDATA[	}]]></Line>
      <Line Number="1163"><![CDATA[]]></Line>
      <Line Number="1164"><![CDATA[ #else /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="1165"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="1166"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="1167"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="1168"><![CDATA[	class _Fn2> inline]]></Line>
      <Line Number="1169"><![CDATA[	_OutIt _Transform3(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="1170"><![CDATA[		_InIt2 _First2, _OutIt _Dest, _Fn2 _Func,]]></Line>
      <Line Number="1171"><![CDATA[		input_iterator_tag, output_iterator_tag)]]></Line>
      <Line Number="1172"><![CDATA[	{	// transform [_First1, _Last1) and [_First2, ...), arbitrary dest]]></Line>
      <Line Number="1173"><![CDATA[	return (_Transform(_First1, _Last1,]]></Line>
      <Line Number="1174"><![CDATA[		_First2, _Dest, _Func));]]></Line>
      <Line Number="1175"><![CDATA[	}]]></Line>
      <Line Number="1176"><![CDATA[]]></Line>
      <Line Number="1177"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="1178"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="1179"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="1180"><![CDATA[	class _Fn2> inline]]></Line>
      <Line Number="1181"><![CDATA[	_OutIt _Transform3(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="1182"><![CDATA[		_InIt2 _First2, _OutIt _Dest, _Fn2 _Func,]]></Line>
      <Line Number="1183"><![CDATA[		random_access_iterator_tag, random_access_iterator_tag)]]></Line>
      <Line Number="1184"><![CDATA[	{	// transform [_First1, _Last1) and [_First2, ...), random-access dest]]></Line>
      <Line Number="1185"><![CDATA[	_OutIt _Ans = _Dest + (_Last1 - _First1);	// also checks range]]></Line>
      <Line Number="1186"><![CDATA[	_Transform(_First1, _Last1,]]></Line>
      <Line Number="1187"><![CDATA[		_First2, _Unchecked(_Dest), _Func);]]></Line>
      <Line Number="1188"><![CDATA[	return (_Ans);]]></Line>
      <Line Number="1189"><![CDATA[	}]]></Line>
      <Line Number="1190"><![CDATA[]]></Line>
      <Line Number="1191"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="1192"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="1193"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="1194"><![CDATA[	class _Fn2> inline]]></Line>
      <Line Number="1195"><![CDATA[	_OutIt _Transform2(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="1196"><![CDATA[		_InIt2 _First2, _OutIt _Dest, _Fn2 _Func,]]></Line>
      <Line Number="1197"><![CDATA[		input_iterator_tag, input_iterator_tag)]]></Line>
      <Line Number="1198"><![CDATA[	{	// transform [_First1, _Last1) and [_First2, ...), arbitrary input]]></Line>
      <Line Number="1199"><![CDATA[	return (_Transform3(_First1, _Last1,]]></Line>
      <Line Number="1200"><![CDATA[		_First2, _Dest, _Func,]]></Line>
      <Line Number="1201"><![CDATA[		_Iter_cat(_First1), _Iter_cat(_Dest)));]]></Line>
      <Line Number="1202"><![CDATA[	}]]></Line>
      <Line Number="1203"><![CDATA[]]></Line>
      <Line Number="1204"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="1205"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="1206"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="1207"><![CDATA[	class _Fn2> inline]]></Line>
      <Line Number="1208"><![CDATA[	_OutIt _Transform2(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="1209"><![CDATA[		_InIt2 _First2, _OutIt _Dest, _Fn2 _Func,]]></Line>
      <Line Number="1210"><![CDATA[		random_access_iterator_tag, random_access_iterator_tag)]]></Line>
      <Line Number="1211"><![CDATA[	{	// transform [_First1, _Last1) and [_First2, ...), random-access input]]></Line>
      <Line Number="1212"><![CDATA[	_InIt2 _Last2 = _First2 + (_Last1 - _First1);	// also checks range]]></Line>
      <Line Number="1213"><![CDATA[	_Last2 = _Last2;	// to quiet diagnostics]]></Line>
      <Line Number="1214"><![CDATA[	return (_Transform3(_First1, _Last1,]]></Line>
      <Line Number="1215"><![CDATA[		_Unchecked(_First2), _Dest, _Func,]]></Line>
      <Line Number="1216"><![CDATA[		_Iter_cat(_First1), _Iter_cat(_Dest)));]]></Line>
      <Line Number="1217"><![CDATA[	}]]></Line>
      <Line Number="1218"><![CDATA[]]></Line>
      <Line Number="1219"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="1220"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="1221"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="1222"><![CDATA[	class _Fn2> inline]]></Line>
      <Line Number="1223"><![CDATA[	_OutIt _Transform2(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="1224"><![CDATA[		_InIt2 _First2, _OutIt _Dest, _Fn2 _Func,]]></Line>
      <Line Number="1225"><![CDATA[		_STD tr1::true_type)]]></Line>
      <Line Number="1226"><![CDATA[	{	// transform [_First1, _Last1) and [_First2, ...), checked dest]]></Line>
      <Line Number="1227"><![CDATA[	return (_Transform2(_First1, _Last1,]]></Line>
      <Line Number="1228"><![CDATA[		_First2, _Dest, _Func,]]></Line>
      <Line Number="1229"><![CDATA[		_Iter_cat(_First1), _Iter_cat(_First2)));]]></Line>
      <Line Number="1230"><![CDATA[	}]]></Line>
      <Line Number="1231"><![CDATA[]]></Line>
      <Line Number="1232"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="1233"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="1234"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="1235"><![CDATA[	class _Fn2> inline]]></Line>
      <Line Number="1236"><![CDATA[_SCL_INSECURE_DEPRECATE]]></Line>
      <Line Number="1237"><![CDATA[	_OutIt _Transform2(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="1238"><![CDATA[		_InIt2 _First2, _OutIt _Dest, _Fn2 _Func, _STD tr1::false_type)]]></Line>
      <Line Number="1239"><![CDATA[	{	// transform [_First1, _Last1) and [_First2, ...), unchecked dest]]></Line>
      <Line Number="1240"><![CDATA[	return (_Transform2(_First1, _Last1,]]></Line>
      <Line Number="1241"><![CDATA[		_First2, _Dest, _Func,]]></Line>
      <Line Number="1242"><![CDATA[		_Iter_cat(_First1), _Iter_cat(_First2)));]]></Line>
      <Line Number="1243"><![CDATA[	}]]></Line>
      <Line Number="1244"><![CDATA[]]></Line>
      <Line Number="1245"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="1246"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="1247"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="1248"><![CDATA[	class _Fn2> inline]]></Line>
      <Line Number="1249"><![CDATA[	_OutIt transform(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="1250"><![CDATA[		_InIt2 _First2, _OutIt _Dest, _Fn2 _Func)]]></Line>
      <Line Number="1251"><![CDATA[	{	// transform [_First1, _Last1) and [_First2, ...) with _Func]]></Line>
      <Line Number="1252"><![CDATA[	_DEBUG_RANGE(_First1, _Last1);]]></Line>
      <Line Number="1253"><![CDATA[	_DEBUG_POINTER(_Dest);]]></Line>
      <Line Number="1254"><![CDATA[	_DEBUG_POINTER(_Func);]]></Line>
      <Line Number="1255"><![CDATA[	if (_First1 != _Last1)]]></Line>
      <Line Number="1256"><![CDATA[		return (_Transform2(_Unchecked(_First1), _Unchecked(_Last1),]]></Line>
      <Line Number="1257"><![CDATA[			_First2, _Dest, _Func,]]></Line>
      <Line Number="1258"><![CDATA[			_Is_checked(_Dest)));]]></Line>
      <Line Number="1259"><![CDATA[	return (_Dest);]]></Line>
      <Line Number="1260"><![CDATA[	}]]></Line>
      <Line Number="1261"><![CDATA[]]></Line>
      <Line Number="1262"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="1263"><![CDATA[	class _InTy,]]></Line>
      <Line Number="1264"><![CDATA[	size_t _InSize,]]></Line>
      <Line Number="1265"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="1266"><![CDATA[	class _Fn2> inline]]></Line>
      <Line Number="1267"><![CDATA[	_OutIt transform(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="1268"><![CDATA[		_InTy (&_First2)[_InSize], _OutIt _Dest, _Fn2 _Func)]]></Line>
      <Line Number="1269"><![CDATA[	{	// transform [_First1, _Last1) and [_First2, ...), array input]]></Line>
      <Line Number="1270"><![CDATA[	return (_STD transform(_First1, _Last1,]]></Line>
      <Line Number="1271"><![CDATA[		_Array_iterator<_InTy, _InSize>(_First2), _Dest, _Func));]]></Line>
      <Line Number="1272"><![CDATA[	}]]></Line>
      <Line Number="1273"><![CDATA[]]></Line>
      <Line Number="1274"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="1275"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="1276"><![CDATA[	class _OutTy,]]></Line>
      <Line Number="1277"><![CDATA[	size_t _OutSize,]]></Line>
      <Line Number="1278"><![CDATA[	class _Fn2> inline]]></Line>
      <Line Number="1279"><![CDATA[	_OutTy *transform(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="1280"><![CDATA[		_InIt2 _First2, _OutTy (&_Dest)[_OutSize], _Fn2 _Func)]]></Line>
      <Line Number="1281"><![CDATA[	{	// transform [_First1, _Last1) and [_First2, ...), array dest]]></Line>
      <Line Number="1282"><![CDATA[	return (_Unchecked(]]></Line>
      <Line Number="1283"><![CDATA[		_STD transform(_First1, _Last1,]]></Line>
      <Line Number="1284"><![CDATA[			_First2, _Array_iterator<_OutTy, _OutSize>(_Dest), _Func)));]]></Line>
      <Line Number="1285"><![CDATA[	}]]></Line>
      <Line Number="1286"><![CDATA[]]></Line>
      <Line Number="1287"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="1288"><![CDATA[	class _InTy,]]></Line>
      <Line Number="1289"><![CDATA[	size_t _InSize,]]></Line>
      <Line Number="1290"><![CDATA[	class _OutTy,]]></Line>
      <Line Number="1291"><![CDATA[	size_t _OutSize,]]></Line>
      <Line Number="1292"><![CDATA[	class _Fn2> inline]]></Line>
      <Line Number="1293"><![CDATA[	_OutTy *transform(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="1294"><![CDATA[		_InTy (&_First2)[_InSize], _OutTy (&_Dest)[_OutSize], _Fn2 _Func)]]></Line>
      <Line Number="1295"><![CDATA[	{	// transform [_First1, _Last1) and [_First2, ...), array input/dest]]></Line>
      <Line Number="1296"><![CDATA[	return (_Unchecked(]]></Line>
      <Line Number="1297"><![CDATA[		_STD transform(_First1, _Last1,]]></Line>
      <Line Number="1298"><![CDATA[			_Array_iterator<_InTy, _InSize>(_First2),]]></Line>
      <Line Number="1299"><![CDATA[			_Array_iterator<_OutTy, _OutSize>(_Dest), _Func)));]]></Line>
      <Line Number="1300"><![CDATA[	}]]></Line>
      <Line Number="1301"><![CDATA[]]></Line>
      <Line Number="1302"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="1303"><![CDATA[]]></Line>
      <Line Number="1304"><![CDATA[		// TEMPLATE FUNCTION replace]]></Line>
      <Line Number="1305"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="1306"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="1307"><![CDATA[	void _Replace(_FwdIt _First, _FwdIt _Last,]]></Line>
      <Line Number="1308"><![CDATA[		const _Ty& _Oldval, const _Ty& _Newval)]]></Line>
      <Line Number="1309"><![CDATA[	{	// replace each matching _Oldval with _Newval]]></Line>
      <Line Number="1310"><![CDATA[	for (; _First != _Last; ++_First)]]></Line>
      <Line Number="1311"><![CDATA[		if (*_First == _Oldval)]]></Line>
      <Line Number="1312"><![CDATA[			*_First = _Newval;]]></Line>
      <Line Number="1313"><![CDATA[	}]]></Line>
      <Line Number="1314"><![CDATA[]]></Line>
      <Line Number="1315"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="1316"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="1317"><![CDATA[	void replace(_FwdIt _First, _FwdIt _Last,]]></Line>
      <Line Number="1318"><![CDATA[		const _Ty& _Oldval, const _Ty& _Newval)]]></Line>
      <Line Number="1319"><![CDATA[	{	// replace each matching _Oldval with _Newval]]></Line>
      <Line Number="1320"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="1321"><![CDATA[	_Replace(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="1322"><![CDATA[		_Oldval, _Newval);]]></Line>
      <Line Number="1323"><![CDATA[	}]]></Line>
      <Line Number="1324"><![CDATA[]]></Line>
      <Line Number="1325"><![CDATA[		// TEMPLATE FUNCTION replace_if]]></Line>
      <Line Number="1326"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="1327"><![CDATA[	class _Pr,]]></Line>
      <Line Number="1328"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="1329"><![CDATA[	void _Replace_if(_FwdIt _First, _FwdIt _Last, _Pr _Pred, const _Ty& _Val)]]></Line>
      <Line Number="1330"><![CDATA[	{	// replace each satisfying _Pred with _Val]]></Line>
      <Line Number="1331"><![CDATA[	for (; _First != _Last; ++_First)]]></Line>
      <Line Number="1332"><![CDATA[		if (_Pred(*_First))]]></Line>
      <Line Number="1333"><![CDATA[			*_First = _Val;]]></Line>
      <Line Number="1334"><![CDATA[	}]]></Line>
      <Line Number="1335"><![CDATA[]]></Line>
      <Line Number="1336"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="1337"><![CDATA[	class _Pr,]]></Line>
      <Line Number="1338"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="1339"><![CDATA[	void replace_if(_FwdIt _First, _FwdIt _Last, _Pr _Pred, const _Ty& _Val)]]></Line>
      <Line Number="1340"><![CDATA[	{	// replace each satisfying _Pred with _Val]]></Line>
      <Line Number="1341"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="1342"><![CDATA[	_DEBUG_POINTER(_Pred);]]></Line>
      <Line Number="1343"><![CDATA[	_Replace_if(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="1344"><![CDATA[		_Pred, _Val);]]></Line>
      <Line Number="1345"><![CDATA[	}]]></Line>
      <Line Number="1346"><![CDATA[]]></Line>
      <Line Number="1347"><![CDATA[		// TEMPLATE FUNCTION replace_copy]]></Line>
      <Line Number="1348"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="1349"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="1350"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="1351"><![CDATA[	_OutIt _Replace_copy(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="1352"><![CDATA[		_OutIt _Dest, const _Ty& _Oldval, const _Ty& _Newval)]]></Line>
      <Line Number="1353"><![CDATA[	{	// copy replacing each matching _Oldval with _Newval]]></Line>
      <Line Number="1354"><![CDATA[	for (; _First != _Last; ++_First, ++_Dest)]]></Line>
      <Line Number="1355"><![CDATA[		*_Dest = *_First == _Oldval ? _Newval : *_First;]]></Line>
      <Line Number="1356"><![CDATA[	return (_Dest);]]></Line>
      <Line Number="1357"><![CDATA[	}]]></Line>
      <Line Number="1358"><![CDATA[]]></Line>
      <Line Number="1359"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 0]]></Line>
      <Line Number="1360"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="1361"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="1362"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="1363"><![CDATA[	_OutIt replace_copy(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="1364"><![CDATA[		_OutIt _Dest, const _Ty& _Oldval, const _Ty& _Newval)]]></Line>
      <Line Number="1365"><![CDATA[	{	// copy replacing each matching _Oldval with _Newval]]></Line>
      <Line Number="1366"><![CDATA[	return (_Replace_copy(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="1367"><![CDATA[		_Dest, _Oldval, _Newval));]]></Line>
      <Line Number="1368"><![CDATA[	}]]></Line>
      <Line Number="1369"><![CDATA[]]></Line>
      <Line Number="1370"><![CDATA[ #else /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="1371"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="1372"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="1373"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="1374"><![CDATA[	_OutIt _Replace_copy(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="1375"><![CDATA[		_OutIt _Dest, const _Ty& _Oldval, const _Ty& _Newval,]]></Line>
      <Line Number="1376"><![CDATA[		input_iterator_tag, output_iterator_tag)]]></Line>
      <Line Number="1377"><![CDATA[	{	// copy replacing each matching _Oldval, arbitrary iterators]]></Line>
      <Line Number="1378"><![CDATA[	return (_Replace_copy(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="1379"><![CDATA[		_Dest, _Oldval, _Newval));]]></Line>
      <Line Number="1380"><![CDATA[	}]]></Line>
      <Line Number="1381"><![CDATA[]]></Line>
      <Line Number="1382"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="1383"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="1384"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="1385"><![CDATA[	_OutIt _Replace_copy(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="1386"><![CDATA[		_OutIt _Dest, const _Ty& _Oldval, const _Ty& _Newval,]]></Line>
      <Line Number="1387"><![CDATA[		random_access_iterator_tag, random_access_iterator_tag)]]></Line>
      <Line Number="1388"><![CDATA[	{	// copy replacing each matching _Oldval, random-access iterators]]></Line>
      <Line Number="1389"><![CDATA[	_OutIt _Ans = _Dest + (_Last - _First);	// also checks range]]></Line>
      <Line Number="1390"><![CDATA[	_Replace_copy(_First, _Last,]]></Line>
      <Line Number="1391"><![CDATA[		_Unchecked(_Dest), _Oldval, _Newval);]]></Line>
      <Line Number="1392"><![CDATA[	return (_Ans);]]></Line>
      <Line Number="1393"><![CDATA[	}]]></Line>
      <Line Number="1394"><![CDATA[]]></Line>
      <Line Number="1395"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="1396"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="1397"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="1398"><![CDATA[	_OutIt _Replace_copy(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="1399"><![CDATA[		_OutIt _Dest, const _Ty& _Oldval, const _Ty& _Newval,]]></Line>
      <Line Number="1400"><![CDATA[		_STD tr1::true_type)]]></Line>
      <Line Number="1401"><![CDATA[	{	// copy replacing each matching _Oldval with _Newval, checked dest]]></Line>
      <Line Number="1402"><![CDATA[	return (_Replace_copy(_First, _Last,]]></Line>
      <Line Number="1403"><![CDATA[		_Dest, _Oldval, _Newval,]]></Line>
      <Line Number="1404"><![CDATA[		_Iter_cat(_First), _Iter_cat(_Dest)));]]></Line>
      <Line Number="1405"><![CDATA[	}]]></Line>
      <Line Number="1406"><![CDATA[]]></Line>
      <Line Number="1407"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="1408"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="1409"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="1410"><![CDATA[_SCL_INSECURE_DEPRECATE]]></Line>
      <Line Number="1411"><![CDATA[	_OutIt _Replace_copy(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="1412"><![CDATA[		_OutIt _Dest, const _Ty& _Oldval, const _Ty& _Newval,]]></Line>
      <Line Number="1413"><![CDATA[		_STD tr1::false_type)]]></Line>
      <Line Number="1414"><![CDATA[	{	// copy replacing each matching _Oldval with _Newval, unchecked dest]]></Line>
      <Line Number="1415"><![CDATA[	return (_Replace_copy(_First, _Last,]]></Line>
      <Line Number="1416"><![CDATA[		_Dest, _Oldval, _Newval,]]></Line>
      <Line Number="1417"><![CDATA[		_Iter_cat(_First), _Iter_cat(_Dest)));]]></Line>
      <Line Number="1418"><![CDATA[	}]]></Line>
      <Line Number="1419"><![CDATA[]]></Line>
      <Line Number="1420"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="1421"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="1422"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="1423"><![CDATA[	_OutIt replace_copy(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="1424"><![CDATA[		_OutIt _Dest, const _Ty& _Oldval, const _Ty& _Newval)]]></Line>
      <Line Number="1425"><![CDATA[	{	// copy replacing each matching _Oldval with _Newval]]></Line>
      <Line Number="1426"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="1427"><![CDATA[	_DEBUG_POINTER(_Dest);]]></Line>
      <Line Number="1428"><![CDATA[	return (_Replace_copy(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="1429"><![CDATA[		_Dest, _Oldval, _Newval,]]></Line>
      <Line Number="1430"><![CDATA[		_Is_checked(_Dest)));]]></Line>
      <Line Number="1431"><![CDATA[	}]]></Line>
      <Line Number="1432"><![CDATA[]]></Line>
      <Line Number="1433"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="1434"><![CDATA[	class _OutTy,]]></Line>
      <Line Number="1435"><![CDATA[	size_t _OutSize,]]></Line>
      <Line Number="1436"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="1437"><![CDATA[	_OutTy *replace_copy(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="1438"><![CDATA[		_OutTy (&_Dest)[_OutSize], const _Ty& _Oldval, const _Ty& _Newval)]]></Line>
      <Line Number="1439"><![CDATA[	{	// copy replacing each matching _Oldval with _Newval, array dest]]></Line>
      <Line Number="1440"><![CDATA[	return (_Unchecked(]]></Line>
      <Line Number="1441"><![CDATA[		_STD replace_copy(_First, _Last,]]></Line>
      <Line Number="1442"><![CDATA[			_Array_iterator<_OutTy, _OutSize>(_Dest), _Oldval, _Newval)));]]></Line>
      <Line Number="1443"><![CDATA[	}]]></Line>
      <Line Number="1444"><![CDATA[]]></Line>
      <Line Number="1445"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="1446"><![CDATA[]]></Line>
      <Line Number="1447"><![CDATA[		// TEMPLATE FUNCTION replace_copy_if]]></Line>
      <Line Number="1448"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="1449"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="1450"><![CDATA[	class _Pr,]]></Line>
      <Line Number="1451"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="1452"><![CDATA[	_OutIt _Replace_copy_if(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="1453"><![CDATA[		_OutIt _Dest, _Pr _Pred, const _Ty& _Val)]]></Line>
      <Line Number="1454"><![CDATA[	{	// copy replacing each satisfying _Pred with _Val]]></Line>
      <Line Number="1455"><![CDATA[	for (; _First != _Last; ++_First, ++_Dest)]]></Line>
      <Line Number="1456"><![CDATA[		*_Dest = _Pred(*_First) ? _Val : *_First;]]></Line>
      <Line Number="1457"><![CDATA[	return (_Dest);]]></Line>
      <Line Number="1458"><![CDATA[	}]]></Line>
      <Line Number="1459"><![CDATA[]]></Line>
      <Line Number="1460"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 0]]></Line>
      <Line Number="1461"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="1462"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="1463"><![CDATA[	class _Pr,]]></Line>
      <Line Number="1464"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="1465"><![CDATA[	_OutIt replace_copy_if(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="1466"><![CDATA[		_OutIt _Dest, _Pr _Pred, const _Ty& _Val)]]></Line>
      <Line Number="1467"><![CDATA[	{	// copy replacing each satisfying _Pred with _Val]]></Line>
      <Line Number="1468"><![CDATA[	return (_Replace_copy_if(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="1469"><![CDATA[		_Dest, _Pred, _Val));]]></Line>
      <Line Number="1470"><![CDATA[	}]]></Line>
      <Line Number="1471"><![CDATA[]]></Line>
      <Line Number="1472"><![CDATA[ #else /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="1473"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="1474"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="1475"><![CDATA[	class _Pr,]]></Line>
      <Line Number="1476"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="1477"><![CDATA[	_OutIt _Replace_copy_if(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="1478"><![CDATA[		_OutIt _Dest, _Pr _Pred, const _Ty& _Val,]]></Line>
      <Line Number="1479"><![CDATA[		input_iterator_tag, output_iterator_tag)]]></Line>
      <Line Number="1480"><![CDATA[	{	// copy replacing each satisfying _Pred, arbitrary iterators]]></Line>
      <Line Number="1481"><![CDATA[	return (_Replace_copy_if(_First, _Last,]]></Line>
      <Line Number="1482"><![CDATA[		_Dest, _Pred, _Val));]]></Line>
      <Line Number="1483"><![CDATA[	}]]></Line>
      <Line Number="1484"><![CDATA[]]></Line>
      <Line Number="1485"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="1486"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="1487"><![CDATA[	class _Pr,]]></Line>
      <Line Number="1488"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="1489"><![CDATA[	_OutIt _Replace_copy_if(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="1490"><![CDATA[		_OutIt _Dest, _Pr _Pred, const _Ty& _Val,]]></Line>
      <Line Number="1491"><![CDATA[		random_access_iterator_tag, random_access_iterator_tag)]]></Line>
      <Line Number="1492"><![CDATA[	{	// copy replacing each satisfying _Pred, random_access iterators]]></Line>
      <Line Number="1493"><![CDATA[	_OutIt _Ans = _Dest + (_Last - _First);	// also checks range]]></Line>
      <Line Number="1494"><![CDATA[	_Replace_copy_if(_First, _Last,]]></Line>
      <Line Number="1495"><![CDATA[		_Unchecked(_Dest), _Pred, _Val);]]></Line>
      <Line Number="1496"><![CDATA[	return (_Ans);]]></Line>
      <Line Number="1497"><![CDATA[	}]]></Line>
      <Line Number="1498"><![CDATA[]]></Line>
      <Line Number="1499"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="1500"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="1501"><![CDATA[	class _Pr,]]></Line>
      <Line Number="1502"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="1503"><![CDATA[	_OutIt _Replace_copy_if(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="1504"><![CDATA[		_OutIt _Dest, _Pr _Pred, const _Ty& _Val,]]></Line>
      <Line Number="1505"><![CDATA[		_STD tr1::true_type)]]></Line>
      <Line Number="1506"><![CDATA[	{	// copy replacing each satisfying _Pred with _Val, checked dest]]></Line>
      <Line Number="1507"><![CDATA[	return (_Replace_copy_if(_First, _Last,]]></Line>
      <Line Number="1508"><![CDATA[		_Dest, _Pred, _Val,]]></Line>
      <Line Number="1509"><![CDATA[		_Iter_cat(_First), _Iter_cat(_Dest)));]]></Line>
      <Line Number="1510"><![CDATA[	}]]></Line>
      <Line Number="1511"><![CDATA[]]></Line>
      <Line Number="1512"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="1513"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="1514"><![CDATA[	class _Pr,]]></Line>
      <Line Number="1515"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="1516"><![CDATA[_SCL_INSECURE_DEPRECATE]]></Line>
      <Line Number="1517"><![CDATA[	_OutIt _Replace_copy_if(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="1518"><![CDATA[		_OutIt _Dest, _Pr _Pred, const _Ty& _Val,]]></Line>
      <Line Number="1519"><![CDATA[		_STD tr1::false_type)]]></Line>
      <Line Number="1520"><![CDATA[	{	// copy replacing each satisfying _Pred with _Val, unchecked dest]]></Line>
      <Line Number="1521"><![CDATA[	return (_Replace_copy_if(_First, _Last,]]></Line>
      <Line Number="1522"><![CDATA[		_Dest, _Pred, _Val,]]></Line>
      <Line Number="1523"><![CDATA[		_Iter_cat(_First), _Iter_cat(_Dest)));]]></Line>
      <Line Number="1524"><![CDATA[	}]]></Line>
      <Line Number="1525"><![CDATA[]]></Line>
      <Line Number="1526"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="1527"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="1528"><![CDATA[	class _Pr,]]></Line>
      <Line Number="1529"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="1530"><![CDATA[	_OutIt replace_copy_if(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="1531"><![CDATA[		_OutIt _Dest, _Pr _Pred, const _Ty& _Val)]]></Line>
      <Line Number="1532"><![CDATA[	{	// copy replacing each satisfying _Pred with _Val]]></Line>
      <Line Number="1533"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="1534"><![CDATA[	_DEBUG_POINTER(_Dest);]]></Line>
      <Line Number="1535"><![CDATA[	_DEBUG_POINTER(_Pred);]]></Line>
      <Line Number="1536"><![CDATA[	return (_Replace_copy_if(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="1537"><![CDATA[		_Dest, _Pred, _Val,]]></Line>
      <Line Number="1538"><![CDATA[		_Is_checked(_Dest)));]]></Line>
      <Line Number="1539"><![CDATA[	}]]></Line>
      <Line Number="1540"><![CDATA[]]></Line>
      <Line Number="1541"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="1542"><![CDATA[	class _OutTy,]]></Line>
      <Line Number="1543"><![CDATA[	size_t _OutSize,]]></Line>
      <Line Number="1544"><![CDATA[	class _Pr,]]></Line>
      <Line Number="1545"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="1546"><![CDATA[	_OutTy *replace_copy_if(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="1547"><![CDATA[		_OutTy (&_Dest)[_OutSize], _Pr _Pred, const _Ty& _Val)]]></Line>
      <Line Number="1548"><![CDATA[	{	// copy replacing each satisfying _Pred with _Val, array dest]]></Line>
      <Line Number="1549"><![CDATA[	return (_Unchecked(]]></Line>
      <Line Number="1550"><![CDATA[		_STD replace_copy_if(_First, _Last,]]></Line>
      <Line Number="1551"><![CDATA[			_Array_iterator<_OutTy, _OutSize>(_Dest), _Pred, _Val)));]]></Line>
      <Line Number="1552"><![CDATA[	}]]></Line>
      <Line Number="1553"><![CDATA[]]></Line>
      <Line Number="1554"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="1555"><![CDATA[]]></Line>
      <Line Number="1556"><![CDATA[		// TEMPLATE FUNCTION generate]]></Line>
      <Line Number="1557"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="1558"><![CDATA[	class _Fn0> inline]]></Line>
      <Line Number="1559"><![CDATA[	void _Generate(_FwdIt _First, _FwdIt _Last, _Fn0 _Func)]]></Line>
      <Line Number="1560"><![CDATA[	{	// replace [_First, _Last) with _Func()]]></Line>
      <Line Number="1561"><![CDATA[	for (; _First != _Last; ++_First)]]></Line>
      <Line Number="1562"><![CDATA[		*_First = _Func();]]></Line>
      <Line Number="1563"><![CDATA[	}]]></Line>
      <Line Number="1564"><![CDATA[]]></Line>
      <Line Number="1565"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="1566"><![CDATA[	class _Fn0> inline]]></Line>
      <Line Number="1567"><![CDATA[	void generate(_FwdIt _First, _FwdIt _Last, _Fn0 _Func)]]></Line>
      <Line Number="1568"><![CDATA[	{	// replace [_First, _Last) with _Func()]]></Line>
      <Line Number="1569"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="1570"><![CDATA[	_DEBUG_POINTER(_Func);]]></Line>
      <Line Number="1571"><![CDATA[	_Generate(_Unchecked(_First), _Unchecked(_Last), _Func);]]></Line>
      <Line Number="1572"><![CDATA[	}]]></Line>
      <Line Number="1573"><![CDATA[]]></Line>
      <Line Number="1574"><![CDATA[		// TEMPLATE FUNCTION generate_n]]></Line>
      <Line Number="1575"><![CDATA[template<class _OutIt,]]></Line>
      <Line Number="1576"><![CDATA[	class _Diff,]]></Line>
      <Line Number="1577"><![CDATA[	class _Fn0> inline]]></Line>
      <Line Number="1578"><![CDATA[	void _Generate_n(_OutIt _Dest, _Diff _Count, _Fn0 _Func)]]></Line>
      <Line Number="1579"><![CDATA[	{	// replace [_Dest, _Dest + _Count) with _Func()]]></Line>
      <Line Number="1580"><![CDATA[	for (; 0 < _Count; --_Count, ++_Dest)]]></Line>
      <Line Number="1581"><![CDATA[		*_Dest = _Func();]]></Line>
      <Line Number="1582"><![CDATA[	}]]></Line>
      <Line Number="1583"><![CDATA[]]></Line>
      <Line Number="1584"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 0]]></Line>
      <Line Number="1585"><![CDATA[template<class _OutIt,]]></Line>
      <Line Number="1586"><![CDATA[	class _Diff,]]></Line>
      <Line Number="1587"><![CDATA[	class _Fn0> inline]]></Line>
      <Line Number="1588"><![CDATA[	void generate_n(_OutIt _Dest, _Diff _Count, _Fn0 _Func)]]></Line>
      <Line Number="1589"><![CDATA[	{	// replace [_Dest, _Dest + _Count) with _Func()]]></Line>
      <Line Number="1590"><![CDATA[	_Generate_n(_Dest, _Count, _Func);]]></Line>
      <Line Number="1591"><![CDATA[	}]]></Line>
      <Line Number="1592"><![CDATA[]]></Line>
      <Line Number="1593"><![CDATA[ #else /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="1594"><![CDATA[template<class _OutIt,]]></Line>
      <Line Number="1595"><![CDATA[	class _Diff,]]></Line>
      <Line Number="1596"><![CDATA[	class _Fn0> inline]]></Line>
      <Line Number="1597"><![CDATA[	void _Generate_n1(_OutIt _Dest, _Diff _Count, _Fn0 _Func,]]></Line>
      <Line Number="1598"><![CDATA[		output_iterator_tag)]]></Line>
      <Line Number="1599"><![CDATA[	{	// replace [_Dest, _Dest + _Count), arbitrary iterators]]></Line>
      <Line Number="1600"><![CDATA[	_Generate_n(_Dest, _Count, _Func);]]></Line>
      <Line Number="1601"><![CDATA[	}]]></Line>
      <Line Number="1602"><![CDATA[]]></Line>
      <Line Number="1603"><![CDATA[template<class _OutIt,]]></Line>
      <Line Number="1604"><![CDATA[	class _Diff,]]></Line>
      <Line Number="1605"><![CDATA[	class _Fn0> inline]]></Line>
      <Line Number="1606"><![CDATA[	void _Generate_n1(_OutIt _Dest, _Diff _Count, _Fn0 _Func,]]></Line>
      <Line Number="1607"><![CDATA[		random_access_iterator_tag)]]></Line>
      <Line Number="1608"><![CDATA[	{	// replace [_Dest, _Dest + _Count), random-access iterators]]></Line>
      <Line Number="1609"><![CDATA[	_OutIt _Ans = _Dest + _Count;	// also checks range]]></Line>
      <Line Number="1610"><![CDATA[	_Ans = _Ans;	// to quiet diagnostics]]></Line>
      <Line Number="1611"><![CDATA[	_Generate_n(_Unchecked(_Dest), _Count, _Func);]]></Line>
      <Line Number="1612"><![CDATA[	}]]></Line>
      <Line Number="1613"><![CDATA[]]></Line>
      <Line Number="1614"><![CDATA[template<class _OutIt,]]></Line>
      <Line Number="1615"><![CDATA[	class _Diff,]]></Line>
      <Line Number="1616"><![CDATA[	class _Fn0> inline]]></Line>
      <Line Number="1617"><![CDATA[	void _Generate_n(_OutIt _Dest, _Diff _Count, _Fn0 _Func,]]></Line>
      <Line Number="1618"><![CDATA[		_STD tr1::true_type)]]></Line>
      <Line Number="1619"><![CDATA[	{	// replace [_Dest, _Dest + _Count) with _Func(), checked dest]]></Line>
      <Line Number="1620"><![CDATA[	_Generate_n1(_Dest, _Count, _Func,]]></Line>
      <Line Number="1621"><![CDATA[		_Iter_cat(_Dest));]]></Line>
      <Line Number="1622"><![CDATA[	}]]></Line>
      <Line Number="1623"><![CDATA[]]></Line>
      <Line Number="1624"><![CDATA[template<class _OutIt,]]></Line>
      <Line Number="1625"><![CDATA[	class _Diff,]]></Line>
      <Line Number="1626"><![CDATA[	class _Fn0> inline]]></Line>
      <Line Number="1627"><![CDATA[_SCL_INSECURE_DEPRECATE]]></Line>
      <Line Number="1628"><![CDATA[	void _Generate_n(_OutIt _Dest, _Diff _Count, _Fn0 _Func,]]></Line>
      <Line Number="1629"><![CDATA[		_STD tr1::false_type)]]></Line>
      <Line Number="1630"><![CDATA[	{	// replace [_Dest, _Dest + _Count) with _Func(), unchecked dest]]></Line>
      <Line Number="1631"><![CDATA[	_Generate_n1(_Dest, _Count, _Func,]]></Line>
      <Line Number="1632"><![CDATA[		_Iter_cat(_Dest));]]></Line>
      <Line Number="1633"><![CDATA[	}]]></Line>
      <Line Number="1634"><![CDATA[]]></Line>
      <Line Number="1635"><![CDATA[template<class _OutIt,]]></Line>
      <Line Number="1636"><![CDATA[	class _Diff,]]></Line>
      <Line Number="1637"><![CDATA[	class _Fn0> inline]]></Line>
      <Line Number="1638"><![CDATA[	void generate_n(_OutIt _Dest, _Diff _Count, _Fn0 _Func)]]></Line>
      <Line Number="1639"><![CDATA[	{	// replace [_Dest, _Dest + _Count) with _Func()]]></Line>
      <Line Number="1640"><![CDATA[	_DEBUG_POINTER(_Dest);]]></Line>
      <Line Number="1641"><![CDATA[	_DEBUG_POINTER(_Func);]]></Line>
      <Line Number="1642"><![CDATA[	_Generate_n(_Dest, _Count, _Func,]]></Line>
      <Line Number="1643"><![CDATA[		_Is_checked(_Dest));]]></Line>
      <Line Number="1644"><![CDATA[	}]]></Line>
      <Line Number="1645"><![CDATA[]]></Line>
      <Line Number="1646"><![CDATA[template<class _OutTy,]]></Line>
      <Line Number="1647"><![CDATA[	size_t _OutSize,]]></Line>
      <Line Number="1648"><![CDATA[	class _Diff,]]></Line>
      <Line Number="1649"><![CDATA[	class _Fn0> inline]]></Line>
      <Line Number="1650"><![CDATA[	void generate_n(_OutTy (&_Dest)[_OutSize], _Diff _Count, _Fn0 _Func)]]></Line>
      <Line Number="1651"><![CDATA[	{	// replace [_Dest, _Dest + _Count) with _Func(), array dest]]></Line>
      <Line Number="1652"><![CDATA[	_STD generate_n(_Array_iterator<_OutTy, _OutSize>(_Dest), _Count, _Func);]]></Line>
      <Line Number="1653"><![CDATA[	}]]></Line>
      <Line Number="1654"><![CDATA[]]></Line>
      <Line Number="1655"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="1656"><![CDATA[]]></Line>
      <Line Number="1657"><![CDATA[		// TEMPLATE FUNCTION remove_copy]]></Line>
      <Line Number="1658"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="1659"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="1660"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="1661"><![CDATA[	_OutIt _Remove_copy(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="1662"><![CDATA[		_OutIt _Dest, const _Ty& _Val)]]></Line>
      <Line Number="1663"><![CDATA[	{	// copy omitting each matching _Val]]></Line>
      <Line Number="1664"><![CDATA[	for (; _First != _Last; ++_First)]]></Line>
      <Line Number="1665"><![CDATA[		if (!(*_First == _Val))]]></Line>
      <Line Number="1666"><![CDATA[			*_Dest++ = *_First;]]></Line>
      <Line Number="1667"><![CDATA[	return (_Dest);]]></Line>
      <Line Number="1668"><![CDATA[	}]]></Line>
      <Line Number="1669"><![CDATA[]]></Line>
      <Line Number="1670"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 0]]></Line>
      <Line Number="1671"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="1672"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="1673"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="1674"><![CDATA[	_OutIt remove_copy(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="1675"><![CDATA[		_OutIt _Dest, const _Ty& _Val)]]></Line>
      <Line Number="1676"><![CDATA[	{	// copy omitting each matching _Val]]></Line>
      <Line Number="1677"><![CDATA[	return (_Remove_copy(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="1678"><![CDATA[		_Dest, _Val));]]></Line>
      <Line Number="1679"><![CDATA[	}]]></Line>
      <Line Number="1680"><![CDATA[]]></Line>
      <Line Number="1681"><![CDATA[ #else /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="1682"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="1683"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="1684"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="1685"><![CDATA[	_OutIt _Remove_copy(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="1686"><![CDATA[		_OutIt _Dest, const _Ty& _Val,]]></Line>
      <Line Number="1687"><![CDATA[		_STD tr1::true_type)]]></Line>
      <Line Number="1688"><![CDATA[	{	// copy omitting each matching _Val, checked dest]]></Line>
      <Line Number="1689"><![CDATA[	return (_Remove_copy(_First, _Last,]]></Line>
      <Line Number="1690"><![CDATA[		_Dest, _Val));]]></Line>
      <Line Number="1691"><![CDATA[	}]]></Line>
      <Line Number="1692"><![CDATA[]]></Line>
      <Line Number="1693"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="1694"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="1695"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="1696"><![CDATA[_SCL_INSECURE_DEPRECATE]]></Line>
      <Line Number="1697"><![CDATA[	_OutIt _Remove_copy(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="1698"><![CDATA[		_OutIt _Dest, const _Ty& _Val,]]></Line>
      <Line Number="1699"><![CDATA[		_STD tr1::false_type)]]></Line>
      <Line Number="1700"><![CDATA[	{	// copy omitting each matching _Val, unchecked dest]]></Line>
      <Line Number="1701"><![CDATA[	return (_Remove_copy(_First, _Last,]]></Line>
      <Line Number="1702"><![CDATA[		_Dest, _Val));]]></Line>
      <Line Number="1703"><![CDATA[	}]]></Line>
      <Line Number="1704"><![CDATA[]]></Line>
      <Line Number="1705"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="1706"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="1707"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="1708"><![CDATA[	_OutIt remove_copy(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="1709"><![CDATA[		_OutIt _Dest, const _Ty& _Val)]]></Line>
      <Line Number="1710"><![CDATA[	{	// copy omitting each matching _Val]]></Line>
      <Line Number="1711"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="1712"><![CDATA[	_DEBUG_POINTER(_Dest);]]></Line>
      <Line Number="1713"><![CDATA[	return (_Remove_copy(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="1714"><![CDATA[		_Dest, _Val,]]></Line>
      <Line Number="1715"><![CDATA[		_Is_checked(_Dest)));]]></Line>
      <Line Number="1716"><![CDATA[	}]]></Line>
      <Line Number="1717"><![CDATA[]]></Line>
      <Line Number="1718"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="1719"><![CDATA[	class _OutTy,]]></Line>
      <Line Number="1720"><![CDATA[	size_t _OutSize,]]></Line>
      <Line Number="1721"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="1722"><![CDATA[	_OutTy *remove_copy(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="1723"><![CDATA[		_OutTy (&_Dest)[_OutSize], const _Ty& _Val)]]></Line>
      <Line Number="1724"><![CDATA[	{	// copy omitting each matching _Val, array dest]]></Line>
      <Line Number="1725"><![CDATA[	return (_Unchecked(]]></Line>
      <Line Number="1726"><![CDATA[		_STD remove_copy(_First, _Last,]]></Line>
      <Line Number="1727"><![CDATA[			_Array_iterator<_OutTy, _OutSize>(_Dest), _Val)));]]></Line>
      <Line Number="1728"><![CDATA[	}]]></Line>
      <Line Number="1729"><![CDATA[]]></Line>
      <Line Number="1730"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="1731"><![CDATA[]]></Line>
      <Line Number="1732"><![CDATA[		// TEMPLATE FUNCTION remove_copy_if]]></Line>
      <Line Number="1733"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="1734"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="1735"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="1736"><![CDATA[	_OutIt _Remove_copy_if(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="1737"><![CDATA[		_OutIt _Dest, _Pr _Pred)]]></Line>
      <Line Number="1738"><![CDATA[	{	// copy omitting each element satisfying _Pred]]></Line>
      <Line Number="1739"><![CDATA[	for (; _First != _Last; ++_First)]]></Line>
      <Line Number="1740"><![CDATA[		if (!_Pred(*_First))]]></Line>
      <Line Number="1741"><![CDATA[			*_Dest++ = *_First;]]></Line>
      <Line Number="1742"><![CDATA[	return (_Dest);]]></Line>
      <Line Number="1743"><![CDATA[	}]]></Line>
      <Line Number="1744"><![CDATA[]]></Line>
      <Line Number="1745"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 0]]></Line>
      <Line Number="1746"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="1747"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="1748"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="1749"><![CDATA[	_OutIt remove_copy_if(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="1750"><![CDATA[		_OutIt _Dest, _Pr _Pred)]]></Line>
      <Line Number="1751"><![CDATA[	{	// copy omitting each element satisfying _Pred]]></Line>
      <Line Number="1752"><![CDATA[	return (_Remove_copy_if(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="1753"><![CDATA[		_Dest, _Pred));]]></Line>
      <Line Number="1754"><![CDATA[	}]]></Line>
      <Line Number="1755"><![CDATA[]]></Line>
      <Line Number="1756"><![CDATA[ #else /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="1757"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="1758"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="1759"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="1760"><![CDATA[	_OutIt _Remove_copy_if(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="1761"><![CDATA[		_OutIt _Dest, _Pr _Pred,]]></Line>
      <Line Number="1762"><![CDATA[		_STD tr1::true_type)]]></Line>
      <Line Number="1763"><![CDATA[	{	// copy omitting each element satisfying _Pred, checked dest]]></Line>
      <Line Number="1764"><![CDATA[	return (_Remove_copy_if(_First, _Last,]]></Line>
      <Line Number="1765"><![CDATA[		_Dest, _Pred));]]></Line>
      <Line Number="1766"><![CDATA[	}]]></Line>
      <Line Number="1767"><![CDATA[]]></Line>
      <Line Number="1768"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="1769"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="1770"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="1771"><![CDATA[_SCL_INSECURE_DEPRECATE]]></Line>
      <Line Number="1772"><![CDATA[	_OutIt _Remove_copy_if(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="1773"><![CDATA[		_OutIt _Dest, _Pr _Pred,]]></Line>
      <Line Number="1774"><![CDATA[		_STD tr1::false_type)]]></Line>
      <Line Number="1775"><![CDATA[	{	// copy omitting each element satisfying _Pred, unchecked dest]]></Line>
      <Line Number="1776"><![CDATA[	return (_Remove_copy_if(_First, _Last,]]></Line>
      <Line Number="1777"><![CDATA[		_Dest, _Pred));]]></Line>
      <Line Number="1778"><![CDATA[	}]]></Line>
      <Line Number="1779"><![CDATA[]]></Line>
      <Line Number="1780"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="1781"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="1782"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="1783"><![CDATA[	_OutIt remove_copy_if(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="1784"><![CDATA[		_OutIt _Dest, _Pr _Pred)]]></Line>
      <Line Number="1785"><![CDATA[	{	// copy omitting each element satisfying _Pred]]></Line>
      <Line Number="1786"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="1787"><![CDATA[	_DEBUG_POINTER(_Dest);]]></Line>
      <Line Number="1788"><![CDATA[	_DEBUG_POINTER(_Pred);]]></Line>
      <Line Number="1789"><![CDATA[	return (_Remove_copy_if(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="1790"><![CDATA[		_Dest, _Pred,]]></Line>
      <Line Number="1791"><![CDATA[		_Is_checked(_Dest)));]]></Line>
      <Line Number="1792"><![CDATA[	}]]></Line>
      <Line Number="1793"><![CDATA[]]></Line>
      <Line Number="1794"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="1795"><![CDATA[	class _OutTy,]]></Line>
      <Line Number="1796"><![CDATA[	size_t _OutSize,]]></Line>
      <Line Number="1797"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="1798"><![CDATA[	_OutTy *remove_copy_if(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="1799"><![CDATA[		_OutTy (&_Dest)[_OutSize], _Pr _Pred)]]></Line>
      <Line Number="1800"><![CDATA[	{	// copy omitting each element satisfying _Pred, array dest]]></Line>
      <Line Number="1801"><![CDATA[	return (_Unchecked(]]></Line>
      <Line Number="1802"><![CDATA[		_STD remove_copy_if(_First, _Last,]]></Line>
      <Line Number="1803"><![CDATA[			_Array_iterator<_OutTy, _OutSize>(_Dest), _Pred)));]]></Line>
      <Line Number="1804"><![CDATA[	}]]></Line>
      <Line Number="1805"><![CDATA[]]></Line>
      <Line Number="1806"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="1807"><![CDATA[]]></Line>
      <Line Number="1808"><![CDATA[		// TEMPLATE FUNCTION remove]]></Line>
      <Line Number="1809"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="1810"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="1811"><![CDATA[	_FwdIt _Remove(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)]]></Line>
      <Line Number="1812"><![CDATA[	{	// remove each matching _Val]]></Line>
      <Line Number="1813"><![CDATA[	_FwdIt _Next = _First;]]></Line>
      <Line Number="1814"><![CDATA[	for (++_First; _First != _Last; ++_First)]]></Line>
      <Line Number="1815"><![CDATA[		if (!(*_First == _Val))]]></Line>
      <Line Number="1816"><![CDATA[			*_Next++ = _Move(*_First);]]></Line>
      <Line Number="1817"><![CDATA[	return (_Next);]]></Line>
      <Line Number="1818"><![CDATA[	}]]></Line>
      <Line Number="1819"><![CDATA[]]></Line>
      <Line Number="1820"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="1821"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="1822"><![CDATA[	_FwdIt remove(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)]]></Line>
      <Line Number="1823"><![CDATA[	{	// remove each matching _Val]]></Line>
      <Line Number="1824"><![CDATA[	_First = _STD find(_First, _Last, _Val);]]></Line>
      <Line Number="1825"><![CDATA[	if (_First == _Last)]]></Line>
      <Line Number="1826"><![CDATA[		return (_First);	// empty sequence, all done]]></Line>
      <Line Number="1827"><![CDATA[	else]]></Line>
      <Line Number="1828"><![CDATA[		return (_Rechecked(_First,]]></Line>
      <Line Number="1829"><![CDATA[			_Remove(_Unchecked(_First), _Unchecked(_Last), _Val)));]]></Line>
      <Line Number="1830"><![CDATA[	}]]></Line>
      <Line Number="1831"><![CDATA[]]></Line>
      <Line Number="1832"><![CDATA[		// TEMPLATE FUNCTION remove_if]]></Line>
      <Line Number="1833"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="1834"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="1835"><![CDATA[	_FwdIt _Remove_if(_FwdIt _First, _FwdIt _Last, _Pr _Pred)]]></Line>
      <Line Number="1836"><![CDATA[	{	// remove each satisfying _Pred]]></Line>
      <Line Number="1837"><![CDATA[	_FwdIt _Next = _First;]]></Line>
      <Line Number="1838"><![CDATA[	for (++_First; _First != _Last; ++_First)]]></Line>
      <Line Number="1839"><![CDATA[	if (!_Pred(*_First))]]></Line>
      <Line Number="1840"><![CDATA[		*_Next++ = _Move(*_First);]]></Line>
      <Line Number="1841"><![CDATA[	return (_Next);]]></Line>
      <Line Number="1842"><![CDATA[	}]]></Line>
      <Line Number="1843"><![CDATA[]]></Line>
      <Line Number="1844"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="1845"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="1846"><![CDATA[	_FwdIt remove_if(_FwdIt _First, _FwdIt _Last, _Pr _Pred)]]></Line>
      <Line Number="1847"><![CDATA[	{	// remove each satisfying _Pred]]></Line>
      <Line Number="1848"><![CDATA[	_First = _STD find_if(_First, _Last, _Pred);]]></Line>
      <Line Number="1849"><![CDATA[	if (_First == _Last)]]></Line>
      <Line Number="1850"><![CDATA[		return (_First);	// empty sequence, all done]]></Line>
      <Line Number="1851"><![CDATA[	else]]></Line>
      <Line Number="1852"><![CDATA[		return (_Rechecked(_First,]]></Line>
      <Line Number="1853"><![CDATA[			_Remove_if(_Unchecked(_First), _Unchecked(_Last), _Pred)));]]></Line>
      <Line Number="1854"><![CDATA[	}]]></Line>
      <Line Number="1855"><![CDATA[]]></Line>
      <Line Number="1856"><![CDATA[		// TEMPLATE FUNCTION unique]]></Line>
      <Line Number="1857"><![CDATA[template<class _FwdIt> inline]]></Line>
      <Line Number="1858"><![CDATA[	_FwdIt _Unique(_FwdIt _First, _FwdIt _Last)]]></Line>
      <Line Number="1859"><![CDATA[	{	// remove each matching previous]]></Line>
      <Line Number="1860"><![CDATA[	if (_First != _Last)]]></Line>
      <Line Number="1861"><![CDATA[		for (_FwdIt _Firstb; (_Firstb = _First), ++_First != _Last; )]]></Line>
      <Line Number="1862"><![CDATA[			if (*_Firstb == *_First)]]></Line>
      <Line Number="1863"><![CDATA[				{	// copy down]]></Line>
      <Line Number="1864"><![CDATA[				for (; ++_First != _Last; )]]></Line>
      <Line Number="1865"><![CDATA[					if (!(*_Firstb == *_First))]]></Line>
      <Line Number="1866"><![CDATA[						*++_Firstb = _Move(*_First);]]></Line>
      <Line Number="1867"><![CDATA[				return (++_Firstb);]]></Line>
      <Line Number="1868"><![CDATA[				}]]></Line>
      <Line Number="1869"><![CDATA[	return (_Last);]]></Line>
      <Line Number="1870"><![CDATA[	}]]></Line>
      <Line Number="1871"><![CDATA[]]></Line>
      <Line Number="1872"><![CDATA[template<class _FwdIt> inline]]></Line>
      <Line Number="1873"><![CDATA[	_FwdIt unique(_FwdIt _First, _FwdIt _Last)]]></Line>
      <Line Number="1874"><![CDATA[	{	// remove each matching previous]]></Line>
      <Line Number="1875"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="1876"><![CDATA[	return (_Rechecked(_First,]]></Line>
      <Line Number="1877"><![CDATA[		_Unique(_Unchecked(_First), _Unchecked(_Last))));]]></Line>
      <Line Number="1878"><![CDATA[	}]]></Line>
      <Line Number="1879"><![CDATA[]]></Line>
      <Line Number="1880"><![CDATA[		// TEMPLATE FUNCTION unique WITH PRED]]></Line>
      <Line Number="1881"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="1882"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="1883"><![CDATA[	_FwdIt _Unique(_FwdIt _First, _FwdIt _Last, _Pr _Pred)]]></Line>
      <Line Number="1884"><![CDATA[	{	// remove each satisfying _Pred with previous]]></Line>
      <Line Number="1885"><![CDATA[	if (_First != _Last)]]></Line>
      <Line Number="1886"><![CDATA[		for (_FwdIt _Firstb; (_Firstb = _First), ++_First != _Last; )]]></Line>
      <Line Number="1887"><![CDATA[			if (_Pred(*_Firstb, *_First))]]></Line>
      <Line Number="1888"><![CDATA[				{	// copy down]]></Line>
      <Line Number="1889"><![CDATA[				for (; ++_First != _Last; )]]></Line>
      <Line Number="1890"><![CDATA[					if (!_Pred(*_Firstb, *_First))]]></Line>
      <Line Number="1891"><![CDATA[						*++_Firstb = _Move(*_First);]]></Line>
      <Line Number="1892"><![CDATA[				return (++_Firstb);]]></Line>
      <Line Number="1893"><![CDATA[				}]]></Line>
      <Line Number="1894"><![CDATA[	return (_Last);]]></Line>
      <Line Number="1895"><![CDATA[	}]]></Line>
      <Line Number="1896"><![CDATA[]]></Line>
      <Line Number="1897"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="1898"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="1899"><![CDATA[	_FwdIt unique(_FwdIt _First, _FwdIt _Last, _Pr _Pred)]]></Line>
      <Line Number="1900"><![CDATA[	{	// remove each satisfying _Pred with previous]]></Line>
      <Line Number="1901"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="1902"><![CDATA[	_DEBUG_POINTER(_Pred);]]></Line>
      <Line Number="1903"><![CDATA[	return (_Rechecked(_First,]]></Line>
      <Line Number="1904"><![CDATA[		_Unique(_Unchecked(_First), _Unchecked(_Last), _Pred)));]]></Line>
      <Line Number="1905"><![CDATA[	}]]></Line>
      <Line Number="1906"><![CDATA[]]></Line>
      <Line Number="1907"><![CDATA[		// TEMPLATE FUNCTION unique_copy]]></Line>
      <Line Number="1908"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="1909"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="1910"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="1911"><![CDATA[	_OutIt _Unique_copy(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="1912"><![CDATA[		_OutIt _Dest, _Ty *)]]></Line>
      <Line Number="1913"><![CDATA[	{	// copy compressing pairs that match, input iterators]]></Line>
      <Line Number="1914"><![CDATA[	_Ty _Val = *_First;]]></Line>
      <Line Number="1915"><![CDATA[	for (*_Dest++ = _Val; ++_First != _Last; )]]></Line>
      <Line Number="1916"><![CDATA[		if (!(_Val == *_First))]]></Line>
      <Line Number="1917"><![CDATA[			{	// copy unmatched]]></Line>
      <Line Number="1918"><![CDATA[			_Val = *_First;]]></Line>
      <Line Number="1919"><![CDATA[			*_Dest++ = _Val;]]></Line>
      <Line Number="1920"><![CDATA[			}]]></Line>
      <Line Number="1921"><![CDATA[	return (_Dest);]]></Line>
      <Line Number="1922"><![CDATA[	}]]></Line>
      <Line Number="1923"><![CDATA[]]></Line>
      <Line Number="1924"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="1925"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="1926"><![CDATA[	_OutIt _Unique_copy(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="1927"><![CDATA[		_OutIt _Dest, input_iterator_tag)]]></Line>
      <Line Number="1928"><![CDATA[	{	// copy compressing pairs that match, input iterators]]></Line>
      <Line Number="1929"><![CDATA[	return (_Unique_copy(_First, _Last, _Dest,]]></Line>
      <Line Number="1930"><![CDATA[		_Val_type(_First)));]]></Line>
      <Line Number="1931"><![CDATA[	}]]></Line>
      <Line Number="1932"><![CDATA[]]></Line>
      <Line Number="1933"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="1934"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="1935"><![CDATA[	_OutIt _Unique_copy(_FwdIt _First, _FwdIt _Last,]]></Line>
      <Line Number="1936"><![CDATA[		_OutIt _Dest, forward_iterator_tag)]]></Line>
      <Line Number="1937"><![CDATA[	{	// copy compressing pairs that match, forward iterators]]></Line>
      <Line Number="1938"><![CDATA[	_FwdIt _Firstb = _First;]]></Line>
      <Line Number="1939"><![CDATA[	for (*_Dest++ = *_Firstb; ++_First != _Last; )]]></Line>
      <Line Number="1940"><![CDATA[		if (!(*_Firstb == *_First))]]></Line>
      <Line Number="1941"><![CDATA[			{	// copy unmatched]]></Line>
      <Line Number="1942"><![CDATA[			_Firstb = _First;]]></Line>
      <Line Number="1943"><![CDATA[			*_Dest++ = *_Firstb;]]></Line>
      <Line Number="1944"><![CDATA[			}]]></Line>
      <Line Number="1945"><![CDATA[	return (_Dest);]]></Line>
      <Line Number="1946"><![CDATA[	}]]></Line>
      <Line Number="1947"><![CDATA[]]></Line>
      <Line Number="1948"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 0]]></Line>
      <Line Number="1949"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="1950"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="1951"><![CDATA[	_OutIt unique_copy(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="1952"><![CDATA[		_OutIt _Dest)]]></Line>
      <Line Number="1953"><![CDATA[	{	// copy compressing pairs that match]]></Line>
      <Line Number="1954"><![CDATA[	return (_First == _Last ? _Dest :]]></Line>
      <Line Number="1955"><![CDATA[		_Unique_copy(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="1956"><![CDATA[			_Dest, _Iter_cat(_First)));]]></Line>
      <Line Number="1957"><![CDATA[	}]]></Line>
      <Line Number="1958"><![CDATA[]]></Line>
      <Line Number="1959"><![CDATA[ #else /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="1960"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="1961"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="1962"><![CDATA[	_OutIt _Unique_copy1(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="1963"><![CDATA[		_OutIt _Dest, _STD tr1::true_type)]]></Line>
      <Line Number="1964"><![CDATA[	{	// copy compressing pairs that match, checked dest]]></Line>
      <Line Number="1965"><![CDATA[	return (_Unique_copy(_First, _Last,]]></Line>
      <Line Number="1966"><![CDATA[		_Dest, _Iter_cat(_First)));]]></Line>
      <Line Number="1967"><![CDATA[	}]]></Line>
      <Line Number="1968"><![CDATA[]]></Line>
      <Line Number="1969"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="1970"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="1971"><![CDATA[_SCL_INSECURE_DEPRECATE]]></Line>
      <Line Number="1972"><![CDATA[	_OutIt _Unique_copy1(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="1973"><![CDATA[		_OutIt _Dest, _STD tr1::false_type)]]></Line>
      <Line Number="1974"><![CDATA[	{	// copy compressing pairs that match, unchecked dest]]></Line>
      <Line Number="1975"><![CDATA[	return (_Unique_copy(_First, _Last,]]></Line>
      <Line Number="1976"><![CDATA[		_Dest, _Iter_cat(_First)));]]></Line>
      <Line Number="1977"><![CDATA[	}]]></Line>
      <Line Number="1978"><![CDATA[]]></Line>
      <Line Number="1979"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="1980"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="1981"><![CDATA[	_OutIt unique_copy(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="1982"><![CDATA[		_OutIt _Dest)]]></Line>
      <Line Number="1983"><![CDATA[	{	// copy compressing pairs that match]]></Line>
      <Line Number="1984"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="1985"><![CDATA[	_DEBUG_POINTER(_Dest);]]></Line>
      <Line Number="1986"><![CDATA[	return (_First == _Last ? _Dest :]]></Line>
      <Line Number="1987"><![CDATA[		_Unique_copy1(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="1988"><![CDATA[			_Dest, _Is_checked(_Dest)));]]></Line>
      <Line Number="1989"><![CDATA[	}]]></Line>
      <Line Number="1990"><![CDATA[]]></Line>
      <Line Number="1991"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="1992"><![CDATA[	class _OutTy,]]></Line>
      <Line Number="1993"><![CDATA[	size_t _OutSize> inline]]></Line>
      <Line Number="1994"><![CDATA[	_OutTy *unique_copy(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="1995"><![CDATA[		_OutTy (&_Dest)[_OutSize])]]></Line>
      <Line Number="1996"><![CDATA[	{	// copy compressing pairs that match, array dest]]></Line>
      <Line Number="1997"><![CDATA[	return (_Unchecked(]]></Line>
      <Line Number="1998"><![CDATA[		_STD unique_copy(_First, _Last,]]></Line>
      <Line Number="1999"><![CDATA[			_Array_iterator<_OutTy, _OutSize>(_Dest))));]]></Line>
      <Line Number="2000"><![CDATA[	}]]></Line>
      <Line Number="2001"><![CDATA[]]></Line>
      <Line Number="2002"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="2003"><![CDATA[]]></Line>
      <Line Number="2004"><![CDATA[		// TEMPLATE FUNCTION unique_copy WITH PRED]]></Line>
      <Line Number="2005"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="2006"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="2007"><![CDATA[	class _Ty,]]></Line>
      <Line Number="2008"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="2009"><![CDATA[	_OutIt _Unique_copy(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="2010"><![CDATA[		_OutIt _Dest, _Pr _Pred, _Ty *)]]></Line>
      <Line Number="2011"><![CDATA[	{	// copy compressing pairs satisfying _Pred, input iterators]]></Line>
      <Line Number="2012"><![CDATA[	_Ty _Val = *_First;]]></Line>
      <Line Number="2013"><![CDATA[]]></Line>
      <Line Number="2014"><![CDATA[	for (*_Dest++ = _Val; ++_First != _Last; )]]></Line>
      <Line Number="2015"><![CDATA[		if (!_Pred(_Val, *_First))]]></Line>
      <Line Number="2016"><![CDATA[			{	// copy unmatched]]></Line>
      <Line Number="2017"><![CDATA[			_Val = *_First;]]></Line>
      <Line Number="2018"><![CDATA[			*_Dest++ = _Val;]]></Line>
      <Line Number="2019"><![CDATA[			}]]></Line>
      <Line Number="2020"><![CDATA[	return (_Dest);]]></Line>
      <Line Number="2021"><![CDATA[	}]]></Line>
      <Line Number="2022"><![CDATA[]]></Line>
      <Line Number="2023"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="2024"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="2025"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="2026"><![CDATA[	_OutIt _Unique_copy(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="2027"><![CDATA[		_OutIt _Dest, _Pr _Pred, input_iterator_tag)]]></Line>
      <Line Number="2028"><![CDATA[	{	// copy compressing pairs satisfying _Pred, input iterators]]></Line>
      <Line Number="2029"><![CDATA[	return (_Unique_copy(_First, _Last, _Dest, _Pred,]]></Line>
      <Line Number="2030"><![CDATA[		_Val_type(_First)));]]></Line>
      <Line Number="2031"><![CDATA[	}]]></Line>
      <Line Number="2032"><![CDATA[]]></Line>
      <Line Number="2033"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="2034"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="2035"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="2036"><![CDATA[	_OutIt _Unique_copy(_FwdIt _First, _FwdIt _Last,]]></Line>
      <Line Number="2037"><![CDATA[		_OutIt _Dest, _Pr _Pred, forward_iterator_tag)]]></Line>
      <Line Number="2038"><![CDATA[	{	// copy compressing pairs satisfying _Pred, forward iterators]]></Line>
      <Line Number="2039"><![CDATA[	_FwdIt _Firstb = _First;]]></Line>
      <Line Number="2040"><![CDATA[]]></Line>
      <Line Number="2041"><![CDATA[	for (*_Dest++ = *_Firstb; ++_First != _Last; )]]></Line>
      <Line Number="2042"><![CDATA[		if (!_Pred(*_Firstb, *_First))]]></Line>
      <Line Number="2043"><![CDATA[			{	// copy unmatched]]></Line>
      <Line Number="2044"><![CDATA[			_Firstb = _First;]]></Line>
      <Line Number="2045"><![CDATA[			*_Dest++ = *_Firstb;]]></Line>
      <Line Number="2046"><![CDATA[			}]]></Line>
      <Line Number="2047"><![CDATA[	return (_Dest);]]></Line>
      <Line Number="2048"><![CDATA[	}]]></Line>
      <Line Number="2049"><![CDATA[]]></Line>
      <Line Number="2050"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 0]]></Line>
      <Line Number="2051"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="2052"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="2053"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="2054"><![CDATA[	_OutIt unique_copy(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="2055"><![CDATA[		_OutIt _Dest, _Pr _Pred)]]></Line>
      <Line Number="2056"><![CDATA[	{	// copy compressing pairs that match]]></Line>
      <Line Number="2057"><![CDATA[	return (_First == _Last ? _Dest :]]></Line>
      <Line Number="2058"><![CDATA[		_Unique_copy(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="2059"><![CDATA[			_Dest, _Pred, _Iter_cat(_First)));]]></Line>
      <Line Number="2060"><![CDATA[	}]]></Line>
      <Line Number="2061"><![CDATA[]]></Line>
      <Line Number="2062"><![CDATA[ #else /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="2063"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="2064"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="2065"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="2066"><![CDATA[	_OutIt _Unique_copy1(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="2067"><![CDATA[		_OutIt _Dest, _Pr _Pred, _STD tr1::true_type)]]></Line>
      <Line Number="2068"><![CDATA[	{	// copy compressing pairs that match, checked dest]]></Line>
      <Line Number="2069"><![CDATA[	return (_Unique_copy(_First, _Last,]]></Line>
      <Line Number="2070"><![CDATA[		_Dest, _Pred, _Iter_cat(_First)));]]></Line>
      <Line Number="2071"><![CDATA[	}]]></Line>
      <Line Number="2072"><![CDATA[]]></Line>
      <Line Number="2073"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="2074"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="2075"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="2076"><![CDATA[_SCL_INSECURE_DEPRECATE]]></Line>
      <Line Number="2077"><![CDATA[	_OutIt _Unique_copy1(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="2078"><![CDATA[		_OutIt _Dest, _Pr _Pred, _STD tr1::false_type)]]></Line>
      <Line Number="2079"><![CDATA[	{	// copy compressing pairs that match, unchecked dest]]></Line>
      <Line Number="2080"><![CDATA[	return (_Unique_copy(_First, _Last,]]></Line>
      <Line Number="2081"><![CDATA[		_Dest, _Pred, _Iter_cat(_First)));]]></Line>
      <Line Number="2082"><![CDATA[	}]]></Line>
      <Line Number="2083"><![CDATA[]]></Line>
      <Line Number="2084"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="2085"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="2086"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="2087"><![CDATA[	_OutIt unique_copy(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="2088"><![CDATA[		_OutIt _Dest, _Pr _Pred)]]></Line>
      <Line Number="2089"><![CDATA[	{	// copy compressing pairs that match]]></Line>
      <Line Number="2090"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="2091"><![CDATA[	_DEBUG_POINTER(_Dest);]]></Line>
      <Line Number="2092"><![CDATA[	return (_First == _Last ? _Dest :]]></Line>
      <Line Number="2093"><![CDATA[		_Unique_copy1(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="2094"><![CDATA[			_Dest, _Pred, _Is_checked(_Dest)));]]></Line>
      <Line Number="2095"><![CDATA[	}]]></Line>
      <Line Number="2096"><![CDATA[]]></Line>
      <Line Number="2097"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="2098"><![CDATA[	class _OutTy,]]></Line>
      <Line Number="2099"><![CDATA[	size_t _OutSize,]]></Line>
      <Line Number="2100"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="2101"><![CDATA[	_OutTy *unique_copy(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="2102"><![CDATA[		_OutTy (&_Dest)[_OutSize], _Pr _Pred)]]></Line>
      <Line Number="2103"><![CDATA[	{	// copy compressing pairs that match, array dest]]></Line>
      <Line Number="2104"><![CDATA[	return (_Unchecked(]]></Line>
      <Line Number="2105"><![CDATA[		_STD unique_copy(_First, _Last,]]></Line>
      <Line Number="2106"><![CDATA[			_Array_iterator<_OutTy, _OutSize>(_Dest), _Pred)));]]></Line>
      <Line Number="2107"><![CDATA[	}]]></Line>
      <Line Number="2108"><![CDATA[]]></Line>
      <Line Number="2109"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="2110"><![CDATA[]]></Line>
      <Line Number="2111"><![CDATA[		// TEMPLATE FUNCTION reverse_copy]]></Line>
      <Line Number="2112"><![CDATA[template<class _BidIt,]]></Line>
      <Line Number="2113"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="2114"><![CDATA[	_OutIt _Reverse_copy(_BidIt _First, _BidIt _Last,]]></Line>
      <Line Number="2115"><![CDATA[		_OutIt _Dest)]]></Line>
      <Line Number="2116"><![CDATA[	{	// copy reversing elements in [_First, _Last)]]></Line>
      <Line Number="2117"><![CDATA[	for (; _First != _Last; ++_Dest)]]></Line>
      <Line Number="2118"><![CDATA[		*_Dest = *--_Last;]]></Line>
      <Line Number="2119"><![CDATA[	return (_Dest);]]></Line>
      <Line Number="2120"><![CDATA[	}]]></Line>
      <Line Number="2121"><![CDATA[]]></Line>
      <Line Number="2122"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 0]]></Line>
      <Line Number="2123"><![CDATA[template<class _BidIt,]]></Line>
      <Line Number="2124"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="2125"><![CDATA[	_OutIt reverse_copy(_BidIt _First, _BidIt _Last,]]></Line>
      <Line Number="2126"><![CDATA[		_OutIt _Dest)]]></Line>
      <Line Number="2127"><![CDATA[	{	// copy reversing elements in [_First, _Last)]]></Line>
      <Line Number="2128"><![CDATA[	return (_Reverse_copy(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="2129"><![CDATA[		_Dest));]]></Line>
      <Line Number="2130"><![CDATA[	}]]></Line>
      <Line Number="2131"><![CDATA[]]></Line>
      <Line Number="2132"><![CDATA[ #else /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="2133"><![CDATA[template<class _BidIt,]]></Line>
      <Line Number="2134"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="2135"><![CDATA[	_OutIt _Reverse_copy(_BidIt _First, _BidIt _Last,]]></Line>
      <Line Number="2136"><![CDATA[		_OutIt _Dest,]]></Line>
      <Line Number="2137"><![CDATA[		input_iterator_tag, output_iterator_tag)]]></Line>
      <Line Number="2138"><![CDATA[	{	// copy reversing elements in [_First, _Last), arbitrary iterators]]></Line>
      <Line Number="2139"><![CDATA[	return (_Reverse_copy(_First, _Last,]]></Line>
      <Line Number="2140"><![CDATA[		_Dest));]]></Line>
      <Line Number="2141"><![CDATA[	}]]></Line>
      <Line Number="2142"><![CDATA[]]></Line>
      <Line Number="2143"><![CDATA[template<class _BidIt,]]></Line>
      <Line Number="2144"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="2145"><![CDATA[	_OutIt _Reverse_copy(_BidIt _First, _BidIt _Last,]]></Line>
      <Line Number="2146"><![CDATA[		_OutIt _Dest,]]></Line>
      <Line Number="2147"><![CDATA[		random_access_iterator_tag, random_access_iterator_tag)]]></Line>
      <Line Number="2148"><![CDATA[	{	// copy reversing elements in [_First, _Last), random-access iterators]]></Line>
      <Line Number="2149"><![CDATA[	_OutIt _Ans = _Dest + (_Last - _First);	// also checks range]]></Line>
      <Line Number="2150"><![CDATA[	_Reverse_copy(_First, _Last,]]></Line>
      <Line Number="2151"><![CDATA[		_Unchecked(_Dest));]]></Line>
      <Line Number="2152"><![CDATA[	return (_Ans);]]></Line>
      <Line Number="2153"><![CDATA[	}]]></Line>
      <Line Number="2154"><![CDATA[]]></Line>
      <Line Number="2155"><![CDATA[template<class _BidIt,]]></Line>
      <Line Number="2156"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="2157"><![CDATA[	_OutIt _Reverse_copy(_BidIt _First, _BidIt _Last,]]></Line>
      <Line Number="2158"><![CDATA[		_OutIt _Dest,]]></Line>
      <Line Number="2159"><![CDATA[		_STD tr1::true_type)]]></Line>
      <Line Number="2160"><![CDATA[	{	// copy reversing elements in [_First, _Last), checked dest]]></Line>
      <Line Number="2161"><![CDATA[	return (_Reverse_copy(_First, _Last,]]></Line>
      <Line Number="2162"><![CDATA[		_Dest, _Iter_cat(_First), _Iter_cat(_Dest)));]]></Line>
      <Line Number="2163"><![CDATA[	}]]></Line>
      <Line Number="2164"><![CDATA[]]></Line>
      <Line Number="2165"><![CDATA[template<class _BidIt,]]></Line>
      <Line Number="2166"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="2167"><![CDATA[_SCL_INSECURE_DEPRECATE]]></Line>
      <Line Number="2168"><![CDATA[	_OutIt _Reverse_copy(_BidIt _First, _BidIt _Last,]]></Line>
      <Line Number="2169"><![CDATA[		_OutIt _Dest,]]></Line>
      <Line Number="2170"><![CDATA[		_STD tr1::false_type)]]></Line>
      <Line Number="2171"><![CDATA[	{	// copy reversing elements in [_First, _Last), unchecked dest]]></Line>
      <Line Number="2172"><![CDATA[	return (_Reverse_copy(_First, _Last,]]></Line>
      <Line Number="2173"><![CDATA[		_Dest, _Iter_cat(_First), _Iter_cat(_Dest)));]]></Line>
      <Line Number="2174"><![CDATA[	}]]></Line>
      <Line Number="2175"><![CDATA[]]></Line>
      <Line Number="2176"><![CDATA[template<class _BidIt,]]></Line>
      <Line Number="2177"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="2178"><![CDATA[	_OutIt reverse_copy(_BidIt _First, _BidIt _Last,]]></Line>
      <Line Number="2179"><![CDATA[		_OutIt _Dest)]]></Line>
      <Line Number="2180"><![CDATA[	{	// copy reversing elements in [_First, _Last)]]></Line>
      <Line Number="2181"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="2182"><![CDATA[	_DEBUG_POINTER(_Dest);]]></Line>
      <Line Number="2183"><![CDATA[	return (_Reverse_copy(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="2184"><![CDATA[		_Dest, _Is_checked(_Dest)));]]></Line>
      <Line Number="2185"><![CDATA[	}]]></Line>
      <Line Number="2186"><![CDATA[]]></Line>
      <Line Number="2187"><![CDATA[template<class _BidIt,]]></Line>
      <Line Number="2188"><![CDATA[	class _OutTy,]]></Line>
      <Line Number="2189"><![CDATA[	size_t _OutSize> inline]]></Line>
      <Line Number="2190"><![CDATA[	_OutTy *reverse_copy(_BidIt _First, _BidIt _Last,]]></Line>
      <Line Number="2191"><![CDATA[		_OutTy (&_Dest)[_OutSize])]]></Line>
      <Line Number="2192"><![CDATA[	{	// copy reversing elements in [_First, _Last), array dest]]></Line>
      <Line Number="2193"><![CDATA[	return (_Unchecked(]]></Line>
      <Line Number="2194"><![CDATA[		_STD reverse_copy(_First, _Last,]]></Line>
      <Line Number="2195"><![CDATA[			_Array_iterator<_OutTy, _OutSize>(_Dest))));]]></Line>
      <Line Number="2196"><![CDATA[	}]]></Line>
      <Line Number="2197"><![CDATA[]]></Line>
      <Line Number="2198"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="2199"><![CDATA[]]></Line>
      <Line Number="2200"><![CDATA[		// TEMPLATE FUNCTION rotate_copy]]></Line>
      <Line Number="2201"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="2202"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="2203"><![CDATA[	_OutIt rotate_copy(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last,]]></Line>
      <Line Number="2204"><![CDATA[		_OutIt _Dest)]]></Line>
      <Line Number="2205"><![CDATA[	{	// copy rotating [_First, _Last)]]></Line>
      <Line Number="2206"><![CDATA[	_Dest = _STD copy(_Mid, _Last, _Dest);]]></Line>
      <Line Number="2207"><![CDATA[	return (_STD copy(_First, _Mid, _Dest));]]></Line>
      <Line Number="2208"><![CDATA[	}]]></Line>
      <Line Number="2209"><![CDATA[]]></Line>
      <Line Number="2210"><![CDATA[		// TEMPLATE FUNCTION random_shuffle]]></Line>
      <Line Number="2211"><![CDATA[template<class _RanIt,]]></Line>
      <Line Number="2212"><![CDATA[	class _Diff> inline]]></Line>
      <Line Number="2213"><![CDATA[	void _Random_shuffle(_RanIt _First, _RanIt _Last, _Diff *)]]></Line>
      <Line Number="2214"><![CDATA[	{	// shuffle [_First, _Last)]]></Line>
      <Line Number="2215"><![CDATA[	const int _RANDOM_BITS = 15;	// minimum random bits from rand()]]></Line>
      <Line Number="2216"><![CDATA[	const int _RANDOM_MAX = (1U << _RANDOM_BITS) - 1;]]></Line>
      <Line Number="2217"><![CDATA[]]></Line>
      <Line Number="2218"><![CDATA[	_RanIt _Next = _First;]]></Line>
      <Line Number="2219"><![CDATA[	for (unsigned long _Index = 2; ++_Next != _Last; ++_Index)]]></Line>
      <Line Number="2220"><![CDATA[		{	// assume unsigned long big enough for _Diff count]]></Line>
      <Line Number="2221"><![CDATA[		unsigned long _Rm = _RANDOM_MAX;]]></Line>
      <Line Number="2222"><![CDATA[		unsigned long _Rn = _CSTD rand() & _RANDOM_MAX;]]></Line>
      <Line Number="2223"><![CDATA[		for (; _Rm < _Index && _Rm != ~0UL;]]></Line>
      <Line Number="2224"><![CDATA[			_Rm = _Rm << _RANDOM_BITS | _RANDOM_MAX)]]></Line>
      <Line Number="2225"><![CDATA[			_Rn = _Rn << _RANDOM_BITS]]></Line>
      <Line Number="2226"><![CDATA[				| (_CSTD rand() & _RANDOM_MAX);	// build random value]]></Line>
      <Line Number="2227"><![CDATA[]]></Line>
      <Line Number="2228"><![CDATA[		_STD iter_swap(_Next, _First + _Diff(_Rn % _Index));	// swap a pair]]></Line>
      <Line Number="2229"><![CDATA[		}]]></Line>
      <Line Number="2230"><![CDATA[	}]]></Line>
      <Line Number="2231"><![CDATA[]]></Line>
      <Line Number="2232"><![CDATA[template<class _RanIt> inline]]></Line>
      <Line Number="2233"><![CDATA[	void random_shuffle(_RanIt _First, _RanIt _Last)]]></Line>
      <Line Number="2234"><![CDATA[	{	// shuffle [_First, _Last)]]></Line>
      <Line Number="2235"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="2236"><![CDATA[	if (_First != _Last)]]></Line>
      <Line Number="2237"><![CDATA[		_Random_shuffle(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="2238"><![CDATA[			_Dist_type(_First));]]></Line>
      <Line Number="2239"><![CDATA[	}]]></Line>
      <Line Number="2240"><![CDATA[]]></Line>
      <Line Number="2241"><![CDATA[		// TEMPLATE FUNCTION random_shuffle WITH RANDOM FN]]></Line>
      <Line Number="2242"><![CDATA[template<class _RanIt,]]></Line>
      <Line Number="2243"><![CDATA[	class _Fn1,]]></Line>
      <Line Number="2244"><![CDATA[	class _Diff> inline]]></Line>
      <Line Number="2245"><![CDATA[	void _Random_shuffle(_RanIt _First, _RanIt _Last, _Fn1& _Func, _Diff *)]]></Line>
      <Line Number="2246"><![CDATA[	{	// shuffle nonempty [_First, _Last) using random function _Func]]></Line>
      <Line Number="2247"><![CDATA[	_RanIt _Next = _First;]]></Line>
      <Line Number="2248"><![CDATA[	for (_Diff _Index = 2; ++_Next != _Last; ++_Index)]]></Line>
      <Line Number="2249"><![CDATA[		_STD iter_swap(_Next, _First + _Diff(_Func(_Index) % _Index));]]></Line>
      <Line Number="2250"><![CDATA[	}]]></Line>
      <Line Number="2251"><![CDATA[]]></Line>
      <Line Number="2252"><![CDATA[template<class _RanIt,]]></Line>
      <Line Number="2253"><![CDATA[	class _Fn1> inline]]></Line>
      <Line Number="2254"><![CDATA[	void random_shuffle(_RanIt _First, _RanIt _Last, _Fn1& _Func)]]></Line>
      <Line Number="2255"><![CDATA[	{	// shuffle [_First, _Last) using random function _Func]]></Line>
      <Line Number="2256"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="2257"><![CDATA[	_DEBUG_POINTER(_Func);]]></Line>
      <Line Number="2258"><![CDATA[	if (_First != _Last)]]></Line>
      <Line Number="2259"><![CDATA[		_Random_shuffle(_Unchecked(_First), _Unchecked(_Last), _Func,]]></Line>
      <Line Number="2260"><![CDATA[			_Dist_type(_First));]]></Line>
      <Line Number="2261"><![CDATA[	}]]></Line>
      <Line Number="2262"><![CDATA[]]></Line>
      <Line Number="2263"><![CDATA[		// TEMPLATE FUNCTION partition]]></Line>
      <Line Number="2264"><![CDATA[template<class _BidIt,]]></Line>
      <Line Number="2265"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="2266"><![CDATA[	_BidIt _Partition(_BidIt _First, _BidIt _Last, _Pr _Pred)]]></Line>
      <Line Number="2267"><![CDATA[	{	// move elements satisfying _Pred to beginning of sequence]]></Line>
      <Line Number="2268"><![CDATA[	for (; ; ++_First)]]></Line>
      <Line Number="2269"><![CDATA[		{	// find any out-of-order pair]]></Line>
      <Line Number="2270"><![CDATA[		for (; _First != _Last && _Pred(*_First); ++_First)]]></Line>
      <Line Number="2271"><![CDATA[			;	// skip in-place elements at beginning]]></Line>
      <Line Number="2272"><![CDATA[		if (_First == _Last)]]></Line>
      <Line Number="2273"><![CDATA[			break;	// done]]></Line>
      <Line Number="2274"><![CDATA[]]></Line>
      <Line Number="2275"><![CDATA[		for (; _First != --_Last && !_Pred(*_Last); )]]></Line>
      <Line Number="2276"><![CDATA[			;	// skip in-place elements at end]]></Line>
      <Line Number="2277"><![CDATA[		if (_First == _Last)]]></Line>
      <Line Number="2278"><![CDATA[			break;	// done]]></Line>
      <Line Number="2279"><![CDATA[]]></Line>
      <Line Number="2280"><![CDATA[		_STD iter_swap(_First, _Last);	// swap out-of-place pair and loop]]></Line>
      <Line Number="2281"><![CDATA[		}]]></Line>
      <Line Number="2282"><![CDATA[	return (_First);]]></Line>
      <Line Number="2283"><![CDATA[	}]]></Line>
      <Line Number="2284"><![CDATA[]]></Line>
      <Line Number="2285"><![CDATA[template<class _BidIt,]]></Line>
      <Line Number="2286"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="2287"><![CDATA[	_BidIt partition(_BidIt _First, _BidIt _Last, _Pr _Pred)]]></Line>
      <Line Number="2288"><![CDATA[	{	// move elements satisfying _Pred to beginning of sequence]]></Line>
      <Line Number="2289"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="2290"><![CDATA[	_DEBUG_POINTER(_Pred);]]></Line>
      <Line Number="2291"><![CDATA[	return (_Rechecked(_First,]]></Line>
      <Line Number="2292"><![CDATA[		_Partition(_Unchecked(_First), _Unchecked(_Last), _Pred)));]]></Line>
      <Line Number="2293"><![CDATA[	}]]></Line>
      <Line Number="2294"><![CDATA[]]></Line>
      <Line Number="2295"><![CDATA[		// TEMPLATE FUNCTION stable_partition]]></Line>
      <Line Number="2296"><![CDATA[template<class _BidIt,]]></Line>
      <Line Number="2297"><![CDATA[	class _Pr,]]></Line>
      <Line Number="2298"><![CDATA[	class _Diff,]]></Line>
      <Line Number="2299"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="2300"><![CDATA[	_BidIt _Stable_partition(_BidIt _First, _BidIt _Last, _Pr _Pred,]]></Line>
      <Line Number="2301"><![CDATA[		_Diff _Count, _Temp_iterator<_Ty>& _Tempbuf)]]></Line>
      <Line Number="2302"><![CDATA[	{	// partition preserving order of equivalents, using _Pred]]></Line>
      <Line Number="2303"><![CDATA[	if (_Count == 0)]]></Line>
      <Line Number="2304"><![CDATA[		return (_First);]]></Line>
      <Line Number="2305"><![CDATA[	else if (_Count == 1)]]></Line>
      <Line Number="2306"><![CDATA[		return (_Pred(*_First) ? _Last : _First);]]></Line>
      <Line Number="2307"><![CDATA[	else if (_Count <= _Tempbuf._Maxlen())]]></Line>
      <Line Number="2308"><![CDATA[		{	// temp buffer big enough, copy right partition out and back]]></Line>
      <Line Number="2309"><![CDATA[		_BidIt _Next = _First;]]></Line>
      <Line Number="2310"><![CDATA[		for (_Tempbuf._Init(); _First != _Last; ++_First)]]></Line>
      <Line Number="2311"><![CDATA[			if (_Pred(*_First))]]></Line>
      <Line Number="2312"><![CDATA[				*_Next++ = _Move(*_First);]]></Line>
      <Line Number="2313"><![CDATA[			else]]></Line>
      <Line Number="2314"><![CDATA[				*_Tempbuf++ = _Move(*_First);]]></Line>
      <Line Number="2315"><![CDATA[]]></Line>
      <Line Number="2316"><![CDATA[		_Move(_Tempbuf._First(), _Tempbuf._Last(), _Next);	// copy back]]></Line>
      <Line Number="2317"><![CDATA[		return (_Next);]]></Line>
      <Line Number="2318"><![CDATA[		}]]></Line>
      <Line Number="2319"><![CDATA[	else]]></Line>
      <Line Number="2320"><![CDATA[		{	// temp buffer not big enough, divide and conquer]]></Line>
      <Line Number="2321"><![CDATA[		_BidIt _Mid = _First;]]></Line>
      <Line Number="2322"><![CDATA[		_STD advance(_Mid, _Count / 2);]]></Line>
      <Line Number="2323"><![CDATA[]]></Line>
      <Line Number="2324"><![CDATA[		_BidIt _Left = _Stable_partition(_First, _Mid, _Pred,]]></Line>
      <Line Number="2325"><![CDATA[			_Count / 2, _Tempbuf);	// form L1R1 in left half]]></Line>
      <Line Number="2326"><![CDATA[		_BidIt _Right = _Stable_partition(_Mid, _Last, _Pred,]]></Line>
      <Line Number="2327"><![CDATA[			_Count - _Count / 2, _Tempbuf);	// form L2R2 in right half]]></Line>
      <Line Number="2328"><![CDATA[]]></Line>
      <Line Number="2329"><![CDATA[		_Diff _Count1 = 0;]]></Line>
      <Line Number="2330"><![CDATA[		_Distance(_Left, _Mid, _Count1);]]></Line>
      <Line Number="2331"><![CDATA[		_Diff _Count2 = 0;]]></Line>
      <Line Number="2332"><![CDATA[		_Distance(_Mid, _Right, _Count2);]]></Line>
      <Line Number="2333"><![CDATA[]]></Line>
      <Line Number="2334"><![CDATA[		return (_Buffered_rotate(_Left, _Mid, _Right,]]></Line>
      <Line Number="2335"><![CDATA[			_Count1, _Count2, _Tempbuf));	// rotate L1R1L2R2 to L1L2R1R2]]></Line>
      <Line Number="2336"><![CDATA[		}]]></Line>
      <Line Number="2337"><![CDATA[	}]]></Line>
      <Line Number="2338"><![CDATA[]]></Line>
      <Line Number="2339"><![CDATA[template<class _BidIt,]]></Line>
      <Line Number="2340"><![CDATA[	class _Pr,]]></Line>
      <Line Number="2341"><![CDATA[	class _Diff,]]></Line>
      <Line Number="2342"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="2343"><![CDATA[	_BidIt _Stable_partition(_BidIt _First, _BidIt _Last, _Pr _Pred,]]></Line>
      <Line Number="2344"><![CDATA[		_Diff *, _Ty *)]]></Line>
      <Line Number="2345"><![CDATA[	{	// partition preserving order of equivalents, using _Pred]]></Line>
      <Line Number="2346"><![CDATA[	_Diff _Count = 0;]]></Line>
      <Line Number="2347"><![CDATA[	_Distance(_First, _Last, _Count);]]></Line>
      <Line Number="2348"><![CDATA[	_Temp_iterator<_Ty> _Tempbuf(_Count);]]></Line>
      <Line Number="2349"><![CDATA[	return (_Stable_partition(_First, _Last, _Pred, _Count, _Tempbuf));]]></Line>
      <Line Number="2350"><![CDATA[	}]]></Line>
      <Line Number="2351"><![CDATA[]]></Line>
      <Line Number="2352"><![CDATA[template<class _BidIt,]]></Line>
      <Line Number="2353"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="2354"><![CDATA[	_BidIt stable_partition(_BidIt _First, _BidIt _Last, _Pr _Pred)]]></Line>
      <Line Number="2355"><![CDATA[	{	// partition preserving order of equivalents, using _Pred]]></Line>
      <Line Number="2356"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="2357"><![CDATA[	_DEBUG_POINTER(_Pred);]]></Line>
      <Line Number="2358"><![CDATA[	return (_First == _Last ? _First]]></Line>
      <Line Number="2359"><![CDATA[		: _Rechecked(_First,]]></Line>
      <Line Number="2360"><![CDATA[			_Stable_partition(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="2361"><![CDATA[				_Pred, _Dist_type(_First), _Val_type(_First))));]]></Line>
      <Line Number="2362"><![CDATA[	}]]></Line>
      <Line Number="2363"><![CDATA[]]></Line>
      <Line Number="2364"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 2]]></Line>
      <Line Number="2365"><![CDATA[		// TEMPLATE FUNCTION _Debug_heap]]></Line>
      <Line Number="2366"><![CDATA[template<class _RanIt> inline]]></Line>
      <Line Number="2367"><![CDATA[	void _Debug_heap(_RanIt _First, _RanIt _Last)]]></Line>
      <Line Number="2368"><![CDATA[	{	// test if range is a heap ordered by operator<]]></Line>
      <Line Number="2369"><![CDATA[	if (_First != _Last)]]></Line>
      <Line Number="2370"><![CDATA[		for (_RanIt _Root = _First; ++_First != _Last; ++_Root)]]></Line>
      <Line Number="2371"><![CDATA[			if (_DEBUG_LT(*_Root, *_First))]]></Line>
      <Line Number="2372"><![CDATA[				_DEBUG_ERROR("invalid heap");]]></Line>
      <Line Number="2373"><![CDATA[			else if (++_First == _Last)]]></Line>
      <Line Number="2374"><![CDATA[				break;]]></Line>
      <Line Number="2375"><![CDATA[			else if (_DEBUG_LT(*_Root, *_First))]]></Line>
      <Line Number="2376"><![CDATA[				_DEBUG_ERROR("invalid heap");]]></Line>
      <Line Number="2377"><![CDATA[	}]]></Line>
      <Line Number="2378"><![CDATA[]]></Line>
      <Line Number="2379"><![CDATA[		// TEMPLATE FUNCTION _Debug_heap WITH PRED]]></Line>
      <Line Number="2380"><![CDATA[template<class _RanIt,]]></Line>
      <Line Number="2381"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="2382"><![CDATA[	void _Debug_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)]]></Line>
      <Line Number="2383"><![CDATA[	{	// test if range is a heap ordered by _Pred]]></Line>
      <Line Number="2384"><![CDATA[	if (_First != _Last)]]></Line>
      <Line Number="2385"><![CDATA[		for (_RanIt _Root = _First; ++_First != _Last; ++_Root)]]></Line>
      <Line Number="2386"><![CDATA[			if (_DEBUG_LT_PRED(_Pred, *_Root, *_First))]]></Line>
      <Line Number="2387"><![CDATA[				_DEBUG_ERROR("invalid heap");]]></Line>
      <Line Number="2388"><![CDATA[			else if (++_First == _Last)]]></Line>
      <Line Number="2389"><![CDATA[				break;]]></Line>
      <Line Number="2390"><![CDATA[			else if (_DEBUG_LT_PRED(_Pred, *_Root, *_First))]]></Line>
      <Line Number="2391"><![CDATA[				_DEBUG_ERROR("invalid heap");]]></Line>
      <Line Number="2392"><![CDATA[	}]]></Line>
      <Line Number="2393"><![CDATA[]]></Line>
      <Line Number="2394"><![CDATA[  #define _DEBUG_HEAP(first, last)	\]]></Line>
      <Line Number="2395"><![CDATA[	_Debug_heap(_Unchecked(first), _Unchecked(last))]]></Line>
      <Line Number="2396"><![CDATA[  #define _DEBUG_HEAP_PRED(first, last, pred)	\]]></Line>
      <Line Number="2397"><![CDATA[	_Debug_heap(_Unchecked(first), _Unchecked(last), pred)]]></Line>
      <Line Number="2398"><![CDATA[]]></Line>
      <Line Number="2399"><![CDATA[ #else /* _ITERATOR_DEBUG_LEVEL == 2 */]]></Line>
      <Line Number="2400"><![CDATA[  #define _DEBUG_HEAP(first, last)]]></Line>
      <Line Number="2401"><![CDATA[  #define _DEBUG_HEAP_PRED(first, last, pred)]]></Line>
      <Line Number="2402"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL == 2 */]]></Line>
      <Line Number="2403"><![CDATA[]]></Line>
      <Line Number="2404"><![CDATA[		// TEMPLATE FUNCTION push_heap]]></Line>
      <Line Number="2405"><![CDATA[template<class _RanIt,]]></Line>
      <Line Number="2406"><![CDATA[	class _Diff,]]></Line>
      <Line Number="2407"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="2408"><![CDATA[	void _Push_heap(_RanIt _First, _Diff _Hole,]]></Line>
      <Line Number="2409"><![CDATA[		_Diff _Top, _Ty && _Val)]]></Line>
      <Line Number="2410"><![CDATA[	{	// percolate _Hole to _Top or where _Val belongs, using operator<]]></Line>
      <Line Number="2411"><![CDATA[	for (_Diff _Idx = (_Hole - 1) / 2;]]></Line>
      <Line Number="2412"><![CDATA[		_Top < _Hole && _DEBUG_LT(*(_First + _Idx), _Val);]]></Line>
      <Line Number="2413"><![CDATA[		_Idx = (_Hole - 1) / 2)]]></Line>
      <Line Number="2414"><![CDATA[		{	// move _Hole up to parent]]></Line>
      <Line Number="2415"><![CDATA[		*(_First + _Hole) = _Move(*(_First + _Idx));]]></Line>
      <Line Number="2416"><![CDATA[		_Hole = _Idx;]]></Line>
      <Line Number="2417"><![CDATA[		}]]></Line>
      <Line Number="2418"><![CDATA[]]></Line>
      <Line Number="2419"><![CDATA[	*(_First + _Hole) = _Move(_Val);	// drop _Val into final hole]]></Line>
      <Line Number="2420"><![CDATA[	}]]></Line>
      <Line Number="2421"><![CDATA[]]></Line>
      <Line Number="2422"><![CDATA[template<class _RanIt,]]></Line>
      <Line Number="2423"><![CDATA[	class _Diff,]]></Line>
      <Line Number="2424"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="2425"><![CDATA[	void _Push_heap_0(_RanIt _First, _RanIt _Last, _Diff *, _Ty *)]]></Line>
      <Line Number="2426"><![CDATA[	{	// push *_Last onto heap at [_First, _Last), using operator<]]></Line>
      <Line Number="2427"><![CDATA[	_Diff _Count = _Last - _First;]]></Line>
      <Line Number="2428"><![CDATA[	if (0 < _Count)]]></Line>
      <Line Number="2429"><![CDATA[		{	// worth doing, percolate *_Last]]></Line>
      <Line Number="2430"><![CDATA[		_Ty _Val = _Move(*_Last);]]></Line>
      <Line Number="2431"><![CDATA[		_Push_heap(_First, _Count, _Diff(0), _Move(_Val));]]></Line>
      <Line Number="2432"><![CDATA[		}]]></Line>
      <Line Number="2433"><![CDATA[	}]]></Line>
      <Line Number="2434"><![CDATA[]]></Line>
      <Line Number="2435"><![CDATA[template<class _RanIt> inline]]></Line>
      <Line Number="2436"><![CDATA[	void push_heap(_RanIt _First, _RanIt _Last)]]></Line>
      <Line Number="2437"><![CDATA[	{	// push *(_Last - 1) onto heap at [_First, _Last - 1), using operator<]]></Line>
      <Line Number="2438"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="2439"><![CDATA[	if (_First != _Last)]]></Line>
      <Line Number="2440"><![CDATA[		{	// check and push to nontrivial heap]]></Line>
      <Line Number="2441"><![CDATA[		--_Last;]]></Line>
      <Line Number="2442"><![CDATA[		_DEBUG_HEAP(_First, _Last);]]></Line>
      <Line Number="2443"><![CDATA[		_Push_heap_0(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="2444"><![CDATA[			_Dist_type(_First), _Val_type(_First));]]></Line>
      <Line Number="2445"><![CDATA[		}]]></Line>
      <Line Number="2446"><![CDATA[	}]]></Line>
      <Line Number="2447"><![CDATA[]]></Line>
      <Line Number="2448"><![CDATA[		// TEMPLATE FUNCTION push_heap WITH PRED]]></Line>
      <Line Number="2449"><![CDATA[template<class _RanIt,]]></Line>
      <Line Number="2450"><![CDATA[	class _Diff,]]></Line>
      <Line Number="2451"><![CDATA[	class _Ty,]]></Line>
      <Line Number="2452"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="2453"><![CDATA[	void _Push_heap(_RanIt _First, _Diff _Hole,]]></Line>
      <Line Number="2454"><![CDATA[		_Diff _Top, _Ty && _Val, _Pr _Pred)]]></Line>
      <Line Number="2455"><![CDATA[	{	// percolate _Hole to _Top or where _Val belongs, using operator<]]></Line>
      <Line Number="2456"><![CDATA[	for (_Diff _Idx = (_Hole - 1) / 2;]]></Line>
      <Line Number="2457"><![CDATA[		_Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val);]]></Line>
      <Line Number="2458"><![CDATA[		_Idx = (_Hole - 1) / 2)]]></Line>
      <Line Number="2459"><![CDATA[		{	// move _Hole up to parent]]></Line>
      <Line Number="2460"><![CDATA[		*(_First + _Hole) = _Move(*(_First + _Idx));]]></Line>
      <Line Number="2461"><![CDATA[		_Hole = _Idx;]]></Line>
      <Line Number="2462"><![CDATA[		}]]></Line>
      <Line Number="2463"><![CDATA[]]></Line>
      <Line Number="2464"><![CDATA[	*(_First + _Hole) = _Move(_Val);	// drop _Val into final hole]]></Line>
      <Line Number="2465"><![CDATA[	}]]></Line>
      <Line Number="2466"><![CDATA[]]></Line>
      <Line Number="2467"><![CDATA[template<class _RanIt,]]></Line>
      <Line Number="2468"><![CDATA[	class _Diff,]]></Line>
      <Line Number="2469"><![CDATA[	class _Ty,]]></Line>
      <Line Number="2470"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="2471"><![CDATA[	void _Push_heap_0(_RanIt _First, _RanIt _Last, _Pr _Pred, _Diff *, _Ty *)]]></Line>
      <Line Number="2472"><![CDATA[	{	// push *_Last onto heap at [_First, _Last), using _Pred]]></Line>
      <Line Number="2473"><![CDATA[	_Diff _Count = _Last - _First;]]></Line>
      <Line Number="2474"><![CDATA[	if (0 < _Count)]]></Line>
      <Line Number="2475"><![CDATA[		{	// worth doing, percolate *_Last]]></Line>
      <Line Number="2476"><![CDATA[		_Ty _Val = _Move(*_Last);]]></Line>
      <Line Number="2477"><![CDATA[		_Push_heap(_First, _Count, _Diff(0), _Move(_Val), _Pred);]]></Line>
      <Line Number="2478"><![CDATA[		}]]></Line>
      <Line Number="2479"><![CDATA[	}]]></Line>
      <Line Number="2480"><![CDATA[]]></Line>
      <Line Number="2481"><![CDATA[template<class _RanIt,]]></Line>
      <Line Number="2482"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="2483"><![CDATA[	void push_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)]]></Line>
      <Line Number="2484"><![CDATA[	{	// push *(_Last - 1) onto heap at [_First, _Last - 1), using _Pred]]></Line>
      <Line Number="2485"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="2486"><![CDATA[	_DEBUG_POINTER(_Pred);]]></Line>
      <Line Number="2487"><![CDATA[	if (_First != _Last)]]></Line>
      <Line Number="2488"><![CDATA[		{	// check and push to nontrivial heap]]></Line>
      <Line Number="2489"><![CDATA[		--_Last;]]></Line>
      <Line Number="2490"><![CDATA[		_DEBUG_HEAP_PRED(_First, _Last, _Pred);]]></Line>
      <Line Number="2491"><![CDATA[		_Push_heap_0(_Unchecked(_First), _Unchecked(_Last), _Pred,]]></Line>
      <Line Number="2492"><![CDATA[			_Dist_type(_First), _Val_type(_First));]]></Line>
      <Line Number="2493"><![CDATA[		}]]></Line>
      <Line Number="2494"><![CDATA[	}]]></Line>
      <Line Number="2495"><![CDATA[]]></Line>
      <Line Number="2496"><![CDATA[		// TEMPLATE FUNCTION pop_heap]]></Line>
      <Line Number="2497"><![CDATA[template<class _RanIt,]]></Line>
      <Line Number="2498"><![CDATA[	class _Diff,]]></Line>
      <Line Number="2499"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="2500"><![CDATA[	void _Adjust_heap(_RanIt _First, _Diff _Hole, _Diff _Bottom,]]></Line>
      <Line Number="2501"><![CDATA[		_Ty && _Val)]]></Line>
      <Line Number="2502"><![CDATA[	{	// percolate _Hole to _Bottom, then push _Val, using operator<]]></Line>
      <Line Number="2503"><![CDATA[	_Diff _Top = _Hole;]]></Line>
      <Line Number="2504"><![CDATA[	_Diff _Idx = 2 * _Hole + 2;]]></Line>
      <Line Number="2505"><![CDATA[]]></Line>
      <Line Number="2506"><![CDATA[	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)]]></Line>
      <Line Number="2507"><![CDATA[		{	// move _Hole down to larger child]]></Line>
      <Line Number="2508"><![CDATA[		if (_DEBUG_LT(*(_First + _Idx), *(_First + (_Idx - 1))))]]></Line>
      <Line Number="2509"><![CDATA[			--_Idx;]]></Line>
      <Line Number="2510"><![CDATA[		*(_First + _Hole) = _Move(*(_First + _Idx));]]></Line>
      <Line Number="2511"><![CDATA[		_Hole = _Idx;]]></Line>
      <Line Number="2512"><![CDATA[		}]]></Line>
      <Line Number="2513"><![CDATA[]]></Line>
      <Line Number="2514"><![CDATA[	if (_Idx == _Bottom)]]></Line>
      <Line Number="2515"><![CDATA[		{	// only child at bottom, move _Hole down to it]]></Line>
      <Line Number="2516"><![CDATA[		*(_First + _Hole) = _Move(*(_First + (_Bottom - 1)));]]></Line>
      <Line Number="2517"><![CDATA[		_Hole = _Bottom - 1;]]></Line>
      <Line Number="2518"><![CDATA[		}]]></Line>
      <Line Number="2519"><![CDATA[	_Push_heap(_First, _Hole, _Top, _Move(_Val));]]></Line>
      <Line Number="2520"><![CDATA[	}]]></Line>
      <Line Number="2521"><![CDATA[]]></Line>
      <Line Number="2522"><![CDATA[template<class _RanIt,]]></Line>
      <Line Number="2523"><![CDATA[	class _Diff,]]></Line>
      <Line Number="2524"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="2525"><![CDATA[	void _Pop_heap(_RanIt _First, _RanIt _Last, _RanIt _Dest,]]></Line>
      <Line Number="2526"><![CDATA[		_Ty && _Val, _Diff *)]]></Line>
      <Line Number="2527"><![CDATA[	{	// pop *_First to *_Dest and reheap, using operator<]]></Line>
      <Line Number="2528"><![CDATA[	*_Dest = _Move(*_First);]]></Line>
      <Line Number="2529"><![CDATA[	_Adjust_heap(_First, _Diff(0), _Diff(_Last - _First),]]></Line>
      <Line Number="2530"><![CDATA[		_Move(_Val));]]></Line>
      <Line Number="2531"><![CDATA[	}]]></Line>
      <Line Number="2532"><![CDATA[]]></Line>
      <Line Number="2533"><![CDATA[template<class _RanIt,]]></Line>
      <Line Number="2534"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="2535"><![CDATA[	void _Pop_heap_0(_RanIt _First, _RanIt _Last, _Ty *)]]></Line>
      <Line Number="2536"><![CDATA[	{	// pop *_First to *(_Last - 1) and reheap, using operator<]]></Line>
      <Line Number="2537"><![CDATA[	_Ty _Val = _Move(*(_Last - 1));]]></Line>
      <Line Number="2538"><![CDATA[	_Pop_heap(_First, _Last - 1, _Last - 1,]]></Line>
      <Line Number="2539"><![CDATA[		_Move(_Val), _Dist_type(_First));]]></Line>
      <Line Number="2540"><![CDATA[	}]]></Line>
      <Line Number="2541"><![CDATA[]]></Line>
      <Line Number="2542"><![CDATA[template<class _RanIt> inline]]></Line>
      <Line Number="2543"><![CDATA[	void _Pop_heap(_RanIt _First, _RanIt _Last)]]></Line>
      <Line Number="2544"><![CDATA[	{	// pop *_First to *(_Last - 1) and reheap, using operator<]]></Line>
      <Line Number="2545"><![CDATA[	_Pop_heap_0(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="2546"><![CDATA[		_Val_type(_First));]]></Line>
      <Line Number="2547"><![CDATA[	}]]></Line>
      <Line Number="2548"><![CDATA[]]></Line>
      <Line Number="2549"><![CDATA[template<class _RanIt> inline]]></Line>
      <Line Number="2550"><![CDATA[	void pop_heap(_RanIt _First, _RanIt _Last)]]></Line>
      <Line Number="2551"><![CDATA[	{	// pop *_First to *(_Last - 1) and reheap, using operator<]]></Line>
      <Line Number="2552"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="2553"><![CDATA[	_DEBUG_HEAP(_First, _Last);]]></Line>
      <Line Number="2554"><![CDATA[	if (1 < _Last - _First)]]></Line>
      <Line Number="2555"><![CDATA[		_Pop_heap(_Unchecked(_First), _Unchecked(_Last));]]></Line>
      <Line Number="2556"><![CDATA[	}]]></Line>
      <Line Number="2557"><![CDATA[]]></Line>
      <Line Number="2558"><![CDATA[		// TEMPLATE FUNCTION pop_heap WITH PRED]]></Line>
      <Line Number="2559"><![CDATA[template<class _RanIt,]]></Line>
      <Line Number="2560"><![CDATA[	class _Diff,]]></Line>
      <Line Number="2561"><![CDATA[	class _Ty,]]></Line>
      <Line Number="2562"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="2563"><![CDATA[	void _Adjust_heap(_RanIt _First, _Diff _Hole, _Diff _Bottom,]]></Line>
      <Line Number="2564"><![CDATA[		_Ty && _Val, _Pr _Pred)]]></Line>
      <Line Number="2565"><![CDATA[	{	// percolate _Hole to _Bottom, then push _Val, using _Pred]]></Line>
      <Line Number="2566"><![CDATA[	_Diff _Top = _Hole;]]></Line>
      <Line Number="2567"><![CDATA[	_Diff _Idx = 2 * _Hole + 2;]]></Line>
      <Line Number="2568"><![CDATA[]]></Line>
      <Line Number="2569"><![CDATA[	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)]]></Line>
      <Line Number="2570"><![CDATA[		{	// move _Hole down to larger child]]></Line>
      <Line Number="2571"><![CDATA[		if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1))))]]></Line>
      <Line Number="2572"><![CDATA[			--_Idx;]]></Line>
      <Line Number="2573"><![CDATA[		*(_First + _Hole) = _Move(*(_First + _Idx));]]></Line>
      <Line Number="2574"><![CDATA[		_Hole = _Idx;]]></Line>
      <Line Number="2575"><![CDATA[		}]]></Line>
      <Line Number="2576"><![CDATA[]]></Line>
      <Line Number="2577"><![CDATA[	if (_Idx == _Bottom)]]></Line>
      <Line Number="2578"><![CDATA[		{	// only child at bottom, move _Hole down to it]]></Line>
      <Line Number="2579"><![CDATA[		*(_First + _Hole) = _Move(*(_First + (_Bottom - 1)));]]></Line>
      <Line Number="2580"><![CDATA[		_Hole = _Bottom - 1;]]></Line>
      <Line Number="2581"><![CDATA[		}]]></Line>
      <Line Number="2582"><![CDATA[	_Push_heap(_First, _Hole, _Top, _Move(_Val), _Pred);]]></Line>
      <Line Number="2583"><![CDATA[	}]]></Line>
      <Line Number="2584"><![CDATA[]]></Line>
      <Line Number="2585"><![CDATA[template<class _RanIt,]]></Line>
      <Line Number="2586"><![CDATA[	class _Diff,]]></Line>
      <Line Number="2587"><![CDATA[	class _Ty,]]></Line>
      <Line Number="2588"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="2589"><![CDATA[	void _Pop_heap(_RanIt _First, _RanIt _Last, _RanIt _Dest,]]></Line>
      <Line Number="2590"><![CDATA[		_Ty && _Val, _Pr _Pred, _Diff *)]]></Line>
      <Line Number="2591"><![CDATA[	{	// pop *_First to *_Dest and reheap, using _Pred]]></Line>
      <Line Number="2592"><![CDATA[	*_Dest = _Move(*_First);]]></Line>
      <Line Number="2593"><![CDATA[	_Adjust_heap(_First, _Diff(0), _Diff(_Last - _First),]]></Line>
      <Line Number="2594"><![CDATA[		_Move(_Val), _Pred);]]></Line>
      <Line Number="2595"><![CDATA[	}]]></Line>
      <Line Number="2596"><![CDATA[]]></Line>
      <Line Number="2597"><![CDATA[template<class _RanIt,]]></Line>
      <Line Number="2598"><![CDATA[	class _Ty,]]></Line>
      <Line Number="2599"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="2600"><![CDATA[	void _Pop_heap_0(_RanIt _First, _RanIt _Last, _Pr _Pred, _Ty *)]]></Line>
      <Line Number="2601"><![CDATA[	{	// pop *_First to *(_Last - 1) and reheap, using _Pred]]></Line>
      <Line Number="2602"><![CDATA[	_Ty _Val = _Move(*(_Last - 1));]]></Line>
      <Line Number="2603"><![CDATA[	_Pop_heap(_First, _Last - 1, _Last - 1,]]></Line>
      <Line Number="2604"><![CDATA[		_Move(_Val), _Pred, _Dist_type(_First));]]></Line>
      <Line Number="2605"><![CDATA[	}]]></Line>
      <Line Number="2606"><![CDATA[]]></Line>
      <Line Number="2607"><![CDATA[template<class _RanIt,]]></Line>
      <Line Number="2608"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="2609"><![CDATA[	void _Pop_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)]]></Line>
      <Line Number="2610"><![CDATA[	{	// pop *_First to *(_Last - 1) and reheap, using _Pred]]></Line>
      <Line Number="2611"><![CDATA[	_Pop_heap_0(_Unchecked(_First), _Unchecked(_Last), _Pred,]]></Line>
      <Line Number="2612"><![CDATA[		_Val_type(_First));]]></Line>
      <Line Number="2613"><![CDATA[	}]]></Line>
      <Line Number="2614"><![CDATA[]]></Line>
      <Line Number="2615"><![CDATA[template<class _RanIt,]]></Line>
      <Line Number="2616"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="2617"><![CDATA[	void pop_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)]]></Line>
      <Line Number="2618"><![CDATA[	{	// pop *_First to *(_Last - 1) and reheap, using _Pred]]></Line>
      <Line Number="2619"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="2620"><![CDATA[	_DEBUG_POINTER(_Pred);]]></Line>
      <Line Number="2621"><![CDATA[	_DEBUG_HEAP_PRED(_First, _Last, _Pred);]]></Line>
      <Line Number="2622"><![CDATA[	if (1 < _Last - _First)]]></Line>
      <Line Number="2623"><![CDATA[		_Pop_heap(_Unchecked(_First), _Unchecked(_Last), _Pred);]]></Line>
      <Line Number="2624"><![CDATA[	}]]></Line>
      <Line Number="2625"><![CDATA[]]></Line>
      <Line Number="2626"><![CDATA[		// TEMPLATE FUNCTION make_heap]]></Line>
      <Line Number="2627"><![CDATA[template<class _RanIt,]]></Line>
      <Line Number="2628"><![CDATA[	class _Diff,]]></Line>
      <Line Number="2629"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="2630"><![CDATA[	void _Make_heap(_RanIt _First, _RanIt _Last, _Diff *, _Ty *)]]></Line>
      <Line Number="2631"><![CDATA[	{	// make nontrivial [_First, _Last) into a heap, using operator<]]></Line>
      <Line Number="2632"><![CDATA[	_Diff _Bottom = _Last - _First;]]></Line>
      <Line Number="2633"><![CDATA[]]></Line>
      <Line Number="2634"><![CDATA[	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )]]></Line>
      <Line Number="2635"><![CDATA[		{	// reheap top half, bottom to top]]></Line>
      <Line Number="2636"><![CDATA[		--_Hole;]]></Line>
      <Line Number="2637"><![CDATA[		_Ty _Val = _Move(*(_First + _Hole));]]></Line>
      <Line Number="2638"><![CDATA[		_Adjust_heap(_First, _Hole, _Bottom,]]></Line>
      <Line Number="2639"><![CDATA[			_Move(_Val));]]></Line>
      <Line Number="2640"><![CDATA[		}]]></Line>
      <Line Number="2641"><![CDATA[	}]]></Line>
      <Line Number="2642"><![CDATA[]]></Line>
      <Line Number="2643"><![CDATA[template<class _RanIt> inline]]></Line>
      <Line Number="2644"><![CDATA[	void make_heap(_RanIt _First, _RanIt _Last)]]></Line>
      <Line Number="2645"><![CDATA[	{	// make [_First, _Last) into a heap, using operator<]]></Line>
      <Line Number="2646"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="2647"><![CDATA[	if (1 < _Last - _First)]]></Line>
      <Line Number="2648"><![CDATA[		_Make_heap(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="2649"><![CDATA[			_Dist_type(_First), _Val_type(_First));]]></Line>
      <Line Number="2650"><![CDATA[	}]]></Line>
      <Line Number="2651"><![CDATA[]]></Line>
      <Line Number="2652"><![CDATA[		// TEMPLATE FUNCTION make_heap WITH PRED]]></Line>
      <Line Number="2653"><![CDATA[template<class _RanIt,]]></Line>
      <Line Number="2654"><![CDATA[	class _Diff,]]></Line>
      <Line Number="2655"><![CDATA[	class _Ty,]]></Line>
      <Line Number="2656"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="2657"><![CDATA[	void _Make_heap(_RanIt _First, _RanIt _Last, _Pr _Pred, _Diff *, _Ty *)]]></Line>
      <Line Number="2658"><![CDATA[	{	// make nontrivial [_First, _Last) into a heap, using _Pred]]></Line>
      <Line Number="2659"><![CDATA[	_Diff _Bottom = _Last - _First;]]></Line>
      <Line Number="2660"><![CDATA[	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )]]></Line>
      <Line Number="2661"><![CDATA[		{	// reheap top half, bottom to top]]></Line>
      <Line Number="2662"><![CDATA[		--_Hole;]]></Line>
      <Line Number="2663"><![CDATA[		_Ty _Val = _Move(*(_First + _Hole));]]></Line>
      <Line Number="2664"><![CDATA[		_Adjust_heap(_First, _Hole, _Bottom,]]></Line>
      <Line Number="2665"><![CDATA[			_Move(_Val), _Pred);]]></Line>
      <Line Number="2666"><![CDATA[		}]]></Line>
      <Line Number="2667"><![CDATA[	}]]></Line>
      <Line Number="2668"><![CDATA[]]></Line>
      <Line Number="2669"><![CDATA[template<class _RanIt,]]></Line>
      <Line Number="2670"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="2671"><![CDATA[	void make_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)]]></Line>
      <Line Number="2672"><![CDATA[	{	// make [_First, _Last) into a heap, using _Pred]]></Line>
      <Line Number="2673"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="2674"><![CDATA[	_DEBUG_POINTER(_Pred);]]></Line>
      <Line Number="2675"><![CDATA[	if (1 < _Last - _First)]]></Line>
      <Line Number="2676"><![CDATA[		_Make_heap(_Unchecked(_First), _Unchecked(_Last), _Pred,]]></Line>
      <Line Number="2677"><![CDATA[			_Dist_type(_First), _Val_type(_First));]]></Line>
      <Line Number="2678"><![CDATA[	}]]></Line>
      <Line Number="2679"><![CDATA[]]></Line>
      <Line Number="2680"><![CDATA[		// TEMPLATE FUNCTION sort_heap]]></Line>
      <Line Number="2681"><![CDATA[template<class _RanIt> inline]]></Line>
      <Line Number="2682"><![CDATA[	void _Sort_heap(_RanIt _First, _RanIt _Last)]]></Line>
      <Line Number="2683"><![CDATA[	{	// order heap by repeatedly popping, using operator<]]></Line>
      <Line Number="2684"><![CDATA[	for (; 1 < _Last - _First; --_Last)]]></Line>
      <Line Number="2685"><![CDATA[		_Pop_heap(_First, _Last);]]></Line>
      <Line Number="2686"><![CDATA[	}]]></Line>
      <Line Number="2687"><![CDATA[]]></Line>
      <Line Number="2688"><![CDATA[template<class _RanIt> inline]]></Line>
      <Line Number="2689"><![CDATA[	void sort_heap(_RanIt _First, _RanIt _Last)]]></Line>
      <Line Number="2690"><![CDATA[	{	// order heap by repeatedly popping, using operator<]]></Line>
      <Line Number="2691"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="2692"><![CDATA[	_DEBUG_HEAP(_First, _Last);]]></Line>
      <Line Number="2693"><![CDATA[	_Sort_heap(_Unchecked(_First), _Unchecked(_Last));]]></Line>
      <Line Number="2694"><![CDATA[	}]]></Line>
      <Line Number="2695"><![CDATA[]]></Line>
      <Line Number="2696"><![CDATA[		// TEMPLATE FUNCTION sort_heap WITH PRED]]></Line>
      <Line Number="2697"><![CDATA[template<class _RanIt,]]></Line>
      <Line Number="2698"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="2699"><![CDATA[	void _Sort_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)]]></Line>
      <Line Number="2700"><![CDATA[	{	// order heap by repeatedly popping, using _Pred]]></Line>
      <Line Number="2701"><![CDATA[	for (; 1 < _Last - _First; --_Last)]]></Line>
      <Line Number="2702"><![CDATA[		_Pop_heap(_First, _Last, _Pred);]]></Line>
      <Line Number="2703"><![CDATA[	}]]></Line>
      <Line Number="2704"><![CDATA[]]></Line>
      <Line Number="2705"><![CDATA[template<class _RanIt,]]></Line>
      <Line Number="2706"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="2707"><![CDATA[	void sort_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)]]></Line>
      <Line Number="2708"><![CDATA[	{	// order heap by repeatedly popping, using _Pred]]></Line>
      <Line Number="2709"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="2710"><![CDATA[	_DEBUG_POINTER(_Pred);]]></Line>
      <Line Number="2711"><![CDATA[	_DEBUG_HEAP_PRED(_First, _Last, _Pred);]]></Line>
      <Line Number="2712"><![CDATA[	_Sort_heap(_Unchecked(_First), _Unchecked(_Last), _Pred);]]></Line>
      <Line Number="2713"><![CDATA[	}]]></Line>
      <Line Number="2714"><![CDATA[]]></Line>
      <Line Number="2715"><![CDATA[		// TEMPLATE FUNCTION lower_bound]]></Line>
      <Line Number="2716"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="2717"><![CDATA[	class _Ty,]]></Line>
      <Line Number="2718"><![CDATA[	class _Diff> inline]]></Line>
      <Line Number="2719"><![CDATA[	_FwdIt _Lower_bound(_FwdIt _First, _FwdIt _Last, const _Ty& _Val, _Diff *)]]></Line>
      <Line Number="2720"><![CDATA[	{	// find first element not before _Val, using operator<]]></Line>
      <Line Number="2721"><![CDATA[	_Diff _Count = 0;]]></Line>
      <Line Number="2722"><![CDATA[	_Distance(_First, _Last, _Count);]]></Line>
      <Line Number="2723"><![CDATA[]]></Line>
      <Line Number="2724"><![CDATA[	for (; 0 < _Count; )]]></Line>
      <Line Number="2725"><![CDATA[		{	// divide and conquer, find half that contains answer]]></Line>
      <Line Number="2726"><![CDATA[		_Diff _Count2 = _Count / 2;]]></Line>
      <Line Number="2727"><![CDATA[		_FwdIt _Mid = _First;]]></Line>
      <Line Number="2728"><![CDATA[		_STD advance(_Mid, _Count2);]]></Line>
      <Line Number="2729"><![CDATA[]]></Line>
      <Line Number="2730"><![CDATA[		if (*_Mid < _Val)]]></Line>
      <Line Number="2731"><![CDATA[//		if (_DEBUG_LT(*_Mid, _Val))]]></Line>
      <Line Number="2732"><![CDATA[			{	// try top half]]></Line>
      <Line Number="2733"><![CDATA[			_First = ++_Mid;]]></Line>
      <Line Number="2734"><![CDATA[			_Count -= _Count2 + 1;]]></Line>
      <Line Number="2735"><![CDATA[			}]]></Line>
      <Line Number="2736"><![CDATA[		else]]></Line>
      <Line Number="2737"><![CDATA[			_Count = _Count2;]]></Line>
      <Line Number="2738"><![CDATA[		}]]></Line>
      <Line Number="2739"><![CDATA[	return (_First);]]></Line>
      <Line Number="2740"><![CDATA[	}]]></Line>
      <Line Number="2741"><![CDATA[]]></Line>
      <Line Number="2742"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="2743"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="2744"><![CDATA[	_FwdIt lower_bound(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)]]></Line>
      <Line Number="2745"><![CDATA[	{	// find first element not before _Val, using operator<]]></Line>
      <Line Number="2746"><![CDATA[//	_DEBUG_ORDER(_First, _Last);]]></Line>
      <Line Number="2747"><![CDATA[	return (_Rechecked(_First,]]></Line>
      <Line Number="2748"><![CDATA[		_Lower_bound(_Unchecked(_First), _Unchecked(_Last), _Val,]]></Line>
      <Line Number="2749"><![CDATA[			_Dist_type(_First))));]]></Line>
      <Line Number="2750"><![CDATA[	}]]></Line>
      <Line Number="2751"><![CDATA[]]></Line>
      <Line Number="2752"><![CDATA[		// TEMPLATE FUNCTION lower_bound WITH PRED]]></Line>
      <Line Number="2753"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="2754"><![CDATA[	class _Ty,]]></Line>
      <Line Number="2755"><![CDATA[	class _Diff,]]></Line>
      <Line Number="2756"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="2757"><![CDATA[	_FwdIt _Lower_bound(_FwdIt _First, _FwdIt _Last,]]></Line>
      <Line Number="2758"><![CDATA[		const _Ty& _Val, _Pr _Pred, _Diff *)]]></Line>
      <Line Number="2759"><![CDATA[	{	// find first element not before _Val, using _Pred]]></Line>
      <Line Number="2760"><![CDATA[	_Diff _Count = 0;]]></Line>
      <Line Number="2761"><![CDATA[	_Distance(_First, _Last, _Count);]]></Line>
      <Line Number="2762"><![CDATA[	for (; 0 < _Count; )]]></Line>
      <Line Number="2763"><![CDATA[		{	// divide and conquer, find half that contains answer]]></Line>
      <Line Number="2764"><![CDATA[		_Diff _Count2 = _Count / 2;]]></Line>
      <Line Number="2765"><![CDATA[		_FwdIt _Mid = _First;]]></Line>
      <Line Number="2766"><![CDATA[		_STD advance(_Mid, _Count2);]]></Line>
      <Line Number="2767"><![CDATA[]]></Line>
      <Line Number="2768"><![CDATA[		if (_Pred(*_Mid, _Val))]]></Line>
      <Line Number="2769"><![CDATA[//		if (_DEBUG_LT_PRED(_Pred, *_Mid, _Val))]]></Line>
      <Line Number="2770"><![CDATA[			{	// try top half]]></Line>
      <Line Number="2771"><![CDATA[			_First = ++_Mid;]]></Line>
      <Line Number="2772"><![CDATA[			_Count -= _Count2 + 1;]]></Line>
      <Line Number="2773"><![CDATA[			}]]></Line>
      <Line Number="2774"><![CDATA[		else]]></Line>
      <Line Number="2775"><![CDATA[			_Count = _Count2;]]></Line>
      <Line Number="2776"><![CDATA[		}]]></Line>
      <Line Number="2777"><![CDATA[	return (_First);]]></Line>
      <Line Number="2778"><![CDATA[	}]]></Line>
      <Line Number="2779"><![CDATA[]]></Line>
      <Line Number="2780"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="2781"><![CDATA[	class _Ty,]]></Line>
      <Line Number="2782"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="2783"><![CDATA[	_FwdIt lower_bound(_FwdIt _First, _FwdIt _Last,]]></Line>
      <Line Number="2784"><![CDATA[		const _Ty& _Val, _Pr _Pred)]]></Line>
      <Line Number="2785"><![CDATA[	{	// find first element not before _Val, using _Pred]]></Line>
      <Line Number="2786"><![CDATA[//	_DEBUG_ORDER_PRED(_First, _Last, _Pred);]]></Line>
      <Line Number="2787"><![CDATA[	return (_Rechecked(_First,]]></Line>
      <Line Number="2788"><![CDATA[		_Lower_bound(_Unchecked(_First), _Unchecked(_Last), _Val, _Pred,]]></Line>
      <Line Number="2789"><![CDATA[			_Dist_type(_First))));]]></Line>
      <Line Number="2790"><![CDATA[	}]]></Line>
      <Line Number="2791"><![CDATA[]]></Line>
      <Line Number="2792"><![CDATA[		// TEMPLATE FUNCTION upper_bound]]></Line>
      <Line Number="2793"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="2794"><![CDATA[	class _Ty,]]></Line>
      <Line Number="2795"><![CDATA[	class _Diff> inline]]></Line>
      <Line Number="2796"><![CDATA[	_FwdIt _Upper_bound(_FwdIt _First, _FwdIt _Last, const _Ty& _Val, _Diff *)]]></Line>
      <Line Number="2797"><![CDATA[	{	// find first element that _Val is before, using operator<]]></Line>
      <Line Number="2798"><![CDATA[	_Diff _Count = 0;]]></Line>
      <Line Number="2799"><![CDATA[	_Distance(_First, _Last, _Count);]]></Line>
      <Line Number="2800"><![CDATA[	for (; 0 < _Count; )]]></Line>
      <Line Number="2801"><![CDATA[		{	// divide and conquer, find half that contains answer]]></Line>
      <Line Number="2802"><![CDATA[		_Diff _Count2 = _Count / 2;]]></Line>
      <Line Number="2803"><![CDATA[		_FwdIt _Mid = _First;]]></Line>
      <Line Number="2804"><![CDATA[		_STD advance(_Mid, _Count2);]]></Line>
      <Line Number="2805"><![CDATA[]]></Line>
      <Line Number="2806"><![CDATA[		if (!(_Val < *_Mid))]]></Line>
      <Line Number="2807"><![CDATA[//		if (!_DEBUG_LT(_Val, *_Mid))]]></Line>
      <Line Number="2808"><![CDATA[			{	// try top half]]></Line>
      <Line Number="2809"><![CDATA[			_First = ++_Mid;]]></Line>
      <Line Number="2810"><![CDATA[			_Count -= _Count2 + 1;]]></Line>
      <Line Number="2811"><![CDATA[			}]]></Line>
      <Line Number="2812"><![CDATA[		else]]></Line>
      <Line Number="2813"><![CDATA[			_Count = _Count2;]]></Line>
      <Line Number="2814"><![CDATA[		}]]></Line>
      <Line Number="2815"><![CDATA[	return (_First);]]></Line>
      <Line Number="2816"><![CDATA[	}]]></Line>
      <Line Number="2817"><![CDATA[]]></Line>
      <Line Number="2818"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="2819"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="2820"><![CDATA[	_FwdIt upper_bound(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)]]></Line>
      <Line Number="2821"><![CDATA[	{	// find first element that _Val is before, using operator<]]></Line>
      <Line Number="2822"><![CDATA[//	_DEBUG_ORDER(_First, _Last);]]></Line>
      <Line Number="2823"><![CDATA[	return (_Rechecked(_First,]]></Line>
      <Line Number="2824"><![CDATA[		_Upper_bound(_Unchecked(_First), _Unchecked(_Last), _Val,]]></Line>
      <Line Number="2825"><![CDATA[			_Dist_type(_First))));]]></Line>
      <Line Number="2826"><![CDATA[	}]]></Line>
      <Line Number="2827"><![CDATA[]]></Line>
      <Line Number="2828"><![CDATA[		// TEMPLATE FUNCTION upper_bound WITH PRED]]></Line>
      <Line Number="2829"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="2830"><![CDATA[	class _Ty,]]></Line>
      <Line Number="2831"><![CDATA[	class _Diff,]]></Line>
      <Line Number="2832"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="2833"><![CDATA[	_FwdIt _Upper_bound(_FwdIt _First, _FwdIt _Last,]]></Line>
      <Line Number="2834"><![CDATA[		const _Ty& _Val, _Pr _Pred, _Diff *)]]></Line>
      <Line Number="2835"><![CDATA[	{	// find first element that _Val is before, using _Pred]]></Line>
      <Line Number="2836"><![CDATA[	_Diff _Count = 0;]]></Line>
      <Line Number="2837"><![CDATA[	_Distance(_First, _Last, _Count);]]></Line>
      <Line Number="2838"><![CDATA[	for (; 0 < _Count; )]]></Line>
      <Line Number="2839"><![CDATA[		{	// divide and conquer, find half that contains answer]]></Line>
      <Line Number="2840"><![CDATA[		_Diff _Count2 = _Count / 2;]]></Line>
      <Line Number="2841"><![CDATA[		_FwdIt _Mid = _First;]]></Line>
      <Line Number="2842"><![CDATA[		_STD advance(_Mid, _Count2);]]></Line>
      <Line Number="2843"><![CDATA[]]></Line>
      <Line Number="2844"><![CDATA[		if (!_Pred(_Val, *_Mid))]]></Line>
      <Line Number="2845"><![CDATA[//		if (!_DEBUG_LT_PRED(_Pred, _Val, *_Mid))]]></Line>
      <Line Number="2846"><![CDATA[			{	// try top half]]></Line>
      <Line Number="2847"><![CDATA[			_First = ++_Mid;]]></Line>
      <Line Number="2848"><![CDATA[			_Count -= _Count2 + 1;]]></Line>
      <Line Number="2849"><![CDATA[			}]]></Line>
      <Line Number="2850"><![CDATA[		else]]></Line>
      <Line Number="2851"><![CDATA[			_Count = _Count2;]]></Line>
      <Line Number="2852"><![CDATA[		}]]></Line>
      <Line Number="2853"><![CDATA[	return (_First);]]></Line>
      <Line Number="2854"><![CDATA[	}]]></Line>
      <Line Number="2855"><![CDATA[]]></Line>
      <Line Number="2856"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="2857"><![CDATA[	class _Ty,]]></Line>
      <Line Number="2858"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="2859"><![CDATA[	_FwdIt upper_bound(_FwdIt _First, _FwdIt _Last,]]></Line>
      <Line Number="2860"><![CDATA[		const _Ty& _Val, _Pr _Pred)]]></Line>
      <Line Number="2861"><![CDATA[	{	// find first element that _Val is before, using _Pred]]></Line>
      <Line Number="2862"><![CDATA[//	_DEBUG_ORDER_PRED(_First, _Last, _Pred);]]></Line>
      <Line Number="2863"><![CDATA[	return (_Rechecked(_First,]]></Line>
      <Line Number="2864"><![CDATA[		_Upper_bound(_Unchecked(_First), _Unchecked(_Last), _Val, _Pred,]]></Line>
      <Line Number="2865"><![CDATA[			_Dist_type(_First))));]]></Line>
      <Line Number="2866"><![CDATA[	}]]></Line>
      <Line Number="2867"><![CDATA[]]></Line>
      <Line Number="2868"><![CDATA[		// TEMPLATE FUNCTION equal_range]]></Line>
      <Line Number="2869"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="2870"><![CDATA[	class _Ty,]]></Line>
      <Line Number="2871"><![CDATA[	class _Diff> inline]]></Line>
      <Line Number="2872"><![CDATA[	_STD pair<_FwdIt, _FwdIt>]]></Line>
      <Line Number="2873"><![CDATA[		_Equal_range(_FwdIt _First, _FwdIt _Last,]]></Line>
      <Line Number="2874"><![CDATA[			const _Ty& _Val, _Diff *)]]></Line>
      <Line Number="2875"><![CDATA[	{	// find range equivalent to _Val, using operator<]]></Line>
      <Line Number="2876"><![CDATA[	_Diff _Count = 0;]]></Line>
      <Line Number="2877"><![CDATA[	_Distance(_First, _Last, _Count);]]></Line>
      <Line Number="2878"><![CDATA[]]></Line>
      <Line Number="2879"><![CDATA[	for (; 0 < _Count; )]]></Line>
      <Line Number="2880"><![CDATA[		{	// divide and conquer, check midpoint]]></Line>
      <Line Number="2881"><![CDATA[		_Diff _Count2 = _Count / 2;]]></Line>
      <Line Number="2882"><![CDATA[		_FwdIt _Mid = _First;]]></Line>
      <Line Number="2883"><![CDATA[		_STD advance(_Mid, _Count2);]]></Line>
      <Line Number="2884"><![CDATA[]]></Line>
      <Line Number="2885"><![CDATA[		if (_DEBUG_LT(*_Mid, _Val))]]></Line>
      <Line Number="2886"><![CDATA[			{	// range begins above _Mid, loop]]></Line>
      <Line Number="2887"><![CDATA[			_First = ++_Mid;]]></Line>
      <Line Number="2888"><![CDATA[			_Count -= _Count2 + 1;]]></Line>
      <Line Number="2889"><![CDATA[			}]]></Line>
      <Line Number="2890"><![CDATA[		else if (_Val < *_Mid)]]></Line>
      <Line Number="2891"><![CDATA[			_Count = _Count2;	// range in first half, loop]]></Line>
      <Line Number="2892"><![CDATA[		else]]></Line>
      <Line Number="2893"><![CDATA[			{	// range straddles mid, find each end and return]]></Line>
      <Line Number="2894"><![CDATA[			_FwdIt _First2 = _STD lower_bound(_First, _Mid, _Val);]]></Line>
      <Line Number="2895"><![CDATA[			_STD advance(_First, _Count);]]></Line>
      <Line Number="2896"><![CDATA[			_FwdIt _Last2 = _STD upper_bound(++_Mid, _First, _Val);]]></Line>
      <Line Number="2897"><![CDATA[			return (pair<_FwdIt, _FwdIt>(_First2, _Last2));]]></Line>
      <Line Number="2898"><![CDATA[			}]]></Line>
      <Line Number="2899"><![CDATA[		}]]></Line>
      <Line Number="2900"><![CDATA[]]></Line>
      <Line Number="2901"><![CDATA[	return (pair<_FwdIt, _FwdIt>(_First, _First));	// empty range]]></Line>
      <Line Number="2902"><![CDATA[	}]]></Line>
      <Line Number="2903"><![CDATA[]]></Line>
      <Line Number="2904"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="2905"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="2906"><![CDATA[	_STD pair<_FwdIt, _FwdIt>]]></Line>
      <Line Number="2907"><![CDATA[		equal_range(_FwdIt _First, _FwdIt _Last,]]></Line>
      <Line Number="2908"><![CDATA[			const _Ty& _Val)]]></Line>
      <Line Number="2909"><![CDATA[	{	// find range equivalent to _Val, using operator<]]></Line>
      <Line Number="2910"><![CDATA[	_DEBUG_ORDER(_First, _Last);]]></Line>
      <Line Number="2911"><![CDATA[	_STD pair<_UNCHECKED_TYPE(_FwdIt), _UNCHECKED_TYPE(_FwdIt)> _Ans(]]></Line>
      <Line Number="2912"><![CDATA[		_Equal_range(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="2913"><![CDATA[			_Val, _Dist_type(_First)));]]></Line>
      <Line Number="2914"><![CDATA[	return (_STD pair<_FwdIt, _FwdIt>(]]></Line>
      <Line Number="2915"><![CDATA[		_Rechecked(_First, _Ans.first),]]></Line>
      <Line Number="2916"><![CDATA[		_Rechecked(_Last, _Ans.second)));]]></Line>
      <Line Number="2917"><![CDATA[	}]]></Line>
      <Line Number="2918"><![CDATA[]]></Line>
      <Line Number="2919"><![CDATA[		// TEMPLATE FUNCTION equal_range WITH PRED]]></Line>
      <Line Number="2920"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="2921"><![CDATA[	class _Ty,]]></Line>
      <Line Number="2922"><![CDATA[	class _Diff,]]></Line>
      <Line Number="2923"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="2924"><![CDATA[	_STD pair<_FwdIt, _FwdIt>]]></Line>
      <Line Number="2925"><![CDATA[		_Equal_range(_FwdIt _First, _FwdIt _Last,]]></Line>
      <Line Number="2926"><![CDATA[			const _Ty& _Val, _Pr _Pred, _Diff *)]]></Line>
      <Line Number="2927"><![CDATA[	{	// find range equivalent to _Val, using _Pred]]></Line>
      <Line Number="2928"><![CDATA[	_Diff _Count = 0;]]></Line>
      <Line Number="2929"><![CDATA[	_Distance(_First, _Last, _Count);]]></Line>
      <Line Number="2930"><![CDATA[]]></Line>
      <Line Number="2931"><![CDATA[	for (; 0 < _Count; )]]></Line>
      <Line Number="2932"><![CDATA[		{	// divide and conquer, check midpoint]]></Line>
      <Line Number="2933"><![CDATA[		_Diff _Count2 = _Count / 2;]]></Line>
      <Line Number="2934"><![CDATA[		_FwdIt _Mid = _First;]]></Line>
      <Line Number="2935"><![CDATA[		_STD advance(_Mid, _Count2);]]></Line>
      <Line Number="2936"><![CDATA[]]></Line>
      <Line Number="2937"><![CDATA[		if (_DEBUG_LT_PRED(_Pred, *_Mid, _Val))]]></Line>
      <Line Number="2938"><![CDATA[			{	// range begins above _Mid, loop]]></Line>
      <Line Number="2939"><![CDATA[			_First = ++_Mid;]]></Line>
      <Line Number="2940"><![CDATA[			_Count -= _Count2 + 1;]]></Line>
      <Line Number="2941"><![CDATA[			}]]></Line>
      <Line Number="2942"><![CDATA[		else if (_Pred(_Val, *_Mid))]]></Line>
      <Line Number="2943"><![CDATA[			_Count = _Count2;	// range in first half, loop]]></Line>
      <Line Number="2944"><![CDATA[		else]]></Line>
      <Line Number="2945"><![CDATA[			{	// range straddles _Mid, find each end and return]]></Line>
      <Line Number="2946"><![CDATA[			_FwdIt _First2 = _STD lower_bound(_First, _Mid, _Val, _Pred);]]></Line>
      <Line Number="2947"><![CDATA[			_STD advance(_First, _Count);]]></Line>
      <Line Number="2948"><![CDATA[			_FwdIt _Last2 = _STD upper_bound(++_Mid, _First, _Val, _Pred);]]></Line>
      <Line Number="2949"><![CDATA[			return (pair<_FwdIt, _FwdIt>(_First2, _Last2));]]></Line>
      <Line Number="2950"><![CDATA[			}]]></Line>
      <Line Number="2951"><![CDATA[		}]]></Line>
      <Line Number="2952"><![CDATA[]]></Line>
      <Line Number="2953"><![CDATA[	return (pair<_FwdIt, _FwdIt>(_First, _First));	// empty range]]></Line>
      <Line Number="2954"><![CDATA[	}]]></Line>
      <Line Number="2955"><![CDATA[]]></Line>
      <Line Number="2956"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="2957"><![CDATA[	class _Ty,]]></Line>
      <Line Number="2958"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="2959"><![CDATA[	_STD pair<_FwdIt, _FwdIt>]]></Line>
      <Line Number="2960"><![CDATA[		equal_range(_FwdIt _First, _FwdIt _Last,]]></Line>
      <Line Number="2961"><![CDATA[			const _Ty& _Val, _Pr _Pred)]]></Line>
      <Line Number="2962"><![CDATA[	{	// find range equivalent to _Val, using _Pred]]></Line>
      <Line Number="2963"><![CDATA[	_DEBUG_ORDER_PRED(_First, _Last, _Pred);]]></Line>
      <Line Number="2964"><![CDATA[	_STD pair<_UNCHECKED_TYPE(_FwdIt), _UNCHECKED_TYPE(_FwdIt)> _Ans(]]></Line>
      <Line Number="2965"><![CDATA[		_Equal_range(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="2966"><![CDATA[			_Val, _Pred, _Dist_type(_First)));]]></Line>
      <Line Number="2967"><![CDATA[	return (_STD pair<_FwdIt, _FwdIt>(]]></Line>
      <Line Number="2968"><![CDATA[		_Rechecked(_First, _Ans.first),]]></Line>
      <Line Number="2969"><![CDATA[		_Rechecked(_Last, _Ans.second)));]]></Line>
      <Line Number="2970"><![CDATA[	}]]></Line>
      <Line Number="2971"><![CDATA[]]></Line>
      <Line Number="2972"><![CDATA[		// TEMPLATE FUNCTION binary_search]]></Line>
      <Line Number="2973"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="2974"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="2975"><![CDATA[	bool binary_search(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)]]></Line>
      <Line Number="2976"><![CDATA[	{	// test if _Val equivalent to some element, using operator<]]></Line>
      <Line Number="2977"><![CDATA[	_First = _STD lower_bound(_First, _Last, _Val);]]></Line>
      <Line Number="2978"><![CDATA[	return (_First != _Last && !(_Val < *_First));]]></Line>
      <Line Number="2979"><![CDATA[	}]]></Line>
      <Line Number="2980"><![CDATA[]]></Line>
      <Line Number="2981"><![CDATA[		// TEMPLATE FUNCTION binary_search WITH PRED]]></Line>
      <Line Number="2982"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="2983"><![CDATA[	class _Ty,]]></Line>
      <Line Number="2984"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="2985"><![CDATA[	bool binary_search(_FwdIt _First, _FwdIt _Last,]]></Line>
      <Line Number="2986"><![CDATA[		const _Ty& _Val, _Pr _Pred)]]></Line>
      <Line Number="2987"><![CDATA[	{	// test if _Val equivalent to some element, using _Pred]]></Line>
      <Line Number="2988"><![CDATA[	_First = _STD lower_bound(_First, _Last, _Val, _Pred);]]></Line>
      <Line Number="2989"><![CDATA[	return (_First != _Last && !_Pred(_Val, *_First));]]></Line>
      <Line Number="2990"><![CDATA[	}]]></Line>
      <Line Number="2991"><![CDATA[]]></Line>
      <Line Number="2992"><![CDATA[		// TEMPLATE FUNCTION merge]]></Line>
      <Line Number="2993"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="2994"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="2995"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="2996"><![CDATA[	_OutIt _Merge(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="2997"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="2998"><![CDATA[		_OutIt _Dest)]]></Line>
      <Line Number="2999"><![CDATA[	{	// copy merging ranges, both using operator<]]></Line>
      <Line Number="3000"><![CDATA[	for (; _First1 != _Last1 && _First2 != _Last2; ++_Dest)]]></Line>
      <Line Number="3001"><![CDATA[		if (_DEBUG_LT(*_First2, *_First1))]]></Line>
      <Line Number="3002"><![CDATA[			{	// merge first]]></Line>
      <Line Number="3003"><![CDATA[			*_Dest = _Move(*_First2);]]></Line>
      <Line Number="3004"><![CDATA[			++_First2;]]></Line>
      <Line Number="3005"><![CDATA[			}]]></Line>
      <Line Number="3006"><![CDATA[		else]]></Line>
      <Line Number="3007"><![CDATA[			{	// merge second]]></Line>
      <Line Number="3008"><![CDATA[			*_Dest = _Move(*_First1);]]></Line>
      <Line Number="3009"><![CDATA[			++_First1;]]></Line>
      <Line Number="3010"><![CDATA[			}]]></Line>
      <Line Number="3011"><![CDATA[]]></Line>
      <Line Number="3012"><![CDATA[	_Dest = _Move(_First1, _Last1, _Dest);	// copy any tail]]></Line>
      <Line Number="3013"><![CDATA[	return (_Move(_First2, _Last2, _Dest));]]></Line>
      <Line Number="3014"><![CDATA[	}]]></Line>
      <Line Number="3015"><![CDATA[]]></Line>
      <Line Number="3016"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 0]]></Line>
      <Line Number="3017"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="3018"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="3019"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="3020"><![CDATA[	_OutIt merge(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="3021"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="3022"><![CDATA[		_OutIt _Dest)]]></Line>
      <Line Number="3023"><![CDATA[	{	// copy merging ranges, both using operator<]]></Line>
      <Line Number="3024"><![CDATA[	return (_Merge(_Unchecked(_First1), _Unchecked(_Last1),]]></Line>
      <Line Number="3025"><![CDATA[		_Unchecked(_First2), _Unchecked(_Last2),]]></Line>
      <Line Number="3026"><![CDATA[		_Dest));]]></Line>
      <Line Number="3027"><![CDATA[	}]]></Line>
      <Line Number="3028"><![CDATA[]]></Line>
      <Line Number="3029"><![CDATA[ #else /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="3030"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="3031"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="3032"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="3033"><![CDATA[	_OutIt _Merge1(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="3034"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="3035"><![CDATA[		_OutIt _Dest, input_iterator_tag,]]></Line>
      <Line Number="3036"><![CDATA[		input_iterator_tag, output_iterator_tag)]]></Line>
      <Line Number="3037"><![CDATA[	{	// copy merging ranges, both using operator<, arbitrary iterators]]></Line>
      <Line Number="3038"><![CDATA[	return (_Merge(_First1, _Last1,]]></Line>
      <Line Number="3039"><![CDATA[		_First2, _Last2,]]></Line>
      <Line Number="3040"><![CDATA[		_Dest));]]></Line>
      <Line Number="3041"><![CDATA[	}]]></Line>
      <Line Number="3042"><![CDATA[]]></Line>
      <Line Number="3043"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="3044"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="3045"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="3046"><![CDATA[	_OutIt _Merge1(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="3047"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="3048"><![CDATA[		_OutIt _Dest, random_access_iterator_tag,]]></Line>
      <Line Number="3049"><![CDATA[		random_access_iterator_tag, random_access_iterator_tag)]]></Line>
      <Line Number="3050"><![CDATA[	{	// copy merging ranges, both using operator<, random-access iterators]]></Line>
      <Line Number="3051"><![CDATA[	_OutIt _Ans = _Dest + (_Last1 - _First1)]]></Line>
      <Line Number="3052"><![CDATA[		+ (_Last2 - _First2);	// also checks range]]></Line>
      <Line Number="3053"><![CDATA[	_Merge(_First1, _Last1,]]></Line>
      <Line Number="3054"><![CDATA[		_First2, _Last2,]]></Line>
      <Line Number="3055"><![CDATA[		_Dest);]]></Line>
      <Line Number="3056"><![CDATA[	return (_Ans);]]></Line>
      <Line Number="3057"><![CDATA[	}]]></Line>
      <Line Number="3058"><![CDATA[]]></Line>
      <Line Number="3059"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="3060"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="3061"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="3062"><![CDATA[	_OutIt _Merge1(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="3063"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="3064"><![CDATA[		_OutIt _Dest, _STD tr1::true_type)]]></Line>
      <Line Number="3065"><![CDATA[	{	// copy merging ranges, both using operator<, checked dest]]></Line>
      <Line Number="3066"><![CDATA[	return (_Merge1(_First1, _Last1,]]></Line>
      <Line Number="3067"><![CDATA[		_First2, _Last2,]]></Line>
      <Line Number="3068"><![CDATA[		_Dest, _Iter_cat(_First1),]]></Line>
      <Line Number="3069"><![CDATA[		_Iter_cat(_First2), _Iter_cat(_Dest)));]]></Line>
      <Line Number="3070"><![CDATA[	}]]></Line>
      <Line Number="3071"><![CDATA[]]></Line>
      <Line Number="3072"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="3073"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="3074"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="3075"><![CDATA[_SCL_INSECURE_DEPRECATE]]></Line>
      <Line Number="3076"><![CDATA[	_OutIt _Merge1(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="3077"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="3078"><![CDATA[		_OutIt _Dest, _STD tr1::false_type)]]></Line>
      <Line Number="3079"><![CDATA[	{	// copy merging ranges, both using operator<, unchecked dest]]></Line>
      <Line Number="3080"><![CDATA[	return (_Merge1(_First1, _Last1,]]></Line>
      <Line Number="3081"><![CDATA[		_First2, _Last2,]]></Line>
      <Line Number="3082"><![CDATA[		_Dest, _Iter_cat(_First1),]]></Line>
      <Line Number="3083"><![CDATA[		_Iter_cat(_First2), _Iter_cat(_Dest)));]]></Line>
      <Line Number="3084"><![CDATA[	}]]></Line>
      <Line Number="3085"><![CDATA[]]></Line>
      <Line Number="3086"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="3087"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="3088"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="3089"><![CDATA[	_OutIt merge(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="3090"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="3091"><![CDATA[		_OutIt _Dest)]]></Line>
      <Line Number="3092"><![CDATA[	{	// copy merging ranges, both using operator<]]></Line>
      <Line Number="3093"><![CDATA[	_DEBUG_ORDER(_First1, _Last1);]]></Line>
      <Line Number="3094"><![CDATA[	_DEBUG_ORDER(_First2, _Last2);]]></Line>
      <Line Number="3095"><![CDATA[	_DEBUG_POINTER(_Dest);]]></Line>
      <Line Number="3096"><![CDATA[	return (_Merge1(_Unchecked(_First1), _Unchecked(_Last1),]]></Line>
      <Line Number="3097"><![CDATA[		_Unchecked(_First2), _Unchecked(_Last2),]]></Line>
      <Line Number="3098"><![CDATA[		_Dest, _Is_checked(_Dest)));]]></Line>
      <Line Number="3099"><![CDATA[	}]]></Line>
      <Line Number="3100"><![CDATA[]]></Line>
      <Line Number="3101"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="3102"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="3103"><![CDATA[	class _OutTy,]]></Line>
      <Line Number="3104"><![CDATA[	size_t _OutSize> inline]]></Line>
      <Line Number="3105"><![CDATA[	_OutTy *merge(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="3106"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="3107"><![CDATA[		_OutTy (&_Dest)[_OutSize])]]></Line>
      <Line Number="3108"><![CDATA[	{	// copy merging ranges, both using operator<, array dest]]></Line>
      <Line Number="3109"><![CDATA[	return (_Unchecked(]]></Line>
      <Line Number="3110"><![CDATA[		_STD merge(_First1, _Last1,]]></Line>
      <Line Number="3111"><![CDATA[			_First2, _Last2,]]></Line>
      <Line Number="3112"><![CDATA[			_Array_iterator<_OutTy, _OutSize>(_Dest))));]]></Line>
      <Line Number="3113"><![CDATA[	}]]></Line>
      <Line Number="3114"><![CDATA[]]></Line>
      <Line Number="3115"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="3116"><![CDATA[]]></Line>
      <Line Number="3117"><![CDATA[		// TEMPLATE FUNCTION merge WITH PRED]]></Line>
      <Line Number="3118"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="3119"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="3120"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="3121"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="3122"><![CDATA[	_OutIt _Merge(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="3123"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="3124"><![CDATA[		_OutIt _Dest, _Pr _Pred)]]></Line>
      <Line Number="3125"><![CDATA[	{	// copy merging ranges, both using _Pred]]></Line>
      <Line Number="3126"><![CDATA[	for (; _First1 != _Last1 && _First2 != _Last2; ++_Dest)]]></Line>
      <Line Number="3127"><![CDATA[		if (_DEBUG_LT_PRED(_Pred, *_First2, *_First1))]]></Line>
      <Line Number="3128"><![CDATA[			{	// merge first]]></Line>
      <Line Number="3129"><![CDATA[			*_Dest = _Move(*_First2);]]></Line>
      <Line Number="3130"><![CDATA[			++_First2;]]></Line>
      <Line Number="3131"><![CDATA[			}]]></Line>
      <Line Number="3132"><![CDATA[		else]]></Line>
      <Line Number="3133"><![CDATA[			{	// merge second]]></Line>
      <Line Number="3134"><![CDATA[			*_Dest = _Move(*_First1);]]></Line>
      <Line Number="3135"><![CDATA[			++_First1;]]></Line>
      <Line Number="3136"><![CDATA[			}]]></Line>
      <Line Number="3137"><![CDATA[]]></Line>
      <Line Number="3138"><![CDATA[	_Dest = _Move(_First1, _Last1, _Dest);	// copy any tail]]></Line>
      <Line Number="3139"><![CDATA[	return (_Move(_First2, _Last2, _Dest));]]></Line>
      <Line Number="3140"><![CDATA[	}]]></Line>
      <Line Number="3141"><![CDATA[]]></Line>
      <Line Number="3142"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 0]]></Line>
      <Line Number="3143"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="3144"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="3145"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="3146"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="3147"><![CDATA[	_OutIt merge(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="3148"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="3149"><![CDATA[		_OutIt _Dest, _Pr _Pred)]]></Line>
      <Line Number="3150"><![CDATA[	{	// copy merging ranges, both using _Pred]]></Line>
      <Line Number="3151"><![CDATA[	return (_Merge(_Unchecked(_First1), _Unchecked(_Last1),]]></Line>
      <Line Number="3152"><![CDATA[		_Unchecked(_First2), _Unchecked(_Last2),]]></Line>
      <Line Number="3153"><![CDATA[		_Dest, _Pred));]]></Line>
      <Line Number="3154"><![CDATA[	}]]></Line>
      <Line Number="3155"><![CDATA[]]></Line>
      <Line Number="3156"><![CDATA[ #else /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="3157"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="3158"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="3159"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="3160"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="3161"><![CDATA[	_OutIt _Merge2(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="3162"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="3163"><![CDATA[		_OutIt _Dest, _Pr _Pred, input_iterator_tag,]]></Line>
      <Line Number="3164"><![CDATA[		input_iterator_tag, output_iterator_tag)]]></Line>
      <Line Number="3165"><![CDATA[	{	// copy merging ranges, both using _Pred, arbitrary iterators]]></Line>
      <Line Number="3166"><![CDATA[	return (_Merge(_First1, _Last1,]]></Line>
      <Line Number="3167"><![CDATA[		_First2, _Last2,]]></Line>
      <Line Number="3168"><![CDATA[		_Dest, _Pred));]]></Line>
      <Line Number="3169"><![CDATA[	}]]></Line>
      <Line Number="3170"><![CDATA[]]></Line>
      <Line Number="3171"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="3172"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="3173"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="3174"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="3175"><![CDATA[	_OutIt _Merge2(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="3176"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="3177"><![CDATA[		_OutIt _Dest, _Pr _Pred, random_access_iterator_tag,]]></Line>
      <Line Number="3178"><![CDATA[		random_access_iterator_tag, random_access_iterator_tag)]]></Line>
      <Line Number="3179"><![CDATA[	{	// copy merging ranges, both using _Pred, random-access iterators]]></Line>
      <Line Number="3180"><![CDATA[	_OutIt _Ans = _Dest + (_Last1 - _First1)]]></Line>
      <Line Number="3181"><![CDATA[		+ (_Last2 - _First2);	// also checks range]]></Line>
      <Line Number="3182"><![CDATA[	_Merge(_First1, _Last1,]]></Line>
      <Line Number="3183"><![CDATA[		_First2, _Last2,]]></Line>
      <Line Number="3184"><![CDATA[		_Dest, _Pred);]]></Line>
      <Line Number="3185"><![CDATA[	return (_Ans);]]></Line>
      <Line Number="3186"><![CDATA[	}]]></Line>
      <Line Number="3187"><![CDATA[]]></Line>
      <Line Number="3188"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="3189"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="3190"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="3191"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="3192"><![CDATA[	_OutIt _Merge2(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="3193"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="3194"><![CDATA[		_OutIt _Dest, _Pr _Pred, _STD tr1::true_type)]]></Line>
      <Line Number="3195"><![CDATA[	{	// copy merging ranges, both using _Pred, checked dest]]></Line>
      <Line Number="3196"><![CDATA[	return (_Merge2(_First1, _Last1,]]></Line>
      <Line Number="3197"><![CDATA[		_First2, _Last2,]]></Line>
      <Line Number="3198"><![CDATA[		_Dest, _Pred, _Iter_cat(_First1),]]></Line>
      <Line Number="3199"><![CDATA[		_Iter_cat(_First2), _Iter_cat(_Dest)));]]></Line>
      <Line Number="3200"><![CDATA[	}]]></Line>
      <Line Number="3201"><![CDATA[]]></Line>
      <Line Number="3202"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="3203"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="3204"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="3205"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="3206"><![CDATA[_SCL_INSECURE_DEPRECATE]]></Line>
      <Line Number="3207"><![CDATA[	_OutIt _Merge2(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="3208"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="3209"><![CDATA[		_OutIt _Dest, _Pr _Pred, _STD tr1::false_type)]]></Line>
      <Line Number="3210"><![CDATA[	{	// copy merging ranges, both using _Pred, unchecked dest]]></Line>
      <Line Number="3211"><![CDATA[	return (_Merge2(_First1, _Last1,]]></Line>
      <Line Number="3212"><![CDATA[		_First2, _Last2,]]></Line>
      <Line Number="3213"><![CDATA[		_Dest, _Pred, _Iter_cat(_First1),]]></Line>
      <Line Number="3214"><![CDATA[		_Iter_cat(_First2), _Iter_cat(_Dest)));]]></Line>
      <Line Number="3215"><![CDATA[	}]]></Line>
      <Line Number="3216"><![CDATA[]]></Line>
      <Line Number="3217"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="3218"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="3219"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="3220"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="3221"><![CDATA[	_OutIt merge(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="3222"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="3223"><![CDATA[		_OutIt _Dest, _Pr _Pred)]]></Line>
      <Line Number="3224"><![CDATA[	{	// copy merging ranges, both using _Pred]]></Line>
      <Line Number="3225"><![CDATA[	_DEBUG_ORDER_PRED(_First1, _Last1, _Pred);]]></Line>
      <Line Number="3226"><![CDATA[	_DEBUG_ORDER_PRED(_First2, _Last2, _Pred);]]></Line>
      <Line Number="3227"><![CDATA[	_DEBUG_POINTER(_Dest);]]></Line>
      <Line Number="3228"><![CDATA[	_DEBUG_POINTER(_Pred);]]></Line>
      <Line Number="3229"><![CDATA[	return (_Merge2(_Unchecked(_First1), _Unchecked(_Last1),]]></Line>
      <Line Number="3230"><![CDATA[		_Unchecked(_First2), _Unchecked(_Last2),]]></Line>
      <Line Number="3231"><![CDATA[		_Dest, _Pred, _Is_checked(_Dest)));]]></Line>
      <Line Number="3232"><![CDATA[	}]]></Line>
      <Line Number="3233"><![CDATA[]]></Line>
      <Line Number="3234"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="3235"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="3236"><![CDATA[	class _OutTy,]]></Line>
      <Line Number="3237"><![CDATA[	size_t _OutSize,]]></Line>
      <Line Number="3238"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="3239"><![CDATA[	_OutTy *merge(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="3240"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="3241"><![CDATA[		_OutTy (&_Dest)[_OutSize], _Pr _Pred)]]></Line>
      <Line Number="3242"><![CDATA[	{	// copy merging ranges, both using _Pred, array dest]]></Line>
      <Line Number="3243"><![CDATA[	return (_Unchecked(]]></Line>
      <Line Number="3244"><![CDATA[		_STD merge(_First1, _Last1,]]></Line>
      <Line Number="3245"><![CDATA[			_First2, _Last2,]]></Line>
      <Line Number="3246"><![CDATA[			_Array_iterator<_OutTy, _OutSize>(_Dest), _Pred)));]]></Line>
      <Line Number="3247"><![CDATA[	}]]></Line>
      <Line Number="3248"><![CDATA[]]></Line>
      <Line Number="3249"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="3250"><![CDATA[]]></Line>
      <Line Number="3251"><![CDATA[		// TEMPLATE FUNCTION inplace_merge]]></Line>
      <Line Number="3252"><![CDATA[template<class _BidIt,]]></Line>
      <Line Number="3253"><![CDATA[	class _Diff,]]></Line>
      <Line Number="3254"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="3255"><![CDATA[	_BidIt _Buffered_rotate(_BidIt _First, _BidIt _Mid, _BidIt _Last,]]></Line>
      <Line Number="3256"><![CDATA[		_Diff _Count1, _Diff _Count2, _Temp_iterator<_Ty>& _Tempbuf)]]></Line>
      <Line Number="3257"><![CDATA[	{	// rotate [_First, _Last) using temp buffer]]></Line>
      <Line Number="3258"><![CDATA[	if (_Count1 <= _Count2 && _Count1 <= _Tempbuf._Maxlen())]]></Line>
      <Line Number="3259"><![CDATA[		{	// buffer left partition, then copy parts]]></Line>
      <Line Number="3260"><![CDATA[		_Move(_First, _Mid, _Tempbuf._Init());]]></Line>
      <Line Number="3261"><![CDATA[		_Move(_Mid, _Last, _First);]]></Line>
      <Line Number="3262"><![CDATA[		return (_Move_backward(_Tempbuf._First(), _Tempbuf._Last(),]]></Line>
      <Line Number="3263"><![CDATA[			_Last));]]></Line>
      <Line Number="3264"><![CDATA[		}]]></Line>
      <Line Number="3265"><![CDATA[	else if (_Count2 <= _Tempbuf._Maxlen())]]></Line>
      <Line Number="3266"><![CDATA[		{	// buffer right partition, then copy parts]]></Line>
      <Line Number="3267"><![CDATA[		_Move(_Mid, _Last, _Tempbuf._Init());]]></Line>
      <Line Number="3268"><![CDATA[		_Move_backward(_First, _Mid, _Last);]]></Line>
      <Line Number="3269"><![CDATA[		return (_Move(_Tempbuf._First(), _Tempbuf._Last(), _First));]]></Line>
      <Line Number="3270"><![CDATA[		}]]></Line>
      <Line Number="3271"><![CDATA[	else]]></Line>
      <Line Number="3272"><![CDATA[		{	// buffer too small, rotate in place]]></Line>
      <Line Number="3273"><![CDATA[		_STD rotate(_First, _Mid, _Last);]]></Line>
      <Line Number="3274"><![CDATA[		_STD advance(_First, _Count2);]]></Line>
      <Line Number="3275"><![CDATA[		return (_First);]]></Line>
      <Line Number="3276"><![CDATA[		}]]></Line>
      <Line Number="3277"><![CDATA[	}]]></Line>
      <Line Number="3278"><![CDATA[]]></Line>
      <Line Number="3279"><![CDATA[template<class _BidIt1,]]></Line>
      <Line Number="3280"><![CDATA[	class _BidIt2,]]></Line>
      <Line Number="3281"><![CDATA[	class _BidIt3> inline]]></Line>
      <Line Number="3282"><![CDATA[	_BidIt3 _Merge_backward(_BidIt1 _First1, _BidIt1 _Last1,]]></Line>
      <Line Number="3283"><![CDATA[		_BidIt2 _First2, _BidIt2 _Last2, _BidIt3 _Dest)]]></Line>
      <Line Number="3284"><![CDATA[	{	// merge backwards to _Dest, using operator<]]></Line>
      <Line Number="3285"><![CDATA[	for (; ; )]]></Line>
      <Line Number="3286"><![CDATA[		if (_First1 == _Last1)]]></Line>
      <Line Number="3287"><![CDATA[			return (_Move_backward(_First2, _Last2, _Dest));]]></Line>
      <Line Number="3288"><![CDATA[		else if (_First2 == _Last2)]]></Line>
      <Line Number="3289"><![CDATA[			return (_Move_backward(_First1, _Last1, _Dest));]]></Line>
      <Line Number="3290"><![CDATA[		else if (_DEBUG_LT(*--_Last2, *--_Last1))]]></Line>
      <Line Number="3291"><![CDATA[			{	// merge first]]></Line>
      <Line Number="3292"><![CDATA[			*--_Dest = _Move(*_Last1);]]></Line>
      <Line Number="3293"><![CDATA[			++_Last2;]]></Line>
      <Line Number="3294"><![CDATA[			}]]></Line>
      <Line Number="3295"><![CDATA[		else]]></Line>
      <Line Number="3296"><![CDATA[			{	// merge second]]></Line>
      <Line Number="3297"><![CDATA[			*--_Dest = _Move(*_Last2);]]></Line>
      <Line Number="3298"><![CDATA[			++_Last1;]]></Line>
      <Line Number="3299"><![CDATA[			}]]></Line>
      <Line Number="3300"><![CDATA[	}]]></Line>
      <Line Number="3301"><![CDATA[]]></Line>
      <Line Number="3302"><![CDATA[template<class _BidIt,]]></Line>
      <Line Number="3303"><![CDATA[	class _Diff,]]></Line>
      <Line Number="3304"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="3305"><![CDATA[	void _Buffered_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last,]]></Line>
      <Line Number="3306"><![CDATA[		_Diff _Count1, _Diff _Count2,]]></Line>
      <Line Number="3307"><![CDATA[			_Temp_iterator<_Ty>& _Tempbuf)]]></Line>
      <Line Number="3308"><![CDATA[	{	// merge [_First, _Mid) with [_Mid, _Last), using operator<]]></Line>
      <Line Number="3309"><![CDATA[	if (_Count1 + _Count2 == 2)]]></Line>
      <Line Number="3310"><![CDATA[		{	// order two one-element partitions]]></Line>
      <Line Number="3311"><![CDATA[		if (_DEBUG_LT(*_Mid, *_First))]]></Line>
      <Line Number="3312"><![CDATA[			_STD iter_swap(_First, _Mid);]]></Line>
      <Line Number="3313"><![CDATA[		}]]></Line>
      <Line Number="3314"><![CDATA[	else if (_Count1 <= _Count2 && _Count1 <= _Tempbuf._Maxlen())]]></Line>
      <Line Number="3315"><![CDATA[		{	// buffer left partition, then merge]]></Line>
      <Line Number="3316"><![CDATA[		_Move(_First, _Mid, _Tempbuf._Init());]]></Line>
      <Line Number="3317"><![CDATA[		_Merge(_Tempbuf._First(), _Tempbuf._Last(), _Mid, _Last, _First);]]></Line>
      <Line Number="3318"><![CDATA[		}]]></Line>
      <Line Number="3319"><![CDATA[	else if (_Count2 <= _Tempbuf._Maxlen())]]></Line>
      <Line Number="3320"><![CDATA[		{	// buffer right partition, then merge]]></Line>
      <Line Number="3321"><![CDATA[		_Move(_Mid, _Last, _Tempbuf._Init());]]></Line>
      <Line Number="3322"><![CDATA[		_Merge_backward(_First, _Mid,]]></Line>
      <Line Number="3323"><![CDATA[			_Tempbuf._First(), _Tempbuf._Last(), _Last);]]></Line>
      <Line Number="3324"><![CDATA[		}]]></Line>
      <Line Number="3325"><![CDATA[	else]]></Line>
      <Line Number="3326"><![CDATA[		{	// buffer too small, divide and conquer]]></Line>
      <Line Number="3327"><![CDATA[		_BidIt _Firstn, _Lastn;]]></Line>
      <Line Number="3328"><![CDATA[		_Diff _Count1n, _Count2n;]]></Line>
      <Line Number="3329"><![CDATA[]]></Line>
      <Line Number="3330"><![CDATA[		if (_Count2 < _Count1)]]></Line>
      <Line Number="3331"><![CDATA[			{	// left larger, cut it in half and partition right to match]]></Line>
      <Line Number="3332"><![CDATA[			_Count1n = _Count1 / 2, _Count2n = 0;]]></Line>
      <Line Number="3333"><![CDATA[			_Firstn = _First;]]></Line>
      <Line Number="3334"><![CDATA[			_STD advance(_Firstn, _Count1n);]]></Line>
      <Line Number="3335"><![CDATA[			_Lastn = _STD lower_bound(_Mid, _Last, *_Firstn);]]></Line>
      <Line Number="3336"><![CDATA[			_Distance(_Mid, _Lastn, _Count2n);]]></Line>
      <Line Number="3337"><![CDATA[			}]]></Line>
      <Line Number="3338"><![CDATA[		else]]></Line>
      <Line Number="3339"><![CDATA[			{	// right larger, cut it in half and partition left to match]]></Line>
      <Line Number="3340"><![CDATA[			_Count1n = 0, _Count2n = _Count2 / 2;]]></Line>
      <Line Number="3341"><![CDATA[			_Lastn = _Mid;]]></Line>
      <Line Number="3342"><![CDATA[			_STD advance(_Lastn, _Count2n);]]></Line>
      <Line Number="3343"><![CDATA[			_Firstn = _STD upper_bound(_First, _Mid, *_Lastn);]]></Line>
      <Line Number="3344"><![CDATA[			_Distance(_First, _Firstn, _Count1n);]]></Line>
      <Line Number="3345"><![CDATA[			}]]></Line>
      <Line Number="3346"><![CDATA[]]></Line>
      <Line Number="3347"><![CDATA[		_BidIt _Midn = _Buffered_rotate(_Firstn, _Mid, _Lastn,]]></Line>
      <Line Number="3348"><![CDATA[			_Count1 - _Count1n, _Count2n, _Tempbuf);	// rearrange middle]]></Line>
      <Line Number="3349"><![CDATA[		_Buffered_merge(_First, _Firstn, _Midn,]]></Line>
      <Line Number="3350"><![CDATA[			_Count1n, _Count2n, _Tempbuf);	// merge each new part]]></Line>
      <Line Number="3351"><![CDATA[		_Buffered_merge(_Midn, _Lastn, _Last,]]></Line>
      <Line Number="3352"><![CDATA[			_Count1 - _Count1n, _Count2 - _Count2n, _Tempbuf);]]></Line>
      <Line Number="3353"><![CDATA[		}]]></Line>
      <Line Number="3354"><![CDATA[	}]]></Line>
      <Line Number="3355"><![CDATA[]]></Line>
      <Line Number="3356"><![CDATA[template<class _BidIt,]]></Line>
      <Line Number="3357"><![CDATA[	class _Diff,]]></Line>
      <Line Number="3358"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="3359"><![CDATA[	void _Inplace_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last,]]></Line>
      <Line Number="3360"><![CDATA[		_Diff *, _Ty *)]]></Line>
      <Line Number="3361"><![CDATA[	{	// merge [_First, _Mid) with [_Mid, _Last), using operator<]]></Line>
      <Line Number="3362"><![CDATA[	_Diff _Count1 = 0;]]></Line>
      <Line Number="3363"><![CDATA[	_Distance(_First, _Mid, _Count1);]]></Line>
      <Line Number="3364"><![CDATA[	_Diff _Count2 = 0;]]></Line>
      <Line Number="3365"><![CDATA[	_Distance(_Mid, _Last, _Count2);]]></Line>
      <Line Number="3366"><![CDATA[	_Temp_iterator<_Ty> _Tempbuf(_Count1 < _Count2 ? _Count1 : _Count2);]]></Line>
      <Line Number="3367"><![CDATA[	_Buffered_merge(_First, _Mid, _Last,]]></Line>
      <Line Number="3368"><![CDATA[		_Count1, _Count2, _Tempbuf);]]></Line>
      <Line Number="3369"><![CDATA[	}]]></Line>
      <Line Number="3370"><![CDATA[]]></Line>
      <Line Number="3371"><![CDATA[template<class _BidIt> inline]]></Line>
      <Line Number="3372"><![CDATA[	void inplace_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last)]]></Line>
      <Line Number="3373"><![CDATA[	{	// merge [_First, _Mid) with [_Mid, _Last), using operator<]]></Line>
      <Line Number="3374"><![CDATA[	_DEBUG_ORDER(_First, _Mid);]]></Line>
      <Line Number="3375"><![CDATA[	_DEBUG_ORDER(_Mid, _Last);]]></Line>
      <Line Number="3376"><![CDATA[	if (_First != _Mid && _Mid != _Last)]]></Line>
      <Line Number="3377"><![CDATA[		_Inplace_merge(]]></Line>
      <Line Number="3378"><![CDATA[			_Unchecked(_First), _Unchecked(_Mid), _Unchecked(_Last),]]></Line>
      <Line Number="3379"><![CDATA[			_Dist_type(_First), _Val_type(_First));]]></Line>
      <Line Number="3380"><![CDATA[	}]]></Line>
      <Line Number="3381"><![CDATA[]]></Line>
      <Line Number="3382"><![CDATA[		// TEMPLATE FUNCTION inplace_merge WITH PRED]]></Line>
      <Line Number="3383"><![CDATA[template<class _BidIt1,]]></Line>
      <Line Number="3384"><![CDATA[	class _BidIt2,]]></Line>
      <Line Number="3385"><![CDATA[	class _BidIt3,]]></Line>
      <Line Number="3386"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="3387"><![CDATA[	_BidIt3 _Merge_backward(_BidIt1 _First1, _BidIt1 _Last1,]]></Line>
      <Line Number="3388"><![CDATA[		_BidIt2 _First2, _BidIt2 _Last2, _BidIt3 _Dest, _Pr _Pred)]]></Line>
      <Line Number="3389"><![CDATA[	{	// merge backwards to _Dest, using _Pred]]></Line>
      <Line Number="3390"><![CDATA[	for (; ; )]]></Line>
      <Line Number="3391"><![CDATA[		if (_First1 == _Last1)]]></Line>
      <Line Number="3392"><![CDATA[			return (_Move_backward(_First2, _Last2, _Dest));]]></Line>
      <Line Number="3393"><![CDATA[		else if (_First2 == _Last2)]]></Line>
      <Line Number="3394"><![CDATA[			return (_Move_backward(_First1, _Last1, _Dest));]]></Line>
      <Line Number="3395"><![CDATA[		else if (_DEBUG_LT_PRED(_Pred, *--_Last2, *--_Last1))]]></Line>
      <Line Number="3396"><![CDATA[			{	// merge first]]></Line>
      <Line Number="3397"><![CDATA[			*--_Dest = _Move(*_Last1);]]></Line>
      <Line Number="3398"><![CDATA[			++_Last2;]]></Line>
      <Line Number="3399"><![CDATA[			}]]></Line>
      <Line Number="3400"><![CDATA[		else]]></Line>
      <Line Number="3401"><![CDATA[			{	// merge second]]></Line>
      <Line Number="3402"><![CDATA[			*--_Dest = _Move(*_Last2);]]></Line>
      <Line Number="3403"><![CDATA[			++_Last1;]]></Line>
      <Line Number="3404"><![CDATA[			}]]></Line>
      <Line Number="3405"><![CDATA[	}]]></Line>
      <Line Number="3406"><![CDATA[]]></Line>
      <Line Number="3407"><![CDATA[template<class _BidIt,]]></Line>
      <Line Number="3408"><![CDATA[	class _Diff,]]></Line>
      <Line Number="3409"><![CDATA[	class _Ty,]]></Line>
      <Line Number="3410"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="3411"><![CDATA[	void _Buffered_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last,]]></Line>
      <Line Number="3412"><![CDATA[		_Diff _Count1, _Diff _Count2,]]></Line>
      <Line Number="3413"><![CDATA[			_Temp_iterator<_Ty>& _Tempbuf, _Pr _Pred)]]></Line>
      <Line Number="3414"><![CDATA[	{	// merge [_First, _Mid) with [_Mid, _Last), using _Pred]]></Line>
      <Line Number="3415"><![CDATA[	if (_Count1 + _Count2 == 2)]]></Line>
      <Line Number="3416"><![CDATA[		{	// order two one-element partitions]]></Line>
      <Line Number="3417"><![CDATA[		if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))]]></Line>
      <Line Number="3418"><![CDATA[			_STD iter_swap(_First, _Mid);]]></Line>
      <Line Number="3419"><![CDATA[		}]]></Line>
      <Line Number="3420"><![CDATA[	else if (_Count1 <= _Count2 && _Count1 <= _Tempbuf._Maxlen())]]></Line>
      <Line Number="3421"><![CDATA[		{	// buffer left partition, then merge]]></Line>
      <Line Number="3422"><![CDATA[		_Move(_First, _Mid, _Tempbuf._Init());]]></Line>
      <Line Number="3423"><![CDATA[		_Merge(_Tempbuf._First(), _Tempbuf._Last(),]]></Line>
      <Line Number="3424"><![CDATA[			_Mid, _Last, _First, _Pred);]]></Line>
      <Line Number="3425"><![CDATA[		}]]></Line>
      <Line Number="3426"><![CDATA[	else if (_Count2 <= _Tempbuf._Maxlen())]]></Line>
      <Line Number="3427"><![CDATA[		{	// buffer right partition, then merge]]></Line>
      <Line Number="3428"><![CDATA[		_Move(_Mid, _Last, _Tempbuf._Init());]]></Line>
      <Line Number="3429"><![CDATA[		_Merge_backward(_First, _Mid,]]></Line>
      <Line Number="3430"><![CDATA[			_Tempbuf._First(), _Tempbuf._Last(), _Last, _Pred);]]></Line>
      <Line Number="3431"><![CDATA[		}]]></Line>
      <Line Number="3432"><![CDATA[	else]]></Line>
      <Line Number="3433"><![CDATA[		{	// buffer too small, divide and conquer]]></Line>
      <Line Number="3434"><![CDATA[		_BidIt _Firstn, _Lastn;]]></Line>
      <Line Number="3435"><![CDATA[		_Diff _Count1n, _Count2n;]]></Line>
      <Line Number="3436"><![CDATA[		if (_Count2 < _Count1)]]></Line>
      <Line Number="3437"><![CDATA[			{	// left larger, cut it in half and partition right to match]]></Line>
      <Line Number="3438"><![CDATA[			_Count1n = _Count1 / 2, _Count2n = 0;]]></Line>
      <Line Number="3439"><![CDATA[			_Firstn = _First;]]></Line>
      <Line Number="3440"><![CDATA[			_STD advance(_Firstn, _Count1n);]]></Line>
      <Line Number="3441"><![CDATA[			_Lastn = _STD lower_bound(_Mid, _Last, *_Firstn, _Pred);]]></Line>
      <Line Number="3442"><![CDATA[			_Distance(_Mid, _Lastn, _Count2n);]]></Line>
      <Line Number="3443"><![CDATA[			}]]></Line>
      <Line Number="3444"><![CDATA[		else]]></Line>
      <Line Number="3445"><![CDATA[			{	// right larger, cut it in half and partition left to match]]></Line>
      <Line Number="3446"><![CDATA[			_Count1n = 0, _Count2n = _Count2 / 2;]]></Line>
      <Line Number="3447"><![CDATA[			_Lastn = _Mid;]]></Line>
      <Line Number="3448"><![CDATA[			_STD advance(_Lastn, _Count2n);]]></Line>
      <Line Number="3449"><![CDATA[			_Firstn = _STD upper_bound(_First, _Mid, *_Lastn, _Pred);]]></Line>
      <Line Number="3450"><![CDATA[			_Distance(_First, _Firstn, _Count1n);]]></Line>
      <Line Number="3451"><![CDATA[			}]]></Line>
      <Line Number="3452"><![CDATA[		_BidIt _Midn = _Buffered_rotate(_Firstn, _Mid, _Lastn,]]></Line>
      <Line Number="3453"><![CDATA[			_Count1 - _Count1n, _Count2n, _Tempbuf);	// rearrange middle]]></Line>
      <Line Number="3454"><![CDATA[		_Buffered_merge(_First, _Firstn, _Midn,]]></Line>
      <Line Number="3455"><![CDATA[			_Count1n, _Count2n, _Tempbuf, _Pred);	// merge each new part]]></Line>
      <Line Number="3456"><![CDATA[		_Buffered_merge(_Midn, _Lastn, _Last,]]></Line>
      <Line Number="3457"><![CDATA[			_Count1 - _Count1n, _Count2 - _Count2n, _Tempbuf, _Pred);]]></Line>
      <Line Number="3458"><![CDATA[		}]]></Line>
      <Line Number="3459"><![CDATA[	}]]></Line>
      <Line Number="3460"><![CDATA[]]></Line>
      <Line Number="3461"><![CDATA[template<class _BidIt,]]></Line>
      <Line Number="3462"><![CDATA[	class _Diff,]]></Line>
      <Line Number="3463"><![CDATA[	class _Ty,]]></Line>
      <Line Number="3464"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="3465"><![CDATA[	void _Inplace_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last, _Pr _Pred,]]></Line>
      <Line Number="3466"><![CDATA[		_Diff *, _Ty *)]]></Line>
      <Line Number="3467"><![CDATA[	{	// merge [_First, _Mid) with [_Mid, _Last), using _Pred]]></Line>
      <Line Number="3468"><![CDATA[	_Diff _Count1 = 0;]]></Line>
      <Line Number="3469"><![CDATA[	_Distance(_First, _Mid, _Count1);]]></Line>
      <Line Number="3470"><![CDATA[	_Diff _Count2 = 0;]]></Line>
      <Line Number="3471"><![CDATA[	_Distance(_Mid, _Last, _Count2);]]></Line>
      <Line Number="3472"><![CDATA[	_Temp_iterator<_Ty> _Tempbuf(_Count1 < _Count2 ? _Count1 : _Count2);]]></Line>
      <Line Number="3473"><![CDATA[	_Buffered_merge(_First, _Mid, _Last,]]></Line>
      <Line Number="3474"><![CDATA[		_Count1, _Count2, _Tempbuf, _Pred);]]></Line>
      <Line Number="3475"><![CDATA[	}]]></Line>
      <Line Number="3476"><![CDATA[]]></Line>
      <Line Number="3477"><![CDATA[template<class _BidIt,]]></Line>
      <Line Number="3478"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="3479"><![CDATA[	void inplace_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last, _Pr _Pred)]]></Line>
      <Line Number="3480"><![CDATA[	{	// merge [_First, _Mid) with [_Mid, _Last), using _Pred]]></Line>
      <Line Number="3481"><![CDATA[	_DEBUG_ORDER_PRED(_First, _Mid, _Pred);]]></Line>
      <Line Number="3482"><![CDATA[	_DEBUG_ORDER_PRED(_Mid, _Last, _Pred);]]></Line>
      <Line Number="3483"><![CDATA[	if (_First != _Mid && _Mid != _Last)]]></Line>
      <Line Number="3484"><![CDATA[		_Inplace_merge(]]></Line>
      <Line Number="3485"><![CDATA[			_Unchecked(_First), _Unchecked(_Mid), _Unchecked(_Last), _Pred,]]></Line>
      <Line Number="3486"><![CDATA[			_Dist_type(_First), _Val_type(_First));]]></Line>
      <Line Number="3487"><![CDATA[	}]]></Line>
      <Line Number="3488"><![CDATA[]]></Line>
      <Line Number="3489"><![CDATA[		// TEMPLATE FUNCTION sort]]></Line>
      <Line Number="3490"><![CDATA[template<class _BidIt,]]></Line>
      <Line Number="3491"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="3492"><![CDATA[	void _Insertion_sort1(_BidIt _First, _BidIt _Last, _Ty *)]]></Line>
      <Line Number="3493"><![CDATA[	{	// insertion sort [_First, _Last), using operator<]]></Line>
      <Line Number="3494"><![CDATA[	if (_First != _Last)]]></Line>
      <Line Number="3495"><![CDATA[		for (_BidIt _Next = _First; ++_Next != _Last; )]]></Line>
      <Line Number="3496"><![CDATA[			{	// order next element]]></Line>
      <Line Number="3497"><![CDATA[			_BidIt _Next1 = _Next;]]></Line>
      <Line Number="3498"><![CDATA[			_Ty _Val = _Move(*_Next);]]></Line>
      <Line Number="3499"><![CDATA[]]></Line>
      <Line Number="3500"><![CDATA[			if (_DEBUG_LT(_Val, *_First))]]></Line>
      <Line Number="3501"><![CDATA[				{	// found new earliest element, move to front]]></Line>
      <Line Number="3502"><![CDATA[				_Move_backward(_First, _Next, ++_Next1);]]></Line>
      <Line Number="3503"><![CDATA[				*_First = _Move(_Val);]]></Line>
      <Line Number="3504"><![CDATA[				}]]></Line>
      <Line Number="3505"><![CDATA[			else]]></Line>
      <Line Number="3506"><![CDATA[				{	// look for insertion point after first]]></Line>
      <Line Number="3507"><![CDATA[				for (_BidIt _First1 = _Next1;]]></Line>
      <Line Number="3508"><![CDATA[					_DEBUG_LT(_Val, *--_First1);]]></Line>
      <Line Number="3509"><![CDATA[					_Next1 = _First1)]]></Line>
      <Line Number="3510"><![CDATA[					*_Next1 = _Move(*_First1);	// move hole down]]></Line>
      <Line Number="3511"><![CDATA[				*_Next1 = _Move(_Val);	// insert element in hole]]></Line>
      <Line Number="3512"><![CDATA[				}]]></Line>
      <Line Number="3513"><![CDATA[			}]]></Line>
      <Line Number="3514"><![CDATA[	}]]></Line>
      <Line Number="3515"><![CDATA[]]></Line>
      <Line Number="3516"><![CDATA[template<class _BidIt> inline]]></Line>
      <Line Number="3517"><![CDATA[	void _Insertion_sort(_BidIt _First, _BidIt _Last)]]></Line>
      <Line Number="3518"><![CDATA[	{	// insertion sort [_First, _Last), using operator<]]></Line>
      <Line Number="3519"><![CDATA[	_Insertion_sort1(_First, _Last, _Val_type(_First));]]></Line>
      <Line Number="3520"><![CDATA[	}]]></Line>
      <Line Number="3521"><![CDATA[]]></Line>
      <Line Number="3522"><![CDATA[template<class _RanIt> inline]]></Line>
      <Line Number="3523"><![CDATA[	void _Med3(_RanIt _First, _RanIt _Mid, _RanIt _Last)]]></Line>
      <Line Number="3524"><![CDATA[	{	// sort median of three elements to middle]]></Line>
      <Line Number="3525"><![CDATA[	if (_DEBUG_LT(*_Mid, *_First))]]></Line>
      <Line Number="3526"><![CDATA[		_STD iter_swap(_Mid, _First);]]></Line>
      <Line Number="3527"><![CDATA[	if (_DEBUG_LT(*_Last, *_Mid))]]></Line>
      <Line Number="3528"><![CDATA[		_STD iter_swap(_Last, _Mid);]]></Line>
      <Line Number="3529"><![CDATA[	if (_DEBUG_LT(*_Mid, *_First))]]></Line>
      <Line Number="3530"><![CDATA[		_STD iter_swap(_Mid, _First);]]></Line>
      <Line Number="3531"><![CDATA[	}]]></Line>
      <Line Number="3532"><![CDATA[]]></Line>
      <Line Number="3533"><![CDATA[template<class _RanIt> inline]]></Line>
      <Line Number="3534"><![CDATA[	void _Median(_RanIt _First, _RanIt _Mid, _RanIt _Last)]]></Line>
      <Line Number="3535"><![CDATA[	{	// sort median element to middle]]></Line>
      <Line Number="3536"><![CDATA[	if (40 < _Last - _First)]]></Line>
      <Line Number="3537"><![CDATA[		{	// median of nine]]></Line>
      <Line Number="3538"><![CDATA[		size_t _Step = (_Last - _First + 1) / 8;]]></Line>
      <Line Number="3539"><![CDATA[		_Med3(_First, _First + _Step, _First + 2 * _Step);]]></Line>
      <Line Number="3540"><![CDATA[		_Med3(_Mid - _Step, _Mid, _Mid + _Step);]]></Line>
      <Line Number="3541"><![CDATA[		_Med3(_Last - 2 * _Step, _Last - _Step, _Last);]]></Line>
      <Line Number="3542"><![CDATA[		_Med3(_First + _Step, _Mid, _Last - _Step);]]></Line>
      <Line Number="3543"><![CDATA[		}]]></Line>
      <Line Number="3544"><![CDATA[	else]]></Line>
      <Line Number="3545"><![CDATA[		_Med3(_First, _Mid, _Last);]]></Line>
      <Line Number="3546"><![CDATA[	}]]></Line>
      <Line Number="3547"><![CDATA[]]></Line>
      <Line Number="3548"><![CDATA[template<class _RanIt> inline]]></Line>
      <Line Number="3549"><![CDATA[	_STD pair<_RanIt, _RanIt>]]></Line>
      <Line Number="3550"><![CDATA[		_Unguarded_partition(_RanIt _First, _RanIt _Last)]]></Line>
      <Line Number="3551"><![CDATA[	{	// partition [_First, _Last), using operator<]]></Line>
      <Line Number="3552"><![CDATA[	_RanIt _Mid = _First + (_Last - _First) / 2;	// sort median to _Mid]]></Line>
      <Line Number="3553"><![CDATA[	_Median(_First, _Mid, _Last - 1);]]></Line>
      <Line Number="3554"><![CDATA[	_RanIt _Pfirst = _Mid;]]></Line>
      <Line Number="3555"><![CDATA[	_RanIt _Plast = _Pfirst + 1;]]></Line>
      <Line Number="3556"><![CDATA[]]></Line>
      <Line Number="3557"><![CDATA[	while (_First < _Pfirst]]></Line>
      <Line Number="3558"><![CDATA[		&& !_DEBUG_LT(*(_Pfirst - 1), *_Pfirst)]]></Line>
      <Line Number="3559"><![CDATA[		&& !(*_Pfirst < *(_Pfirst - 1)))]]></Line>
      <Line Number="3560"><![CDATA[		--_Pfirst;]]></Line>
      <Line Number="3561"><![CDATA[	while (_Plast < _Last]]></Line>
      <Line Number="3562"><![CDATA[		&& !_DEBUG_LT(*_Plast, *_Pfirst)]]></Line>
      <Line Number="3563"><![CDATA[		&& !(*_Pfirst < *_Plast))]]></Line>
      <Line Number="3564"><![CDATA[		++_Plast;]]></Line>
      <Line Number="3565"><![CDATA[]]></Line>
      <Line Number="3566"><![CDATA[	_RanIt _Gfirst = _Plast;]]></Line>
      <Line Number="3567"><![CDATA[	_RanIt _Glast = _Pfirst;]]></Line>
      <Line Number="3568"><![CDATA[]]></Line>
      <Line Number="3569"><![CDATA[	for (; ; )]]></Line>
      <Line Number="3570"><![CDATA[		{	// partition]]></Line>
      <Line Number="3571"><![CDATA[		for (; _Gfirst < _Last; ++_Gfirst)]]></Line>
      <Line Number="3572"><![CDATA[			if (_DEBUG_LT(*_Pfirst, *_Gfirst))]]></Line>
      <Line Number="3573"><![CDATA[				;]]></Line>
      <Line Number="3574"><![CDATA[			else if (*_Gfirst < *_Pfirst)]]></Line>
      <Line Number="3575"><![CDATA[				break;]]></Line>
      <Line Number="3576"><![CDATA[			else]]></Line>
      <Line Number="3577"><![CDATA[				_STD iter_swap(_Plast++, _Gfirst);]]></Line>
      <Line Number="3578"><![CDATA[		for (; _First < _Glast; --_Glast)]]></Line>
      <Line Number="3579"><![CDATA[			if (_DEBUG_LT(*(_Glast - 1), *_Pfirst))]]></Line>
      <Line Number="3580"><![CDATA[				;]]></Line>
      <Line Number="3581"><![CDATA[			else if (*_Pfirst < *(_Glast - 1))]]></Line>
      <Line Number="3582"><![CDATA[				break;]]></Line>
      <Line Number="3583"><![CDATA[			else]]></Line>
      <Line Number="3584"><![CDATA[				_STD iter_swap(--_Pfirst, _Glast - 1);]]></Line>
      <Line Number="3585"><![CDATA[		if (_Glast == _First && _Gfirst == _Last)]]></Line>
      <Line Number="3586"><![CDATA[			return (_STD pair<_RanIt, _RanIt>(_Pfirst, _Plast));]]></Line>
      <Line Number="3587"><![CDATA[]]></Line>
      <Line Number="3588"><![CDATA[		if (_Glast == _First)]]></Line>
      <Line Number="3589"><![CDATA[			{	// no room at bottom, rotate pivot upward]]></Line>
      <Line Number="3590"><![CDATA[			if (_Plast != _Gfirst)]]></Line>
      <Line Number="3591"><![CDATA[				_STD iter_swap(_Pfirst, _Plast);]]></Line>
      <Line Number="3592"><![CDATA[			++_Plast;]]></Line>
      <Line Number="3593"><![CDATA[			_STD iter_swap(_Pfirst++, _Gfirst++);]]></Line>
      <Line Number="3594"><![CDATA[			}]]></Line>
      <Line Number="3595"><![CDATA[		else if (_Gfirst == _Last)]]></Line>
      <Line Number="3596"><![CDATA[			{	// no room at top, rotate pivot downward]]></Line>
      <Line Number="3597"><![CDATA[			if (--_Glast != --_Pfirst)]]></Line>
      <Line Number="3598"><![CDATA[				_STD iter_swap(_Glast, _Pfirst);]]></Line>
      <Line Number="3599"><![CDATA[			_STD iter_swap(_Pfirst, --_Plast);]]></Line>
      <Line Number="3600"><![CDATA[			}]]></Line>
      <Line Number="3601"><![CDATA[		else]]></Line>
      <Line Number="3602"><![CDATA[			_STD iter_swap(_Gfirst++, --_Glast);]]></Line>
      <Line Number="3603"><![CDATA[		}]]></Line>
      <Line Number="3604"><![CDATA[	}]]></Line>
      <Line Number="3605"><![CDATA[]]></Line>
      <Line Number="3606"><![CDATA[template<class _RanIt,]]></Line>
      <Line Number="3607"><![CDATA[	class _Diff> inline]]></Line>
      <Line Number="3608"><![CDATA[	void _Sort(_RanIt _First, _RanIt _Last, _Diff _Ideal)]]></Line>
      <Line Number="3609"><![CDATA[	{	// order [_First, _Last), using operator<]]></Line>
      <Line Number="3610"><![CDATA[	_Diff _Count;]]></Line>
      <Line Number="3611"><![CDATA[	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )]]></Line>
      <Line Number="3612"><![CDATA[		{	// divide and conquer by quicksort]]></Line>
      <Line Number="3613"><![CDATA[		_STD pair<_RanIt, _RanIt> _Mid =]]></Line>
      <Line Number="3614"><![CDATA[			_Unguarded_partition(_First, _Last);]]></Line>
      <Line Number="3615"><![CDATA[		_Ideal /= 2, _Ideal += _Ideal / 2;	// allow 1.5 log2(N) divisions]]></Line>
      <Line Number="3616"><![CDATA[]]></Line>
      <Line Number="3617"><![CDATA[		if (_Mid.first - _First < _Last - _Mid.second)]]></Line>
      <Line Number="3618"><![CDATA[			{	// loop on second half]]></Line>
      <Line Number="3619"><![CDATA[			_Sort(_First, _Mid.first, _Ideal);]]></Line>
      <Line Number="3620"><![CDATA[			_First = _Mid.second;]]></Line>
      <Line Number="3621"><![CDATA[			}]]></Line>
      <Line Number="3622"><![CDATA[		else]]></Line>
      <Line Number="3623"><![CDATA[			{	// loop on first half]]></Line>
      <Line Number="3624"><![CDATA[			_Sort(_Mid.second, _Last, _Ideal);]]></Line>
      <Line Number="3625"><![CDATA[			_Last = _Mid.first;]]></Line>
      <Line Number="3626"><![CDATA[			}]]></Line>
      <Line Number="3627"><![CDATA[		}]]></Line>
      <Line Number="3628"><![CDATA[]]></Line>
      <Line Number="3629"><![CDATA[	if (_ISORT_MAX < _Count)]]></Line>
      <Line Number="3630"><![CDATA[		{	// heap sort if too many divisions]]></Line>
      <Line Number="3631"><![CDATA[		_STD make_heap(_First, _Last);]]></Line>
      <Line Number="3632"><![CDATA[		_STD sort_heap(_First, _Last);]]></Line>
      <Line Number="3633"><![CDATA[		}]]></Line>
      <Line Number="3634"><![CDATA[	else if (1 < _Count)]]></Line>
      <Line Number="3635"><![CDATA[		_Insertion_sort(_First, _Last);	// small]]></Line>
      <Line Number="3636"><![CDATA[	}]]></Line>
      <Line Number="3637"><![CDATA[]]></Line>
      <Line Number="3638"><![CDATA[template<class _RanIt> inline]]></Line>
      <Line Number="3639"><![CDATA[	void sort(_RanIt _First, _RanIt _Last)]]></Line>
      <Line Number="3640"><![CDATA[	{	// order [_First, _Last), using operator<]]></Line>
      <Line Number="3641"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="3642"><![CDATA[	_Sort(_Unchecked(_First), _Unchecked(_Last), _Last - _First);]]></Line>
      <Line Number="3643"><![CDATA[	}]]></Line>
      <Line Number="3644"><![CDATA[]]></Line>
      <Line Number="3645"><![CDATA[		// TEMPLATE FUNCTION sort WITH PRED]]></Line>
      <Line Number="3646"><![CDATA[template<class _BidIt,]]></Line>
      <Line Number="3647"><![CDATA[	class _Pr,]]></Line>
      <Line Number="3648"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="3649"><![CDATA[	void _Insertion_sort1(_BidIt _First, _BidIt _Last, _Pr _Pred, _Ty *)]]></Line>
      <Line Number="3650"><![CDATA[	{	// insertion sort [_First, _Last), using _Pred]]></Line>
      <Line Number="3651"><![CDATA[	if (_First != _Last)]]></Line>
      <Line Number="3652"><![CDATA[		for (_BidIt _Next = _First; ++_Next != _Last; )]]></Line>
      <Line Number="3653"><![CDATA[			{	// order next element]]></Line>
      <Line Number="3654"><![CDATA[			_BidIt _Next1 = _Next;]]></Line>
      <Line Number="3655"><![CDATA[			_Ty _Val = _Move(*_Next);]]></Line>
      <Line Number="3656"><![CDATA[]]></Line>
      <Line Number="3657"><![CDATA[			if (_DEBUG_LT_PRED(_Pred, _Val, *_First))]]></Line>
      <Line Number="3658"><![CDATA[				{	// found new earliest element, move to front]]></Line>
      <Line Number="3659"><![CDATA[				_Move_backward(_First, _Next, ++_Next1);]]></Line>
      <Line Number="3660"><![CDATA[				*_First = _Move(_Val);]]></Line>
      <Line Number="3661"><![CDATA[				}]]></Line>
      <Line Number="3662"><![CDATA[			else]]></Line>
      <Line Number="3663"><![CDATA[				{	// look for insertion point after first]]></Line>
      <Line Number="3664"><![CDATA[				for (_BidIt _First1 = _Next1;]]></Line>
      <Line Number="3665"><![CDATA[					_DEBUG_LT_PRED(_Pred, _Val, *--_First1);]]></Line>
      <Line Number="3666"><![CDATA[					_Next1 = _First1)]]></Line>
      <Line Number="3667"><![CDATA[					*_Next1 = _Move(*_First1);	// move hole down]]></Line>
      <Line Number="3668"><![CDATA[				*_Next1 = _Move(_Val);	// insert element in hole]]></Line>
      <Line Number="3669"><![CDATA[				}]]></Line>
      <Line Number="3670"><![CDATA[			}]]></Line>
      <Line Number="3671"><![CDATA[	}]]></Line>
      <Line Number="3672"><![CDATA[]]></Line>
      <Line Number="3673"><![CDATA[template<class _BidIt,]]></Line>
      <Line Number="3674"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="3675"><![CDATA[	void _Insertion_sort(_BidIt _First, _BidIt _Last, _Pr _Pred)]]></Line>
      <Line Number="3676"><![CDATA[	{	// insertion sort [_First, _Last), using _Pred]]></Line>
      <Line Number="3677"><![CDATA[	_Insertion_sort1(_First, _Last, _Pred, _Val_type(_First));]]></Line>
      <Line Number="3678"><![CDATA[	}]]></Line>
      <Line Number="3679"><![CDATA[]]></Line>
      <Line Number="3680"><![CDATA[template<class _RanIt,]]></Line>
      <Line Number="3681"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="3682"><![CDATA[	void _Med3(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred)]]></Line>
      <Line Number="3683"><![CDATA[	{	// sort median of three elements to middle]]></Line>
      <Line Number="3684"><![CDATA[	if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))]]></Line>
      <Line Number="3685"><![CDATA[		_STD iter_swap(_Mid, _First);]]></Line>
      <Line Number="3686"><![CDATA[	if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid))]]></Line>
      <Line Number="3687"><![CDATA[		_STD iter_swap(_Last, _Mid);]]></Line>
      <Line Number="3688"><![CDATA[	if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))]]></Line>
      <Line Number="3689"><![CDATA[		_STD iter_swap(_Mid, _First);]]></Line>
      <Line Number="3690"><![CDATA[	}]]></Line>
      <Line Number="3691"><![CDATA[]]></Line>
      <Line Number="3692"><![CDATA[template<class _RanIt,]]></Line>
      <Line Number="3693"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="3694"><![CDATA[	void _Median(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred)]]></Line>
      <Line Number="3695"><![CDATA[	{	// sort median element to middle]]></Line>
      <Line Number="3696"><![CDATA[	if (40 < _Last - _First)]]></Line>
      <Line Number="3697"><![CDATA[		{	// median of nine]]></Line>
      <Line Number="3698"><![CDATA[		size_t _Step = (_Last - _First + 1) / 8;]]></Line>
      <Line Number="3699"><![CDATA[		_Med3(_First, _First + _Step, _First + 2 * _Step, _Pred);]]></Line>
      <Line Number="3700"><![CDATA[		_Med3(_Mid - _Step, _Mid, _Mid + _Step, _Pred);]]></Line>
      <Line Number="3701"><![CDATA[		_Med3(_Last - 2 * _Step, _Last - _Step, _Last, _Pred);]]></Line>
      <Line Number="3702"><![CDATA[		_Med3(_First + _Step, _Mid, _Last - _Step, _Pred);]]></Line>
      <Line Number="3703"><![CDATA[		}]]></Line>
      <Line Number="3704"><![CDATA[	else]]></Line>
      <Line Number="3705"><![CDATA[		_Med3(_First, _Mid, _Last, _Pred);]]></Line>
      <Line Number="3706"><![CDATA[	}]]></Line>
      <Line Number="3707"><![CDATA[]]></Line>
      <Line Number="3708"><![CDATA[template<class _RanIt,]]></Line>
      <Line Number="3709"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="3710"><![CDATA[	_STD pair<_RanIt, _RanIt>]]></Line>
      <Line Number="3711"><![CDATA[		_Unguarded_partition(_RanIt _First, _RanIt _Last, _Pr _Pred)]]></Line>
      <Line Number="3712"><![CDATA[	{	// partition [_First, _Last), using _Pred]]></Line>
      <Line Number="3713"><![CDATA[	_RanIt _Mid = _First + (_Last - _First) / 2;]]></Line>
      <Line Number="3714"><![CDATA[	_Median(_First, _Mid, _Last - 1, _Pred);]]></Line>
      <Line Number="3715"><![CDATA[	_RanIt _Pfirst = _Mid;]]></Line>
      <Line Number="3716"><![CDATA[	_RanIt _Plast = _Pfirst + 1;]]></Line>
      <Line Number="3717"><![CDATA[]]></Line>
      <Line Number="3718"><![CDATA[	while (_First < _Pfirst]]></Line>
      <Line Number="3719"><![CDATA[		&& !_DEBUG_LT_PRED(_Pred, *(_Pfirst - 1), *_Pfirst)]]></Line>
      <Line Number="3720"><![CDATA[		&& !_Pred(*_Pfirst, *(_Pfirst - 1)))]]></Line>
      <Line Number="3721"><![CDATA[		--_Pfirst;]]></Line>
      <Line Number="3722"><![CDATA[	while (_Plast < _Last]]></Line>
      <Line Number="3723"><![CDATA[		&& !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst)]]></Line>
      <Line Number="3724"><![CDATA[		&& !_Pred(*_Pfirst, *_Plast))]]></Line>
      <Line Number="3725"><![CDATA[		++_Plast;]]></Line>
      <Line Number="3726"><![CDATA[]]></Line>
      <Line Number="3727"><![CDATA[	_RanIt _Gfirst = _Plast;]]></Line>
      <Line Number="3728"><![CDATA[	_RanIt _Glast = _Pfirst;]]></Line>
      <Line Number="3729"><![CDATA[]]></Line>
      <Line Number="3730"><![CDATA[	for (; ; )]]></Line>
      <Line Number="3731"><![CDATA[		{	// partition]]></Line>
      <Line Number="3732"><![CDATA[		for (; _Gfirst < _Last; ++_Gfirst)]]></Line>
      <Line Number="3733"><![CDATA[			if (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst))]]></Line>
      <Line Number="3734"><![CDATA[				;]]></Line>
      <Line Number="3735"><![CDATA[			else if (_Pred(*_Gfirst, *_Pfirst))]]></Line>
      <Line Number="3736"><![CDATA[				break;]]></Line>
      <Line Number="3737"><![CDATA[			else]]></Line>
      <Line Number="3738"><![CDATA[				_STD iter_swap(_Plast++, _Gfirst);]]></Line>
      <Line Number="3739"><![CDATA[		for (; _First < _Glast; --_Glast)]]></Line>
      <Line Number="3740"><![CDATA[			if (_DEBUG_LT_PRED(_Pred, *(_Glast - 1), *_Pfirst))]]></Line>
      <Line Number="3741"><![CDATA[				;]]></Line>
      <Line Number="3742"><![CDATA[			else if (_Pred(*_Pfirst, *(_Glast - 1)))]]></Line>
      <Line Number="3743"><![CDATA[				break;]]></Line>
      <Line Number="3744"><![CDATA[			else]]></Line>
      <Line Number="3745"><![CDATA[				_STD iter_swap(--_Pfirst, _Glast - 1);]]></Line>
      <Line Number="3746"><![CDATA[		if (_Glast == _First && _Gfirst == _Last)]]></Line>
      <Line Number="3747"><![CDATA[			return (_STD pair<_RanIt, _RanIt>(_Pfirst, _Plast));]]></Line>
      <Line Number="3748"><![CDATA[]]></Line>
      <Line Number="3749"><![CDATA[		if (_Glast == _First)]]></Line>
      <Line Number="3750"><![CDATA[			{	// no room at bottom, rotate pivot upward]]></Line>
      <Line Number="3751"><![CDATA[			if (_Plast != _Gfirst)]]></Line>
      <Line Number="3752"><![CDATA[				_STD iter_swap(_Pfirst, _Plast);]]></Line>
      <Line Number="3753"><![CDATA[			++_Plast;]]></Line>
      <Line Number="3754"><![CDATA[			_STD iter_swap(_Pfirst++, _Gfirst++);]]></Line>
      <Line Number="3755"><![CDATA[			}]]></Line>
      <Line Number="3756"><![CDATA[		else if (_Gfirst == _Last)]]></Line>
      <Line Number="3757"><![CDATA[			{	// no room at top, rotate pivot downward]]></Line>
      <Line Number="3758"><![CDATA[			if (--_Glast != --_Pfirst)]]></Line>
      <Line Number="3759"><![CDATA[				_STD iter_swap(_Glast, _Pfirst);]]></Line>
      <Line Number="3760"><![CDATA[			_STD iter_swap(_Pfirst, --_Plast);]]></Line>
      <Line Number="3761"><![CDATA[			}]]></Line>
      <Line Number="3762"><![CDATA[		else]]></Line>
      <Line Number="3763"><![CDATA[			_STD iter_swap(_Gfirst++, --_Glast);]]></Line>
      <Line Number="3764"><![CDATA[		}]]></Line>
      <Line Number="3765"><![CDATA[	}]]></Line>
      <Line Number="3766"><![CDATA[]]></Line>
      <Line Number="3767"><![CDATA[template<class _RanIt,]]></Line>
      <Line Number="3768"><![CDATA[	class _Diff,]]></Line>
      <Line Number="3769"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="3770"><![CDATA[	void _Sort(_RanIt _First, _RanIt _Last, _Diff _Ideal, _Pr _Pred)]]></Line>
      <Line Number="3771"><![CDATA[	{	// order [_First, _Last), using _Pred]]></Line>
      <Line Number="3772"><![CDATA[	_Diff _Count;]]></Line>
      <Line Number="3773"><![CDATA[	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )]]></Line>
      <Line Number="3774"><![CDATA[		{	// divide and conquer by quicksort]]></Line>
      <Line Number="3775"><![CDATA[		_STD pair<_RanIt, _RanIt> _Mid =]]></Line>
      <Line Number="3776"><![CDATA[			_Unguarded_partition(_First, _Last, _Pred);]]></Line>
      <Line Number="3777"><![CDATA[		_Ideal /= 2, _Ideal += _Ideal / 2;	// allow 1.5 log2(N) divisions]]></Line>
      <Line Number="3778"><![CDATA[]]></Line>
      <Line Number="3779"><![CDATA[		if (_Mid.first - _First < _Last - _Mid.second)]]></Line>
      <Line Number="3780"><![CDATA[			{	// loop on second half]]></Line>
      <Line Number="3781"><![CDATA[			_Sort(_First, _Mid.first, _Ideal, _Pred);]]></Line>
      <Line Number="3782"><![CDATA[			_First = _Mid.second;]]></Line>
      <Line Number="3783"><![CDATA[			}]]></Line>
      <Line Number="3784"><![CDATA[		else]]></Line>
      <Line Number="3785"><![CDATA[			{	// loop on first half]]></Line>
      <Line Number="3786"><![CDATA[			_Sort(_Mid.second, _Last, _Ideal, _Pred);]]></Line>
      <Line Number="3787"><![CDATA[			_Last = _Mid.first;]]></Line>
      <Line Number="3788"><![CDATA[			}]]></Line>
      <Line Number="3789"><![CDATA[		}]]></Line>
      <Line Number="3790"><![CDATA[]]></Line>
      <Line Number="3791"><![CDATA[	if (_ISORT_MAX < _Count)]]></Line>
      <Line Number="3792"><![CDATA[		{	// heap sort if too many divisions]]></Line>
      <Line Number="3793"><![CDATA[		_STD make_heap(_First, _Last, _Pred);]]></Line>
      <Line Number="3794"><![CDATA[		_STD sort_heap(_First, _Last, _Pred);]]></Line>
      <Line Number="3795"><![CDATA[		}]]></Line>
      <Line Number="3796"><![CDATA[	else if (1 < _Count)]]></Line>
      <Line Number="3797"><![CDATA[		_Insertion_sort(_First, _Last, _Pred);	// small]]></Line>
      <Line Number="3798"><![CDATA[	}]]></Line>
      <Line Number="3799"><![CDATA[]]></Line>
      <Line Number="3800"><![CDATA[template<class _RanIt,]]></Line>
      <Line Number="3801"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="3802"><![CDATA[	void sort(_RanIt _First, _RanIt _Last, _Pr _Pred)]]></Line>
      <Line Number="3803"><![CDATA[	{	// order [_First, _Last), using _Pred]]></Line>
      <Line Number="3804"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="3805"><![CDATA[	_DEBUG_POINTER(_Pred);]]></Line>
      <Line Number="3806"><![CDATA[	_Sort(_Unchecked(_First), _Unchecked(_Last), _Last - _First, _Pred);]]></Line>
      <Line Number="3807"><![CDATA[	}]]></Line>
      <Line Number="3808"><![CDATA[]]></Line>
      <Line Number="3809"><![CDATA[		// TEMPLATE FUNCTION stable_sort]]></Line>
      <Line Number="3810"><![CDATA[template<class _BidIt,]]></Line>
      <Line Number="3811"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="3812"><![CDATA[	class _Diff> inline]]></Line>
      <Line Number="3813"><![CDATA[	void _Chunked_merge(_BidIt _First, _BidIt _Last, _OutIt _Dest,]]></Line>
      <Line Number="3814"><![CDATA[		_Diff _Chunk, _Diff _Count)]]></Line>
      <Line Number="3815"><![CDATA[	{	// copy merging chunks, using operator<]]></Line>
      <Line Number="3816"><![CDATA[	for (_Diff _Chunk2 = _Chunk * 2; _Chunk2 <= _Count; _Count -= _Chunk2)]]></Line>
      <Line Number="3817"><![CDATA[		{	// copy merging pairs of adjacent chunks]]></Line>
      <Line Number="3818"><![CDATA[		_BidIt _Mid1 = _First;]]></Line>
      <Line Number="3819"><![CDATA[		_STD advance(_Mid1, _Chunk);]]></Line>
      <Line Number="3820"><![CDATA[		_BidIt _Mid2 = _Mid1;]]></Line>
      <Line Number="3821"><![CDATA[		_STD advance(_Mid2, _Chunk);]]></Line>
      <Line Number="3822"><![CDATA[]]></Line>
      <Line Number="3823"><![CDATA[		_Dest = _Merge(_First, _Mid1, _Mid1, _Mid2, _Dest);]]></Line>
      <Line Number="3824"><![CDATA[		_First = _Mid2;]]></Line>
      <Line Number="3825"><![CDATA[		}]]></Line>
      <Line Number="3826"><![CDATA[]]></Line>
      <Line Number="3827"><![CDATA[	if (_Count <= _Chunk)]]></Line>
      <Line Number="3828"><![CDATA[		_Move(_First, _Last, _Dest);	// copy partial last chunk]]></Line>
      <Line Number="3829"><![CDATA[	else]]></Line>
      <Line Number="3830"><![CDATA[		{	// copy merging whole and partial last chunk]]></Line>
      <Line Number="3831"><![CDATA[		_BidIt _Mid = _First;]]></Line>
      <Line Number="3832"><![CDATA[		_STD advance(_Mid, _Chunk);]]></Line>
      <Line Number="3833"><![CDATA[]]></Line>
      <Line Number="3834"><![CDATA[		_Merge(_First, _Mid, _Mid, _Last, _Dest);]]></Line>
      <Line Number="3835"><![CDATA[		}]]></Line>
      <Line Number="3836"><![CDATA[	}]]></Line>
      <Line Number="3837"><![CDATA[]]></Line>
      <Line Number="3838"><![CDATA[template<class _BidIt,]]></Line>
      <Line Number="3839"><![CDATA[	class _Diff,]]></Line>
      <Line Number="3840"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="3841"><![CDATA[	void _Buffered_merge_sort(_BidIt _First, _BidIt _Last, _Diff _Count,]]></Line>
      <Line Number="3842"><![CDATA[		_Temp_iterator<_Ty>& _Tempbuf)]]></Line>
      <Line Number="3843"><![CDATA[	{	// sort using temp buffer for merges, using operator<]]></Line>
      <Line Number="3844"><![CDATA[	_BidIt _Mid = _First;]]></Line>
      <Line Number="3845"><![CDATA[	for (_Diff _Nleft = _Count; _ISORT_MAX <= _Nleft; _Nleft -= _ISORT_MAX)]]></Line>
      <Line Number="3846"><![CDATA[		{	// sort chunks]]></Line>
      <Line Number="3847"><![CDATA[		_BidIt _Midend = _Mid;]]></Line>
      <Line Number="3848"><![CDATA[		_STD advance(_Midend, (int)_ISORT_MAX);]]></Line>
      <Line Number="3849"><![CDATA[]]></Line>
      <Line Number="3850"><![CDATA[		_Insertion_sort(_Mid, _Midend);]]></Line>
      <Line Number="3851"><![CDATA[		_Mid = _Midend;]]></Line>
      <Line Number="3852"><![CDATA[		}]]></Line>
      <Line Number="3853"><![CDATA[	_Insertion_sort(_Mid, _Last);	// sort partial last chunk]]></Line>
      <Line Number="3854"><![CDATA[]]></Line>
      <Line Number="3855"><![CDATA[	for (_Diff _Chunk = _ISORT_MAX; _Chunk < _Count; _Chunk *= 2)]]></Line>
      <Line Number="3856"><![CDATA[		{	// merge adjacent pairs of chunks to and from temp buffer]]></Line>
      <Line Number="3857"><![CDATA[		_Chunked_merge(_First, _Last, _Tempbuf._Init(),]]></Line>
      <Line Number="3858"><![CDATA[			_Chunk, _Count);]]></Line>
      <Line Number="3859"><![CDATA[		_Chunked_merge(_Tempbuf._First(), _Tempbuf._Last(), _First,]]></Line>
      <Line Number="3860"><![CDATA[			_Chunk *= 2, _Count);]]></Line>
      <Line Number="3861"><![CDATA[		}]]></Line>
      <Line Number="3862"><![CDATA[	}]]></Line>
      <Line Number="3863"><![CDATA[]]></Line>
      <Line Number="3864"><![CDATA[template<class _BidIt,]]></Line>
      <Line Number="3865"><![CDATA[	class _Diff,]]></Line>
      <Line Number="3866"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="3867"><![CDATA[	void _Stable_sort(_BidIt _First, _BidIt _Last, _Diff _Count,]]></Line>
      <Line Number="3868"><![CDATA[		_Temp_iterator<_Ty>& _Tempbuf)]]></Line>
      <Line Number="3869"><![CDATA[	{	// sort preserving order of equivalents, using operator<]]></Line>
      <Line Number="3870"><![CDATA[	if (_Count <= _ISORT_MAX)]]></Line>
      <Line Number="3871"><![CDATA[		_Insertion_sort(_First, _Last);	// small]]></Line>
      <Line Number="3872"><![CDATA[	else]]></Line>
      <Line Number="3873"><![CDATA[		{	// sort halves and merge]]></Line>
      <Line Number="3874"><![CDATA[		_Diff _Count2 = (_Count + 1) / 2;]]></Line>
      <Line Number="3875"><![CDATA[		_BidIt _Mid = _First;]]></Line>
      <Line Number="3876"><![CDATA[		_STD advance(_Mid, _Count2);]]></Line>
      <Line Number="3877"><![CDATA[]]></Line>
      <Line Number="3878"><![CDATA[		if (_Count2 <= _Tempbuf._Maxlen())]]></Line>
      <Line Number="3879"><![CDATA[			{	// temp buffer big enough, sort each half using buffer]]></Line>
      <Line Number="3880"><![CDATA[			_Buffered_merge_sort(_First, _Mid, _Count2, _Tempbuf);]]></Line>
      <Line Number="3881"><![CDATA[			_Buffered_merge_sort(_Mid, _Last, _Count - _Count2, _Tempbuf);]]></Line>
      <Line Number="3882"><![CDATA[			}]]></Line>
      <Line Number="3883"><![CDATA[		else]]></Line>
      <Line Number="3884"><![CDATA[			{	// temp buffer not big enough, divide and conquer]]></Line>
      <Line Number="3885"><![CDATA[			_Stable_sort(_First, _Mid, _Count2, _Tempbuf);]]></Line>
      <Line Number="3886"><![CDATA[			_Stable_sort(_Mid, _Last, _Count - _Count2, _Tempbuf);]]></Line>
      <Line Number="3887"><![CDATA[			}]]></Line>
      <Line Number="3888"><![CDATA[]]></Line>
      <Line Number="3889"><![CDATA[		_Buffered_merge(_First, _Mid, _Last,]]></Line>
      <Line Number="3890"><![CDATA[			_Count2, _Count - _Count2, _Tempbuf);	// merge sorted halves]]></Line>
      <Line Number="3891"><![CDATA[		}]]></Line>
      <Line Number="3892"><![CDATA[	}]]></Line>
      <Line Number="3893"><![CDATA[]]></Line>
      <Line Number="3894"><![CDATA[template<class _BidIt,]]></Line>
      <Line Number="3895"><![CDATA[	class _Diff,]]></Line>
      <Line Number="3896"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="3897"><![CDATA[	void _Stable_sort(_BidIt _First, _BidIt _Last, _Diff *, _Ty *)]]></Line>
      <Line Number="3898"><![CDATA[	{	// sort preserving order of equivalents, using operator<]]></Line>
      <Line Number="3899"><![CDATA[	_Diff _Count = 0;]]></Line>
      <Line Number="3900"><![CDATA[	_Distance(_First, _Last, _Count);]]></Line>
      <Line Number="3901"><![CDATA[	_Temp_iterator<_Ty> _Tempbuf((_Count + 1) / 2);]]></Line>
      <Line Number="3902"><![CDATA[	_Stable_sort(_First, _Last, _Count, _Tempbuf);]]></Line>
      <Line Number="3903"><![CDATA[	}]]></Line>
      <Line Number="3904"><![CDATA[]]></Line>
      <Line Number="3905"><![CDATA[template<class _BidIt> inline]]></Line>
      <Line Number="3906"><![CDATA[	void stable_sort(_BidIt _First, _BidIt _Last)]]></Line>
      <Line Number="3907"><![CDATA[	{	// sort preserving order of equivalents, using operator<]]></Line>
      <Line Number="3908"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="3909"><![CDATA[	if (_First != _Last)]]></Line>
      <Line Number="3910"><![CDATA[		_Stable_sort(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="3911"><![CDATA[			_Dist_type(_First), _Val_type(_First));]]></Line>
      <Line Number="3912"><![CDATA[	}]]></Line>
      <Line Number="3913"><![CDATA[]]></Line>
      <Line Number="3914"><![CDATA[		// TEMPLATE FUNCTION stable_sort WITH PRED]]></Line>
      <Line Number="3915"><![CDATA[template<class _BidIt,]]></Line>
      <Line Number="3916"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="3917"><![CDATA[	class _Diff,]]></Line>
      <Line Number="3918"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="3919"><![CDATA[	void _Chunked_merge(_BidIt _First, _BidIt _Last, _OutIt _Dest,]]></Line>
      <Line Number="3920"><![CDATA[		_Diff _Chunk, _Diff _Count, _Pr _Pred)]]></Line>
      <Line Number="3921"><![CDATA[	{	// copy merging chunks, using _Pred]]></Line>
      <Line Number="3922"><![CDATA[	for (_Diff _Chunk2 = _Chunk * 2; _Chunk2 <= _Count; _Count -= _Chunk2)]]></Line>
      <Line Number="3923"><![CDATA[		{	// copy merging pairs of adjacent chunks]]></Line>
      <Line Number="3924"><![CDATA[		_BidIt _Mid1 = _First;]]></Line>
      <Line Number="3925"><![CDATA[		_STD advance(_Mid1, _Chunk);]]></Line>
      <Line Number="3926"><![CDATA[		_BidIt _Mid2 = _Mid1;]]></Line>
      <Line Number="3927"><![CDATA[		_STD advance(_Mid2, _Chunk);]]></Line>
      <Line Number="3928"><![CDATA[]]></Line>
      <Line Number="3929"><![CDATA[		_Dest = _Merge(_First, _Mid1, _Mid1, _Mid2, _Dest, _Pred);]]></Line>
      <Line Number="3930"><![CDATA[		_First = _Mid2;]]></Line>
      <Line Number="3931"><![CDATA[		}]]></Line>
      <Line Number="3932"><![CDATA[]]></Line>
      <Line Number="3933"><![CDATA[	if (_Count <= _Chunk)]]></Line>
      <Line Number="3934"><![CDATA[		_Move(_First, _Last, _Dest);	// copy partial last chunk]]></Line>
      <Line Number="3935"><![CDATA[	else]]></Line>
      <Line Number="3936"><![CDATA[		{	// copy merging whole and partial last chunk]]></Line>
      <Line Number="3937"><![CDATA[		_BidIt _Mid1 = _First;]]></Line>
      <Line Number="3938"><![CDATA[		_STD advance(_Mid1, _Chunk);]]></Line>
      <Line Number="3939"><![CDATA[]]></Line>
      <Line Number="3940"><![CDATA[		_Merge(_First, _Mid1, _Mid1, _Last, _Dest, _Pred);]]></Line>
      <Line Number="3941"><![CDATA[		}]]></Line>
      <Line Number="3942"><![CDATA[	}]]></Line>
      <Line Number="3943"><![CDATA[]]></Line>
      <Line Number="3944"><![CDATA[template<class _BidIt,]]></Line>
      <Line Number="3945"><![CDATA[	class _Diff,]]></Line>
      <Line Number="3946"><![CDATA[	class _Ty,]]></Line>
      <Line Number="3947"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="3948"><![CDATA[	void _Buffered_merge_sort(_BidIt _First, _BidIt _Last, _Diff _Count,]]></Line>
      <Line Number="3949"><![CDATA[		_Temp_iterator<_Ty>& _Tempbuf, _Pr _Pred)]]></Line>
      <Line Number="3950"><![CDATA[	{	// sort using temp buffer for merges, using _Pred]]></Line>
      <Line Number="3951"><![CDATA[	_BidIt _Mid = _First;]]></Line>
      <Line Number="3952"><![CDATA[	for (_Diff _Nleft = _Count; _ISORT_MAX <= _Nleft; _Nleft -= _ISORT_MAX)]]></Line>
      <Line Number="3953"><![CDATA[		{	// sort chunks]]></Line>
      <Line Number="3954"><![CDATA[		_BidIt _Midn = _Mid;]]></Line>
      <Line Number="3955"><![CDATA[		_STD advance(_Midn, (int)_ISORT_MAX);]]></Line>
      <Line Number="3956"><![CDATA[]]></Line>
      <Line Number="3957"><![CDATA[		_Insertion_sort(_Mid, _Midn, _Pred);]]></Line>
      <Line Number="3958"><![CDATA[		_Mid = _Midn;]]></Line>
      <Line Number="3959"><![CDATA[		}]]></Line>
      <Line Number="3960"><![CDATA[	_Insertion_sort(_Mid, _Last, _Pred);	// sort partial last chunk]]></Line>
      <Line Number="3961"><![CDATA[]]></Line>
      <Line Number="3962"><![CDATA[	for (_Diff _Chunk = _ISORT_MAX; _Chunk < _Count; _Chunk *= 2)]]></Line>
      <Line Number="3963"><![CDATA[		{	// merge adjacent pairs of chunks to and from temp buffer]]></Line>
      <Line Number="3964"><![CDATA[		_Chunked_merge(_First, _Last, _Tempbuf._Init(),]]></Line>
      <Line Number="3965"><![CDATA[			_Chunk, _Count, _Pred);]]></Line>
      <Line Number="3966"><![CDATA[		_Chunked_merge(_Tempbuf._First(), _Tempbuf._Last(), _First,]]></Line>
      <Line Number="3967"><![CDATA[			_Chunk *= 2, _Count, _Pred);]]></Line>
      <Line Number="3968"><![CDATA[		}]]></Line>
      <Line Number="3969"><![CDATA[	}]]></Line>
      <Line Number="3970"><![CDATA[]]></Line>
      <Line Number="3971"><![CDATA[template<class _BidIt,]]></Line>
      <Line Number="3972"><![CDATA[	class _Diff,]]></Line>
      <Line Number="3973"><![CDATA[	class _Ty,]]></Line>
      <Line Number="3974"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="3975"><![CDATA[	void _Stable_sort(_BidIt _First, _BidIt _Last, _Diff _Count,]]></Line>
      <Line Number="3976"><![CDATA[		_Temp_iterator<_Ty>& _Tempbuf, _Pr _Pred)]]></Line>
      <Line Number="3977"><![CDATA[	{	// sort preserving order of equivalents, using _Pred]]></Line>
      <Line Number="3978"><![CDATA[	if (_Count <= _ISORT_MAX)]]></Line>
      <Line Number="3979"><![CDATA[		_Insertion_sort(_First, _Last, _Pred);	// small]]></Line>
      <Line Number="3980"><![CDATA[	else]]></Line>
      <Line Number="3981"><![CDATA[		{	// sort halves and merge]]></Line>
      <Line Number="3982"><![CDATA[		_Diff _Count2 = (_Count + 1) / 2;]]></Line>
      <Line Number="3983"><![CDATA[		_BidIt _Mid = _First;]]></Line>
      <Line Number="3984"><![CDATA[		_STD advance(_Mid, _Count2);]]></Line>
      <Line Number="3985"><![CDATA[]]></Line>
      <Line Number="3986"><![CDATA[		if (_Count2 <= _Tempbuf._Maxlen())]]></Line>
      <Line Number="3987"><![CDATA[			{	// temp buffer big enough, sort each half using buffer]]></Line>
      <Line Number="3988"><![CDATA[			_Buffered_merge_sort(_First, _Mid, _Count2, _Tempbuf, _Pred);]]></Line>
      <Line Number="3989"><![CDATA[			_Buffered_merge_sort(_Mid, _Last, _Count - _Count2,]]></Line>
      <Line Number="3990"><![CDATA[				_Tempbuf, _Pred);]]></Line>
      <Line Number="3991"><![CDATA[			}]]></Line>
      <Line Number="3992"><![CDATA[		else]]></Line>
      <Line Number="3993"><![CDATA[			{	// temp buffer not big enough, divide and conquer]]></Line>
      <Line Number="3994"><![CDATA[			_Stable_sort(_First, _Mid, _Count2, _Tempbuf, _Pred);]]></Line>
      <Line Number="3995"><![CDATA[			_Stable_sort(_Mid, _Last, _Count - _Count2, _Tempbuf, _Pred);]]></Line>
      <Line Number="3996"><![CDATA[			}]]></Line>
      <Line Number="3997"><![CDATA[]]></Line>
      <Line Number="3998"><![CDATA[		_Buffered_merge(_First, _Mid, _Last,]]></Line>
      <Line Number="3999"><![CDATA[			_Count2, _Count - _Count2, _Tempbuf, _Pred);	// merge halves]]></Line>
      <Line Number="4000"><![CDATA[		}]]></Line>
      <Line Number="4001"><![CDATA[	}]]></Line>
      <Line Number="4002"><![CDATA[]]></Line>
      <Line Number="4003"><![CDATA[template<class _BidIt,]]></Line>
      <Line Number="4004"><![CDATA[	class _Diff,]]></Line>
      <Line Number="4005"><![CDATA[	class _Ty,]]></Line>
      <Line Number="4006"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="4007"><![CDATA[	void _Stable_sort(_BidIt _First, _BidIt _Last, _Diff *, _Ty *, _Pr _Pred)]]></Line>
      <Line Number="4008"><![CDATA[	{	// sort preserving order of equivalents, using _Pred]]></Line>
      <Line Number="4009"><![CDATA[	_Diff _Count = 0;]]></Line>
      <Line Number="4010"><![CDATA[	_Distance(_First, _Last, _Count);]]></Line>
      <Line Number="4011"><![CDATA[	_Temp_iterator<_Ty> _Tempbuf((_Count + 1) / 2);]]></Line>
      <Line Number="4012"><![CDATA[	_Stable_sort(_First, _Last, _Count, _Tempbuf, _Pred);]]></Line>
      <Line Number="4013"><![CDATA[	}]]></Line>
      <Line Number="4014"><![CDATA[]]></Line>
      <Line Number="4015"><![CDATA[template<class _BidIt,]]></Line>
      <Line Number="4016"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="4017"><![CDATA[	void stable_sort(_BidIt _First, _BidIt _Last, _Pr _Pred)]]></Line>
      <Line Number="4018"><![CDATA[	{	// sort preserving order of equivalents, using _Pred]]></Line>
      <Line Number="4019"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="4020"><![CDATA[	_DEBUG_POINTER(_Pred);]]></Line>
      <Line Number="4021"><![CDATA[	if (_First != _Last)]]></Line>
      <Line Number="4022"><![CDATA[		_Stable_sort(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="4023"><![CDATA[			_Dist_type(_First), _Val_type(_First), _Pred);]]></Line>
      <Line Number="4024"><![CDATA[	}]]></Line>
      <Line Number="4025"><![CDATA[]]></Line>
      <Line Number="4026"><![CDATA[		// TEMPLATE FUNCTION partial_sort]]></Line>
      <Line Number="4027"><![CDATA[template<class _RanIt,]]></Line>
      <Line Number="4028"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="4029"><![CDATA[	void _Partial_sort(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Ty *)]]></Line>
      <Line Number="4030"><![CDATA[	{	// order [First, _Last) up to _Mid, using operator<]]></Line>
      <Line Number="4031"><![CDATA[	_DEBUG_RANGE(_First, _Mid);]]></Line>
      <Line Number="4032"><![CDATA[	_DEBUG_RANGE(_Mid, _Last);]]></Line>
      <Line Number="4033"><![CDATA[	_STD make_heap(_First, _Mid);]]></Line>
      <Line Number="4034"><![CDATA[]]></Line>
      <Line Number="4035"><![CDATA[	for (_RanIt _Next = _Mid; _Next < _Last; ++_Next)]]></Line>
      <Line Number="4036"><![CDATA[		if (_DEBUG_LT(*_Next, *_First))]]></Line>
      <Line Number="4037"><![CDATA[			{	// replace top with new largest]]></Line>
      <Line Number="4038"><![CDATA[			_Ty _Val = _Move(*_Next);]]></Line>
      <Line Number="4039"><![CDATA[			_Pop_heap(_First, _Mid, _Next, _Move(_Val),]]></Line>
      <Line Number="4040"><![CDATA[				_Dist_type(_First));]]></Line>
      <Line Number="4041"><![CDATA[			}]]></Line>
      <Line Number="4042"><![CDATA[	_STD sort_heap(_First, _Mid);]]></Line>
      <Line Number="4043"><![CDATA[	}]]></Line>
      <Line Number="4044"><![CDATA[]]></Line>
      <Line Number="4045"><![CDATA[template<class _RanIt> inline]]></Line>
      <Line Number="4046"><![CDATA[	void partial_sort(_RanIt _First, _RanIt _Mid, _RanIt _Last)]]></Line>
      <Line Number="4047"><![CDATA[	{	// order [First, _Last) up to _Mid, using operator<]]></Line>
      <Line Number="4048"><![CDATA[	_Partial_sort(]]></Line>
      <Line Number="4049"><![CDATA[		_Unchecked(_First), _Unchecked(_Mid), _Unchecked(_Last),]]></Line>
      <Line Number="4050"><![CDATA[		_Val_type(_First));]]></Line>
      <Line Number="4051"><![CDATA[	}]]></Line>
      <Line Number="4052"><![CDATA[]]></Line>
      <Line Number="4053"><![CDATA[		// TEMPLATE FUNCTION partial_sort WITH PRED]]></Line>
      <Line Number="4054"><![CDATA[template<class _RanIt,]]></Line>
      <Line Number="4055"><![CDATA[	class _Ty,]]></Line>
      <Line Number="4056"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="4057"><![CDATA[	void _Partial_sort(_RanIt _First, _RanIt _Mid, _RanIt _Last,]]></Line>
      <Line Number="4058"><![CDATA[		_Pr _Pred, _Ty *)]]></Line>
      <Line Number="4059"><![CDATA[	{	// order [First, _Last) up to _Mid, using _Pred]]></Line>
      <Line Number="4060"><![CDATA[	_DEBUG_RANGE(_First, _Mid);]]></Line>
      <Line Number="4061"><![CDATA[	_DEBUG_RANGE(_Mid, _Last);]]></Line>
      <Line Number="4062"><![CDATA[	_DEBUG_POINTER(_Pred);]]></Line>
      <Line Number="4063"><![CDATA[	_STD make_heap(_First, _Mid, _Pred);]]></Line>
      <Line Number="4064"><![CDATA[]]></Line>
      <Line Number="4065"><![CDATA[	for (_RanIt _Next = _Mid; _Next < _Last; ++_Next)]]></Line>
      <Line Number="4066"><![CDATA[		if (_DEBUG_LT_PRED(_Pred, *_Next, *_First))]]></Line>
      <Line Number="4067"><![CDATA[			{	// replace top with new largest]]></Line>
      <Line Number="4068"><![CDATA[			_Ty _Val = _Move(*_Next);]]></Line>
      <Line Number="4069"><![CDATA[			_Pop_heap(_First, _Mid, _Next, _Move(_Val), _Pred,]]></Line>
      <Line Number="4070"><![CDATA[				_Dist_type(_First));]]></Line>
      <Line Number="4071"><![CDATA[			}]]></Line>
      <Line Number="4072"><![CDATA[	_STD sort_heap(_First, _Mid, _Pred);]]></Line>
      <Line Number="4073"><![CDATA[	}]]></Line>
      <Line Number="4074"><![CDATA[]]></Line>
      <Line Number="4075"><![CDATA[template<class _RanIt,]]></Line>
      <Line Number="4076"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="4077"><![CDATA[	void partial_sort(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred)]]></Line>
      <Line Number="4078"><![CDATA[	{	// order [First, _Last) up to _Mid, using _Pred]]></Line>
      <Line Number="4079"><![CDATA[	_Partial_sort(]]></Line>
      <Line Number="4080"><![CDATA[		_Unchecked(_First), _Unchecked(_Mid), _Unchecked(_Last), _Pred,]]></Line>
      <Line Number="4081"><![CDATA[		_Val_type(_First));]]></Line>
      <Line Number="4082"><![CDATA[	}]]></Line>
      <Line Number="4083"><![CDATA[]]></Line>
      <Line Number="4084"><![CDATA[		// TEMPLATE FUNCTION partial_sort_copy]]></Line>
      <Line Number="4085"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="4086"><![CDATA[	class _RanIt,]]></Line>
      <Line Number="4087"><![CDATA[	class _Diff,]]></Line>
      <Line Number="4088"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="4089"><![CDATA[	_RanIt _Partial_sort_copy(_InIt _First1, _InIt _Last1,]]></Line>
      <Line Number="4090"><![CDATA[		_RanIt _First2, _RanIt _Last2, _Diff *, _Ty *)]]></Line>
      <Line Number="4091"><![CDATA[	{	// copy [First1, _Last1) into [_First2, _Last2), using operator<]]></Line>
      <Line Number="4092"><![CDATA[	_RanIt _Mid2 = _First2;]]></Line>
      <Line Number="4093"><![CDATA[	for (; _First1 != _Last1 && _Mid2 != _Last2; ++_First1, ++_Mid2)]]></Line>
      <Line Number="4094"><![CDATA[		*_Mid2 = *_First1;	// copy min(_Last1 - _First1, _Last2 - _First2)]]></Line>
      <Line Number="4095"><![CDATA[	_STD make_heap(_First2, _Mid2);]]></Line>
      <Line Number="4096"><![CDATA[]]></Line>
      <Line Number="4097"><![CDATA[	for (; _First1 != _Last1; ++_First1)]]></Line>
      <Line Number="4098"><![CDATA[		if (_DEBUG_LT(*_First1, *_First2))]]></Line>
      <Line Number="4099"><![CDATA[			_Adjust_heap(_First2, _Diff(0), _Diff(_Mid2 - _First2),]]></Line>
      <Line Number="4100"><![CDATA[				_Ty(*_First1));	// replace top with new largest]]></Line>
      <Line Number="4101"><![CDATA[]]></Line>
      <Line Number="4102"><![CDATA[	_STD sort_heap(_First2, _Mid2);]]></Line>
      <Line Number="4103"><![CDATA[	return (_Mid2);]]></Line>
      <Line Number="4104"><![CDATA[	}]]></Line>
      <Line Number="4105"><![CDATA[]]></Line>
      <Line Number="4106"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="4107"><![CDATA[	class _RanIt> inline]]></Line>
      <Line Number="4108"><![CDATA[	_RanIt partial_sort_copy(_InIt _First1, _InIt _Last1,]]></Line>
      <Line Number="4109"><![CDATA[		_RanIt _First2, _RanIt _Last2)]]></Line>
      <Line Number="4110"><![CDATA[	{	// copy [First1, _Last1) into [_First2, _Last2), using operator<]]></Line>
      <Line Number="4111"><![CDATA[	_DEBUG_RANGE(_First1, _Last1);]]></Line>
      <Line Number="4112"><![CDATA[	_DEBUG_RANGE(_First2, _Last2);]]></Line>
      <Line Number="4113"><![CDATA[	return (_First1 == _Last1 || _First2 == _Last2 ? _First2]]></Line>
      <Line Number="4114"><![CDATA[		: _Rechecked(_First2,]]></Line>
      <Line Number="4115"><![CDATA[			_Partial_sort_copy(]]></Line>
      <Line Number="4116"><![CDATA[				_Unchecked(_First1), _Unchecked(_Last1),]]></Line>
      <Line Number="4117"><![CDATA[				_Unchecked(_First2), _Unchecked(_Last2),]]></Line>
      <Line Number="4118"><![CDATA[				_Dist_type(_First2), _Val_type(_First1))));]]></Line>
      <Line Number="4119"><![CDATA[	}]]></Line>
      <Line Number="4120"><![CDATA[]]></Line>
      <Line Number="4121"><![CDATA[		// TEMPLATE FUNCTION partial_sort_copy WITH PRED]]></Line>
      <Line Number="4122"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="4123"><![CDATA[	class _RanIt,]]></Line>
      <Line Number="4124"><![CDATA[	class _Diff,]]></Line>
      <Line Number="4125"><![CDATA[	class _Ty,]]></Line>
      <Line Number="4126"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="4127"><![CDATA[	_RanIt _Partial_sort_copy(_InIt _First1, _InIt _Last1,]]></Line>
      <Line Number="4128"><![CDATA[		_RanIt _First2, _RanIt _Last2, _Pr _Pred, _Diff *, _Ty *)]]></Line>
      <Line Number="4129"><![CDATA[	{	// copy [First1, _Last1) into [_First2, _Last2) using _Pred]]></Line>
      <Line Number="4130"><![CDATA[	_RanIt _Mid2 = _First2;]]></Line>
      <Line Number="4131"><![CDATA[	for (; _First1 != _Last1 && _Mid2 != _Last2; ++_First1, ++_Mid2)]]></Line>
      <Line Number="4132"><![CDATA[		*_Mid2 = *_First1;	// copy min(_Last1 - _First1, _Last2 - _First2)]]></Line>
      <Line Number="4133"><![CDATA[	_STD make_heap(_First2, _Mid2, _Pred);]]></Line>
      <Line Number="4134"><![CDATA[]]></Line>
      <Line Number="4135"><![CDATA[	for (; _First1 != _Last1; ++_First1)]]></Line>
      <Line Number="4136"><![CDATA[		if (_DEBUG_LT_PRED(_Pred, *_First1, *_First2))]]></Line>
      <Line Number="4137"><![CDATA[			_Adjust_heap(_First2, _Diff(0), _Diff(_Mid2 - _First2),]]></Line>
      <Line Number="4138"><![CDATA[				_Ty(*_First1), _Pred);	// replace top with new largest]]></Line>
      <Line Number="4139"><![CDATA[]]></Line>
      <Line Number="4140"><![CDATA[	_STD sort_heap(_First2, _Mid2, _Pred);]]></Line>
      <Line Number="4141"><![CDATA[	return (_Mid2);]]></Line>
      <Line Number="4142"><![CDATA[	}]]></Line>
      <Line Number="4143"><![CDATA[]]></Line>
      <Line Number="4144"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="4145"><![CDATA[	class _RanIt,]]></Line>
      <Line Number="4146"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="4147"><![CDATA[	_RanIt partial_sort_copy(_InIt _First1, _InIt _Last1,]]></Line>
      <Line Number="4148"><![CDATA[		_RanIt _First2, _RanIt _Last2, _Pr _Pred)]]></Line>
      <Line Number="4149"><![CDATA[	{	// copy [First1, _Last1) into [_First2, _Last2) using _Pred]]></Line>
      <Line Number="4150"><![CDATA[	_DEBUG_RANGE(_First1, _Last1);]]></Line>
      <Line Number="4151"><![CDATA[	_DEBUG_RANGE(_First2, _Last2);]]></Line>
      <Line Number="4152"><![CDATA[	_DEBUG_POINTER(_Pred);]]></Line>
      <Line Number="4153"><![CDATA[	return (_First1 == _Last1 || _First2 == _Last2 ? _First2]]></Line>
      <Line Number="4154"><![CDATA[		: _Rechecked(_First2,]]></Line>
      <Line Number="4155"><![CDATA[			_Partial_sort_copy(]]></Line>
      <Line Number="4156"><![CDATA[				_Unchecked(_First1), _Unchecked(_Last1),]]></Line>
      <Line Number="4157"><![CDATA[				_Unchecked(_First2), _Unchecked(_Last2), _Pred,]]></Line>
      <Line Number="4158"><![CDATA[				_Dist_type(_First2), _Val_type(_First1))));]]></Line>
      <Line Number="4159"><![CDATA[	}]]></Line>
      <Line Number="4160"><![CDATA[]]></Line>
      <Line Number="4161"><![CDATA[		// TEMPLATE FUNCTION nth_element]]></Line>
      <Line Number="4162"><![CDATA[template<class _RanIt> inline]]></Line>
      <Line Number="4163"><![CDATA[	void _Nth_element(_RanIt _First, _RanIt _Nth, _RanIt _Last)]]></Line>
      <Line Number="4164"><![CDATA[	{	// order Nth element, using operator<]]></Line>
      <Line Number="4165"><![CDATA[	for (; _ISORT_MAX < _Last - _First; )]]></Line>
      <Line Number="4166"><![CDATA[		{	// divide and conquer, ordering partition containing Nth]]></Line>
      <Line Number="4167"><![CDATA[		_STD pair<_RanIt, _RanIt> _Mid =]]></Line>
      <Line Number="4168"><![CDATA[			_Unguarded_partition(_First, _Last);]]></Line>
      <Line Number="4169"><![CDATA[]]></Line>
      <Line Number="4170"><![CDATA[		if (_Mid.second <= _Nth)]]></Line>
      <Line Number="4171"><![CDATA[			_First = _Mid.second;]]></Line>
      <Line Number="4172"><![CDATA[		else if (_Mid.first <= _Nth)]]></Line>
      <Line Number="4173"><![CDATA[			return;	// Nth inside fat pivot, done]]></Line>
      <Line Number="4174"><![CDATA[		else]]></Line>
      <Line Number="4175"><![CDATA[			_Last = _Mid.first;]]></Line>
      <Line Number="4176"><![CDATA[		}]]></Line>
      <Line Number="4177"><![CDATA[]]></Line>
      <Line Number="4178"><![CDATA[	_Insertion_sort(_First, _Last);	// sort any remainder]]></Line>
      <Line Number="4179"><![CDATA[	}]]></Line>
      <Line Number="4180"><![CDATA[]]></Line>
      <Line Number="4181"><![CDATA[template<class _RanIt> inline]]></Line>
      <Line Number="4182"><![CDATA[	void nth_element(_RanIt _First, _RanIt _Nth, _RanIt _Last)]]></Line>
      <Line Number="4183"><![CDATA[	{	// order Nth element, using operator<]]></Line>
      <Line Number="4184"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="4185"><![CDATA[	_Nth_element(]]></Line>
      <Line Number="4186"><![CDATA[		_Unchecked(_First), _Unchecked(_Nth), _Unchecked(_Last));]]></Line>
      <Line Number="4187"><![CDATA[	}]]></Line>
      <Line Number="4188"><![CDATA[]]></Line>
      <Line Number="4189"><![CDATA[		// TEMPLATE FUNCTION nth_element WITH PRED]]></Line>
      <Line Number="4190"><![CDATA[template<class _RanIt,]]></Line>
      <Line Number="4191"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="4192"><![CDATA[	void _Nth_element(_RanIt _First, _RanIt _Nth, _RanIt _Last, _Pr _Pred)]]></Line>
      <Line Number="4193"><![CDATA[	{	// order Nth element, using _Pred]]></Line>
      <Line Number="4194"><![CDATA[	for (; _ISORT_MAX < _Last - _First; )]]></Line>
      <Line Number="4195"><![CDATA[		{	// divide and conquer, ordering partition containing Nth]]></Line>
      <Line Number="4196"><![CDATA[		_STD pair<_RanIt, _RanIt> _Mid =]]></Line>
      <Line Number="4197"><![CDATA[			_Unguarded_partition(_First, _Last, _Pred);]]></Line>
      <Line Number="4198"><![CDATA[]]></Line>
      <Line Number="4199"><![CDATA[		if (_Mid.second <= _Nth)]]></Line>
      <Line Number="4200"><![CDATA[			_First = _Mid.second;]]></Line>
      <Line Number="4201"><![CDATA[		else if (_Mid.first <= _Nth)]]></Line>
      <Line Number="4202"><![CDATA[			return;	// Nth inside fat pivot, done]]></Line>
      <Line Number="4203"><![CDATA[		else]]></Line>
      <Line Number="4204"><![CDATA[			_Last = _Mid.first;]]></Line>
      <Line Number="4205"><![CDATA[		}]]></Line>
      <Line Number="4206"><![CDATA[]]></Line>
      <Line Number="4207"><![CDATA[	_Insertion_sort(_First, _Last, _Pred);	// sort any remainder]]></Line>
      <Line Number="4208"><![CDATA[	}]]></Line>
      <Line Number="4209"><![CDATA[]]></Line>
      <Line Number="4210"><![CDATA[template<class _RanIt,]]></Line>
      <Line Number="4211"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="4212"><![CDATA[	void nth_element(_RanIt _First, _RanIt _Nth, _RanIt _Last, _Pr _Pred)]]></Line>
      <Line Number="4213"><![CDATA[	{	// order Nth element, using _Pred]]></Line>
      <Line Number="4214"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="4215"><![CDATA[	_DEBUG_POINTER(_Pred);]]></Line>
      <Line Number="4216"><![CDATA[	_Nth_element(]]></Line>
      <Line Number="4217"><![CDATA[		_Unchecked(_First), _Unchecked(_Nth), _Unchecked(_Last), _Pred);]]></Line>
      <Line Number="4218"><![CDATA[	}]]></Line>
      <Line Number="4219"><![CDATA[]]></Line>
      <Line Number="4220"><![CDATA[		// TEMPLATE FUNCTION includes]]></Line>
      <Line Number="4221"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4222"><![CDATA[	class _InIt2> inline]]></Line>
      <Line Number="4223"><![CDATA[	bool _Includes(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4224"><![CDATA[		_InIt2 _First2, _InIt2 _Last2)]]></Line>
      <Line Number="4225"><![CDATA[	{	// test if all [_First1, _Last1) in [_First2, _Last2), using operator<]]></Line>
      <Line Number="4226"><![CDATA[	for (; _First1 != _Last1 && _First2 != _Last2; )]]></Line>
      <Line Number="4227"><![CDATA[		if (_DEBUG_LT(*_First2, *_First1))]]></Line>
      <Line Number="4228"><![CDATA[			return (false);]]></Line>
      <Line Number="4229"><![CDATA[		else if (*_First1 < *_First2)]]></Line>
      <Line Number="4230"><![CDATA[			++_First1;]]></Line>
      <Line Number="4231"><![CDATA[		else]]></Line>
      <Line Number="4232"><![CDATA[			{	// advance both]]></Line>
      <Line Number="4233"><![CDATA[			++_First1;]]></Line>
      <Line Number="4234"><![CDATA[			++_First2;]]></Line>
      <Line Number="4235"><![CDATA[			}]]></Line>
      <Line Number="4236"><![CDATA[	return (_First2 == _Last2);]]></Line>
      <Line Number="4237"><![CDATA[	}]]></Line>
      <Line Number="4238"><![CDATA[]]></Line>
      <Line Number="4239"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4240"><![CDATA[	class _InIt2> inline]]></Line>
      <Line Number="4241"><![CDATA[	bool includes(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4242"><![CDATA[		_InIt2 _First2, _InIt2 _Last2)]]></Line>
      <Line Number="4243"><![CDATA[	{	// test if all [_First1, _Last1) in [_First2, _Last2), using operator<]]></Line>
      <Line Number="4244"><![CDATA[	_DEBUG_ORDER(_First1, _Last1);]]></Line>
      <Line Number="4245"><![CDATA[	_DEBUG_ORDER(_First2, _Last2);]]></Line>
      <Line Number="4246"><![CDATA[	return (_Includes(_Unchecked(_First1), _Unchecked(_Last1),]]></Line>
      <Line Number="4247"><![CDATA[		_Unchecked(_First2), _Unchecked(_Last2)));]]></Line>
      <Line Number="4248"><![CDATA[	}]]></Line>
      <Line Number="4249"><![CDATA[]]></Line>
      <Line Number="4250"><![CDATA[		// TEMPLATE FUNCTION includes WITH PRED]]></Line>
      <Line Number="4251"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4252"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4253"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="4254"><![CDATA[	bool _Includes(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4255"><![CDATA[		_InIt2 _First2, _InIt2 _Last2, _Pr _Pred)]]></Line>
      <Line Number="4256"><![CDATA[	{	// test if set [_First1, _Last1) in [_First2, _Last2), using _Pred]]></Line>
      <Line Number="4257"><![CDATA[	for (; _First1 != _Last1 && _First2 != _Last2; )]]></Line>
      <Line Number="4258"><![CDATA[		if (_DEBUG_LT_PRED(_Pred, *_First2, *_First1))]]></Line>
      <Line Number="4259"><![CDATA[			return (false);]]></Line>
      <Line Number="4260"><![CDATA[		else if (_Pred(*_First1, *_First2))]]></Line>
      <Line Number="4261"><![CDATA[			++_First1;]]></Line>
      <Line Number="4262"><![CDATA[		else]]></Line>
      <Line Number="4263"><![CDATA[			{	// advance both]]></Line>
      <Line Number="4264"><![CDATA[			++_First1;]]></Line>
      <Line Number="4265"><![CDATA[			++_First2;]]></Line>
      <Line Number="4266"><![CDATA[			}]]></Line>
      <Line Number="4267"><![CDATA[	return (_First2 == _Last2);]]></Line>
      <Line Number="4268"><![CDATA[	}]]></Line>
      <Line Number="4269"><![CDATA[]]></Line>
      <Line Number="4270"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4271"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4272"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="4273"><![CDATA[	bool includes(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4274"><![CDATA[		_InIt2 _First2, _InIt2 _Last2, _Pr _Pred)]]></Line>
      <Line Number="4275"><![CDATA[	{	// test if set [_First1, _Last1) in [_First2, _Last2), using _Pred]]></Line>
      <Line Number="4276"><![CDATA[	_DEBUG_ORDER_PRED(_First1, _Last1, _Pred);]]></Line>
      <Line Number="4277"><![CDATA[	_DEBUG_ORDER_PRED(_First2, _Last2, _Pred);]]></Line>
      <Line Number="4278"><![CDATA[	return (_Includes(_Unchecked(_First1), _Unchecked(_Last1),]]></Line>
      <Line Number="4279"><![CDATA[		_Unchecked(_First2), _Unchecked(_Last2), _Pred));]]></Line>
      <Line Number="4280"><![CDATA[	}]]></Line>
      <Line Number="4281"><![CDATA[]]></Line>
      <Line Number="4282"><![CDATA[		// TEMPLATE FUNCTION set_union]]></Line>
      <Line Number="4283"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4284"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4285"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="4286"><![CDATA[	_OutIt _Set_union(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4287"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="4288"><![CDATA[		_OutIt _Dest)]]></Line>
      <Line Number="4289"><![CDATA[	{	// OR sets [_First1, _Last1) and [_First2, _Last2), using operator<]]></Line>
      <Line Number="4290"><![CDATA[	for (; _First1 != _Last1 && _First2 != _Last2; )]]></Line>
      <Line Number="4291"><![CDATA[		if (_DEBUG_LT(*_First1, *_First2))]]></Line>
      <Line Number="4292"><![CDATA[			{	// copy first]]></Line>
      <Line Number="4293"><![CDATA[			*_Dest++ = *_First1;]]></Line>
      <Line Number="4294"><![CDATA[			++_First1;]]></Line>
      <Line Number="4295"><![CDATA[			}]]></Line>
      <Line Number="4296"><![CDATA[		else if (*_First2 < *_First1)]]></Line>
      <Line Number="4297"><![CDATA[			{	// copy second]]></Line>
      <Line Number="4298"><![CDATA[			*_Dest++ = *_First2;]]></Line>
      <Line Number="4299"><![CDATA[			++_First2;]]></Line>
      <Line Number="4300"><![CDATA[			}]]></Line>
      <Line Number="4301"><![CDATA[		else]]></Line>
      <Line Number="4302"><![CDATA[			{	// advance both]]></Line>
      <Line Number="4303"><![CDATA[			*_Dest++ = *_First1;]]></Line>
      <Line Number="4304"><![CDATA[			++_First1;]]></Line>
      <Line Number="4305"><![CDATA[			++_First2;]]></Line>
      <Line Number="4306"><![CDATA[			}]]></Line>
      <Line Number="4307"><![CDATA[	_Dest = _STD copy(_First1, _Last1, _Dest);]]></Line>
      <Line Number="4308"><![CDATA[	return (_STD copy(_First2, _Last2, _Dest));]]></Line>
      <Line Number="4309"><![CDATA[	}]]></Line>
      <Line Number="4310"><![CDATA[]]></Line>
      <Line Number="4311"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 0]]></Line>
      <Line Number="4312"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4313"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4314"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="4315"><![CDATA[	_OutIt set_union(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4316"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="4317"><![CDATA[		_OutIt _Dest)]]></Line>
      <Line Number="4318"><![CDATA[	{	// OR sets [_First1, _Last1) and [_First2, _Last2), using operator<]]></Line>
      <Line Number="4319"><![CDATA[	return (_Set_union(_Unchecked(_First1), _Unchecked(_Last1),]]></Line>
      <Line Number="4320"><![CDATA[		_Unchecked(_First2), _Unchecked(_Last2),]]></Line>
      <Line Number="4321"><![CDATA[		_Dest));]]></Line>
      <Line Number="4322"><![CDATA[	}]]></Line>
      <Line Number="4323"><![CDATA[]]></Line>
      <Line Number="4324"><![CDATA[ #else /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="4325"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4326"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4327"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="4328"><![CDATA[	_OutIt _Set_union1(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4329"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="4330"><![CDATA[		_OutIt _Dest, _STD tr1::true_type)]]></Line>
      <Line Number="4331"><![CDATA[	{	// OR sets [_First1, _Last1) and [_First2, _Last2), checked dest]]></Line>
      <Line Number="4332"><![CDATA[	return (_Set_union(_First1, _Last1,]]></Line>
      <Line Number="4333"><![CDATA[		_First2, _Last2,]]></Line>
      <Line Number="4334"><![CDATA[		_Dest));]]></Line>
      <Line Number="4335"><![CDATA[	}]]></Line>
      <Line Number="4336"><![CDATA[]]></Line>
      <Line Number="4337"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4338"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4339"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="4340"><![CDATA[_SCL_INSECURE_DEPRECATE]]></Line>
      <Line Number="4341"><![CDATA[	_OutIt _Set_union1(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4342"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="4343"><![CDATA[		_OutIt _Dest, _STD tr1::false_type)]]></Line>
      <Line Number="4344"><![CDATA[	{	// OR sets [_First1, _Last1) and [_First2, _Last2), unchecked dest]]></Line>
      <Line Number="4345"><![CDATA[	return (_Set_union(_First1, _Last1,]]></Line>
      <Line Number="4346"><![CDATA[		_First2, _Last2,]]></Line>
      <Line Number="4347"><![CDATA[		_Dest));]]></Line>
      <Line Number="4348"><![CDATA[	}]]></Line>
      <Line Number="4349"><![CDATA[]]></Line>
      <Line Number="4350"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4351"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4352"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="4353"><![CDATA[	_OutIt set_union(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4354"><![CDATA[		_InIt2 _First2, _InIt2 _Last2, _OutIt _Dest)]]></Line>
      <Line Number="4355"><![CDATA[	{	// OR sets [_First1, _Last1) and [_First2, _Last2), using operator<]]></Line>
      <Line Number="4356"><![CDATA[	_DEBUG_ORDER(_First1, _Last1);]]></Line>
      <Line Number="4357"><![CDATA[	_DEBUG_ORDER(_First2, _Last2);]]></Line>
      <Line Number="4358"><![CDATA[	_DEBUG_POINTER(_Dest);]]></Line>
      <Line Number="4359"><![CDATA[	return (_Set_union1(_Unchecked(_First1), _Unchecked(_Last1),]]></Line>
      <Line Number="4360"><![CDATA[		_Unchecked(_First2), _Unchecked(_Last2),]]></Line>
      <Line Number="4361"><![CDATA[		_Dest, _Is_checked(_Dest)));]]></Line>
      <Line Number="4362"><![CDATA[	}]]></Line>
      <Line Number="4363"><![CDATA[]]></Line>
      <Line Number="4364"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4365"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4366"><![CDATA[	class _OutTy,]]></Line>
      <Line Number="4367"><![CDATA[	size_t _OutSize> inline]]></Line>
      <Line Number="4368"><![CDATA[	_OutTy *set_union(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4369"><![CDATA[		_InIt2 _First2, _InIt2 _Last2, _OutTy (&_Dest)[_OutSize])]]></Line>
      <Line Number="4370"><![CDATA[	{	// OR sets [_First1, _Last1) and [_First2, _Last2), array dest]]></Line>
      <Line Number="4371"><![CDATA[	return (_Unchecked(]]></Line>
      <Line Number="4372"><![CDATA[		set_union(_First1, _Last1,]]></Line>
      <Line Number="4373"><![CDATA[			_First2, _Last2,]]></Line>
      <Line Number="4374"><![CDATA[			_Array_iterator<_OutTy, _OutSize>(_Dest))));]]></Line>
      <Line Number="4375"><![CDATA[	}]]></Line>
      <Line Number="4376"><![CDATA[]]></Line>
      <Line Number="4377"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="4378"><![CDATA[]]></Line>
      <Line Number="4379"><![CDATA[		// TEMPLATE FUNCTION set_union WITH PRED]]></Line>
      <Line Number="4380"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4381"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4382"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="4383"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="4384"><![CDATA[	_OutIt _Set_union(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4385"><![CDATA[		_InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred)]]></Line>
      <Line Number="4386"><![CDATA[	{	// OR sets [_First1, _Last1) and [_First2, _Last2), using _Pred]]></Line>
      <Line Number="4387"><![CDATA[	for (; _First1 != _Last1 && _First2 != _Last2; )]]></Line>
      <Line Number="4388"><![CDATA[		if (_DEBUG_LT_PRED(_Pred, *_First1, *_First2))]]></Line>
      <Line Number="4389"><![CDATA[			{	// copy first]]></Line>
      <Line Number="4390"><![CDATA[			*_Dest++ = *_First1;]]></Line>
      <Line Number="4391"><![CDATA[			++_First1;]]></Line>
      <Line Number="4392"><![CDATA[			}]]></Line>
      <Line Number="4393"><![CDATA[		else if (_Pred(*_First2, *_First1))]]></Line>
      <Line Number="4394"><![CDATA[			{	// copy second]]></Line>
      <Line Number="4395"><![CDATA[			*_Dest++ = *_First2;]]></Line>
      <Line Number="4396"><![CDATA[			++_First2;]]></Line>
      <Line Number="4397"><![CDATA[			}]]></Line>
      <Line Number="4398"><![CDATA[		else]]></Line>
      <Line Number="4399"><![CDATA[			{	// advance both]]></Line>
      <Line Number="4400"><![CDATA[			*_Dest++ = *_First1;]]></Line>
      <Line Number="4401"><![CDATA[			++_First1;]]></Line>
      <Line Number="4402"><![CDATA[			++_First2;]]></Line>
      <Line Number="4403"><![CDATA[			}]]></Line>
      <Line Number="4404"><![CDATA[	_Dest = _STD copy(_First1, _Last1, _Dest);]]></Line>
      <Line Number="4405"><![CDATA[	return (_STD copy(_First2, _Last2, _Dest));]]></Line>
      <Line Number="4406"><![CDATA[	}]]></Line>
      <Line Number="4407"><![CDATA[]]></Line>
      <Line Number="4408"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 0]]></Line>
      <Line Number="4409"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4410"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4411"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="4412"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="4413"><![CDATA[	_OutIt set_union(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4414"><![CDATA[		_InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred)]]></Line>
      <Line Number="4415"><![CDATA[	{	// OR sets [_First1, _Last1) and [_First2, _Last2), using _Pred]]></Line>
      <Line Number="4416"><![CDATA[	return (_Set_union(_Unchecked(_First1), _Unchecked(_Last1),]]></Line>
      <Line Number="4417"><![CDATA[		_Unchecked(_First2), _Unchecked(_Last2),]]></Line>
      <Line Number="4418"><![CDATA[		_Dest, _Pred));]]></Line>
      <Line Number="4419"><![CDATA[	}]]></Line>
      <Line Number="4420"><![CDATA[]]></Line>
      <Line Number="4421"><![CDATA[ #else /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="4422"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4423"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4424"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="4425"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="4426"><![CDATA[	_OutIt _Set_union2(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4427"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="4428"><![CDATA[		_OutIt _Dest, _Pr _Pred, _STD tr1::true_type)]]></Line>
      <Line Number="4429"><![CDATA[	{	// OR sets [_First1, _Last1) and [_First2, _Last2), checked dest]]></Line>
      <Line Number="4430"><![CDATA[	return (_Set_union(_First1, _Last1,]]></Line>
      <Line Number="4431"><![CDATA[		_First2, _Last2,]]></Line>
      <Line Number="4432"><![CDATA[		_Dest, _Pred));]]></Line>
      <Line Number="4433"><![CDATA[	}]]></Line>
      <Line Number="4434"><![CDATA[]]></Line>
      <Line Number="4435"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4436"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4437"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="4438"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="4439"><![CDATA[_SCL_INSECURE_DEPRECATE]]></Line>
      <Line Number="4440"><![CDATA[	_OutIt _Set_union2(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4441"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="4442"><![CDATA[		_OutIt _Dest, _Pr _Pred, _STD tr1::false_type)]]></Line>
      <Line Number="4443"><![CDATA[	{	// OR sets [_First1, _Last1) and [_First2, _Last2), unchecked dest]]></Line>
      <Line Number="4444"><![CDATA[	return (_Set_union(_First1, _Last1,]]></Line>
      <Line Number="4445"><![CDATA[		_First2, _Last2,]]></Line>
      <Line Number="4446"><![CDATA[		_Dest, _Pred));]]></Line>
      <Line Number="4447"><![CDATA[	}]]></Line>
      <Line Number="4448"><![CDATA[]]></Line>
      <Line Number="4449"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4450"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4451"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="4452"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="4453"><![CDATA[	_OutIt set_union(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4454"><![CDATA[		_InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred)]]></Line>
      <Line Number="4455"><![CDATA[	{	// OR sets [_First1, _Last1) and [_First2, _Last2), using _Pred]]></Line>
      <Line Number="4456"><![CDATA[	_DEBUG_ORDER_PRED(_First1, _Last1, _Pred);]]></Line>
      <Line Number="4457"><![CDATA[	_DEBUG_ORDER_PRED(_First2, _Last2, _Pred);]]></Line>
      <Line Number="4458"><![CDATA[	_DEBUG_POINTER(_Dest);]]></Line>
      <Line Number="4459"><![CDATA[	return (_Set_union2(_Unchecked(_First1), _Unchecked(_Last1),]]></Line>
      <Line Number="4460"><![CDATA[		_Unchecked(_First2), _Unchecked(_Last2),]]></Line>
      <Line Number="4461"><![CDATA[		_Dest, _Pred, _Is_checked(_Dest)));]]></Line>
      <Line Number="4462"><![CDATA[	}]]></Line>
      <Line Number="4463"><![CDATA[]]></Line>
      <Line Number="4464"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4465"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4466"><![CDATA[	class _OutTy,]]></Line>
      <Line Number="4467"><![CDATA[	size_t _OutSize,]]></Line>
      <Line Number="4468"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="4469"><![CDATA[	_OutTy *set_union(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4470"><![CDATA[		_InIt2 _First2, _InIt2 _Last2, _OutTy (&_Dest)[_OutSize], _Pr _Pred)]]></Line>
      <Line Number="4471"><![CDATA[	{	// OR sets [_First1, _Last1) and [_First2, _Last2), array dest]]></Line>
      <Line Number="4472"><![CDATA[	return (_Unchecked(]]></Line>
      <Line Number="4473"><![CDATA[		set_union(_First1, _Last1,]]></Line>
      <Line Number="4474"><![CDATA[			_First2, _Last2,]]></Line>
      <Line Number="4475"><![CDATA[			_Array_iterator<_OutTy, _OutSize>(_Dest), _Pred)));]]></Line>
      <Line Number="4476"><![CDATA[	}]]></Line>
      <Line Number="4477"><![CDATA[]]></Line>
      <Line Number="4478"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="4479"><![CDATA[]]></Line>
      <Line Number="4480"><![CDATA[		// TEMPLATE FUNCTION set_intersection]]></Line>
      <Line Number="4481"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4482"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4483"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="4484"><![CDATA[	_OutIt _Set_intersection(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4485"><![CDATA[		_InIt2 _First2, _InIt2 _Last2, _OutIt _Dest)]]></Line>
      <Line Number="4486"><![CDATA[	{	// AND sets [_First1, _Last1) and [_First2, _Last2), using operator<]]></Line>
      <Line Number="4487"><![CDATA[	for (; _First1 != _Last1 && _First2 != _Last2; )]]></Line>
      <Line Number="4488"><![CDATA[		if (_DEBUG_LT(*_First1, *_First2))]]></Line>
      <Line Number="4489"><![CDATA[			++_First1;]]></Line>
      <Line Number="4490"><![CDATA[		else if (*_First2 < *_First1)]]></Line>
      <Line Number="4491"><![CDATA[			++_First2;]]></Line>
      <Line Number="4492"><![CDATA[		else]]></Line>
      <Line Number="4493"><![CDATA[			{	// copy equivalent]]></Line>
      <Line Number="4494"><![CDATA[			*_Dest++ = *_First1++;]]></Line>
      <Line Number="4495"><![CDATA[			++_First2;]]></Line>
      <Line Number="4496"><![CDATA[			}]]></Line>
      <Line Number="4497"><![CDATA[	return (_Dest);]]></Line>
      <Line Number="4498"><![CDATA[	}]]></Line>
      <Line Number="4499"><![CDATA[]]></Line>
      <Line Number="4500"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 0]]></Line>
      <Line Number="4501"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4502"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4503"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="4504"><![CDATA[	_OutIt set_intersection(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4505"><![CDATA[		_InIt2 _First2, _InIt2 _Last2, _OutIt _Dest)]]></Line>
      <Line Number="4506"><![CDATA[	{	// AND sets [_First1, _Last1) and [_First2, _Last2), using operator<]]></Line>
      <Line Number="4507"><![CDATA[	return (_Set_intersection(_Unchecked(_First1), _Unchecked(_Last1),]]></Line>
      <Line Number="4508"><![CDATA[		_Unchecked(_First2), _Unchecked(_Last2),]]></Line>
      <Line Number="4509"><![CDATA[		_Dest));]]></Line>
      <Line Number="4510"><![CDATA[	}]]></Line>
      <Line Number="4511"><![CDATA[]]></Line>
      <Line Number="4512"><![CDATA[ #else /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="4513"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4514"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4515"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="4516"><![CDATA[	_OutIt _Set_intersection1(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4517"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="4518"><![CDATA[		_OutIt _Dest, _STD tr1::true_type)]]></Line>
      <Line Number="4519"><![CDATA[	{	// AND sets [_First1, _Last1) and [_First2, _Last2), checked dest]]></Line>
      <Line Number="4520"><![CDATA[	return (_Set_intersection(_First1, _Last1,]]></Line>
      <Line Number="4521"><![CDATA[		_First2, _Last2,]]></Line>
      <Line Number="4522"><![CDATA[		_Dest));]]></Line>
      <Line Number="4523"><![CDATA[	}]]></Line>
      <Line Number="4524"><![CDATA[]]></Line>
      <Line Number="4525"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4526"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4527"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="4528"><![CDATA[_SCL_INSECURE_DEPRECATE]]></Line>
      <Line Number="4529"><![CDATA[	_OutIt _Set_intersection1(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4530"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="4531"><![CDATA[		_OutIt _Dest, _STD tr1::false_type)]]></Line>
      <Line Number="4532"><![CDATA[	{	// AND sets [_First1, _Last1) and [_First2, _Last2), unchecked dest]]></Line>
      <Line Number="4533"><![CDATA[	return (_Set_intersection(_First1, _Last1,]]></Line>
      <Line Number="4534"><![CDATA[		_First2, _Last2,]]></Line>
      <Line Number="4535"><![CDATA[		_Dest));]]></Line>
      <Line Number="4536"><![CDATA[	}]]></Line>
      <Line Number="4537"><![CDATA[]]></Line>
      <Line Number="4538"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4539"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4540"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="4541"><![CDATA[	_OutIt set_intersection(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4542"><![CDATA[		_InIt2 _First2, _InIt2 _Last2, _OutIt _Dest)]]></Line>
      <Line Number="4543"><![CDATA[	{	// AND sets [_First1, _Last1) and [_First2, _Last2), using operator<]]></Line>
      <Line Number="4544"><![CDATA[	_DEBUG_ORDER(_First1, _Last1);]]></Line>
      <Line Number="4545"><![CDATA[	_DEBUG_ORDER(_First2, _Last2);]]></Line>
      <Line Number="4546"><![CDATA[	_DEBUG_POINTER(_Dest);]]></Line>
      <Line Number="4547"><![CDATA[	return (_Set_intersection1(_Unchecked(_First1), _Unchecked(_Last1),]]></Line>
      <Line Number="4548"><![CDATA[		_Unchecked(_First2), _Unchecked(_Last2),]]></Line>
      <Line Number="4549"><![CDATA[		_Dest, _Is_checked(_Dest)));]]></Line>
      <Line Number="4550"><![CDATA[	}]]></Line>
      <Line Number="4551"><![CDATA[]]></Line>
      <Line Number="4552"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4553"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4554"><![CDATA[	class _OutTy,]]></Line>
      <Line Number="4555"><![CDATA[	size_t _OutSize> inline]]></Line>
      <Line Number="4556"><![CDATA[	_OutTy *set_intersection(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4557"><![CDATA[		_InIt2 _First2, _InIt2 _Last2, _OutTy (&_Dest)[_OutSize])]]></Line>
      <Line Number="4558"><![CDATA[	{	// AND sets [_First1, _Last1) and [_First2, _Last2), array dest]]></Line>
      <Line Number="4559"><![CDATA[	return (_Unchecked(]]></Line>
      <Line Number="4560"><![CDATA[		set_intersection(_First1, _Last1,]]></Line>
      <Line Number="4561"><![CDATA[			_First2, _Last2,]]></Line>
      <Line Number="4562"><![CDATA[			_Array_iterator<_OutTy, _OutSize>(_Dest))));]]></Line>
      <Line Number="4563"><![CDATA[	}]]></Line>
      <Line Number="4564"><![CDATA[]]></Line>
      <Line Number="4565"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="4566"><![CDATA[]]></Line>
      <Line Number="4567"><![CDATA[		// TEMPLATE FUNCTION set_intersection WITH PRED]]></Line>
      <Line Number="4568"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4569"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4570"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="4571"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="4572"><![CDATA[	_OutIt _Set_intersection(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4573"><![CDATA[		_InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred)]]></Line>
      <Line Number="4574"><![CDATA[	{	// AND sets [_First1, _Last1) and [_First2, _Last2), using _Pred]]></Line>
      <Line Number="4575"><![CDATA[	for (; _First1 != _Last1 && _First2 != _Last2; )]]></Line>
      <Line Number="4576"><![CDATA[		if (_DEBUG_LT_PRED(_Pred, *_First1, *_First2))]]></Line>
      <Line Number="4577"><![CDATA[			++_First1;]]></Line>
      <Line Number="4578"><![CDATA[		else if (_Pred(*_First2, *_First1))]]></Line>
      <Line Number="4579"><![CDATA[			++_First2;]]></Line>
      <Line Number="4580"><![CDATA[		else]]></Line>
      <Line Number="4581"><![CDATA[			{	// copy equivalent]]></Line>
      <Line Number="4582"><![CDATA[			*_Dest++ = *_First1++;]]></Line>
      <Line Number="4583"><![CDATA[			++_First2;]]></Line>
      <Line Number="4584"><![CDATA[			}]]></Line>
      <Line Number="4585"><![CDATA[	return (_Dest);]]></Line>
      <Line Number="4586"><![CDATA[	}]]></Line>
      <Line Number="4587"><![CDATA[]]></Line>
      <Line Number="4588"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 0]]></Line>
      <Line Number="4589"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4590"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4591"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="4592"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="4593"><![CDATA[	_OutIt set_intersection(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4594"><![CDATA[		_InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred)]]></Line>
      <Line Number="4595"><![CDATA[	{	// AND sets [_First1, _Last1) and [_First2, _Last2), using _Pred]]></Line>
      <Line Number="4596"><![CDATA[	return (_Set_intersection(_Unchecked(_First1), _Unchecked(_Last1),]]></Line>
      <Line Number="4597"><![CDATA[		_Unchecked(_First2), _Unchecked(_Last2),]]></Line>
      <Line Number="4598"><![CDATA[		_Dest, _Pred));]]></Line>
      <Line Number="4599"><![CDATA[	}]]></Line>
      <Line Number="4600"><![CDATA[]]></Line>
      <Line Number="4601"><![CDATA[ #else /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="4602"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4603"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4604"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="4605"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="4606"><![CDATA[	_OutIt _Set_intersection2(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4607"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="4608"><![CDATA[		_OutIt _Dest, _Pr _Pred, _STD tr1::true_type)]]></Line>
      <Line Number="4609"><![CDATA[	{	// AND sets [_First1, _Last1) and [_First2, _Last2), checked dest]]></Line>
      <Line Number="4610"><![CDATA[	return (_Set_intersection(_First1, _Last1,]]></Line>
      <Line Number="4611"><![CDATA[		_First2, _Last2,]]></Line>
      <Line Number="4612"><![CDATA[		_Dest, _Pred));]]></Line>
      <Line Number="4613"><![CDATA[	}]]></Line>
      <Line Number="4614"><![CDATA[]]></Line>
      <Line Number="4615"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4616"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4617"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="4618"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="4619"><![CDATA[_SCL_INSECURE_DEPRECATE]]></Line>
      <Line Number="4620"><![CDATA[	_OutIt _Set_intersection2(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4621"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="4622"><![CDATA[		_OutIt _Dest, _Pr _Pred, _STD tr1::false_type)]]></Line>
      <Line Number="4623"><![CDATA[	{	// AND sets [_First1, _Last1) and [_First2, _Last2), unchecked dest]]></Line>
      <Line Number="4624"><![CDATA[	return (_Set_intersection(_First1, _Last1,]]></Line>
      <Line Number="4625"><![CDATA[		_First2, _Last2,]]></Line>
      <Line Number="4626"><![CDATA[		_Dest, _Pred));]]></Line>
      <Line Number="4627"><![CDATA[	}]]></Line>
      <Line Number="4628"><![CDATA[]]></Line>
      <Line Number="4629"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4630"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4631"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="4632"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="4633"><![CDATA[	_OutIt set_intersection(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4634"><![CDATA[		_InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred)]]></Line>
      <Line Number="4635"><![CDATA[	{	// AND sets [_First1, _Last1) and [_First2, _Last2), using _Pred]]></Line>
      <Line Number="4636"><![CDATA[	_DEBUG_ORDER_PRED(_First1, _Last1, _Pred);]]></Line>
      <Line Number="4637"><![CDATA[	_DEBUG_ORDER_PRED(_First2, _Last2, _Pred);]]></Line>
      <Line Number="4638"><![CDATA[	_DEBUG_POINTER(_Dest);]]></Line>
      <Line Number="4639"><![CDATA[	return (_Set_intersection2(_Unchecked(_First1), _Unchecked(_Last1),]]></Line>
      <Line Number="4640"><![CDATA[		_Unchecked(_First2), _Unchecked(_Last2),]]></Line>
      <Line Number="4641"><![CDATA[		_Dest, _Pred, _Is_checked(_Dest)));]]></Line>
      <Line Number="4642"><![CDATA[	}]]></Line>
      <Line Number="4643"><![CDATA[]]></Line>
      <Line Number="4644"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4645"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4646"><![CDATA[	class _OutTy,]]></Line>
      <Line Number="4647"><![CDATA[	size_t _OutSize,]]></Line>
      <Line Number="4648"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="4649"><![CDATA[	_OutTy *set_intersection(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4650"><![CDATA[		_InIt2 _First2, _InIt2 _Last2, _OutTy (&_Dest)[_OutSize], _Pr _Pred)]]></Line>
      <Line Number="4651"><![CDATA[	{	// AND sets [_First1, _Last1) and [_First2, _Last2), array dest]]></Line>
      <Line Number="4652"><![CDATA[	return (_Unchecked(]]></Line>
      <Line Number="4653"><![CDATA[		set_intersection(_First1, _Last1,]]></Line>
      <Line Number="4654"><![CDATA[			_First2, _Last2,]]></Line>
      <Line Number="4655"><![CDATA[			_Array_iterator<_OutTy, _OutSize>(_Dest), _Pred)));]]></Line>
      <Line Number="4656"><![CDATA[	}]]></Line>
      <Line Number="4657"><![CDATA[]]></Line>
      <Line Number="4658"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="4659"><![CDATA[]]></Line>
      <Line Number="4660"><![CDATA[		// TEMPLATE FUNCTION set_difference]]></Line>
      <Line Number="4661"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4662"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4663"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="4664"><![CDATA[	_OutIt _Set_difference(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4665"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="4666"><![CDATA[		_OutIt _Dest)]]></Line>
      <Line Number="4667"><![CDATA[	{	// take set [_First2, _Last2) from [_First1, _Last1), using operator<]]></Line>
      <Line Number="4668"><![CDATA[	for (; _First1 != _Last1 && _First2 != _Last2; )]]></Line>
      <Line Number="4669"><![CDATA[		if (_DEBUG_LT(*_First1, *_First2))]]></Line>
      <Line Number="4670"><![CDATA[			{	// copy first]]></Line>
      <Line Number="4671"><![CDATA[			*_Dest++ = *_First1;]]></Line>
      <Line Number="4672"><![CDATA[			++_First1;]]></Line>
      <Line Number="4673"><![CDATA[			}]]></Line>
      <Line Number="4674"><![CDATA[		else if (*_First2 < *_First1)]]></Line>
      <Line Number="4675"><![CDATA[			++_First2;]]></Line>
      <Line Number="4676"><![CDATA[		else]]></Line>
      <Line Number="4677"><![CDATA[			{	// advance both]]></Line>
      <Line Number="4678"><![CDATA[			++_First1;]]></Line>
      <Line Number="4679"><![CDATA[			++_First2;]]></Line>
      <Line Number="4680"><![CDATA[			}]]></Line>
      <Line Number="4681"><![CDATA[	return (_STD copy(_First1, _Last1, _Dest));]]></Line>
      <Line Number="4682"><![CDATA[	}]]></Line>
      <Line Number="4683"><![CDATA[]]></Line>
      <Line Number="4684"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 0]]></Line>
      <Line Number="4685"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4686"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4687"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="4688"><![CDATA[	_OutIt set_difference(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4689"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="4690"><![CDATA[		_OutIt _Dest)]]></Line>
      <Line Number="4691"><![CDATA[	{	// take set [_First2, _Last2) from [_First1, _Last1), using operator<]]></Line>
      <Line Number="4692"><![CDATA[	return (_Set_difference(_Unchecked(_First1), _Unchecked(_Last1),]]></Line>
      <Line Number="4693"><![CDATA[		_Unchecked(_First2), _Unchecked(_Last2),]]></Line>
      <Line Number="4694"><![CDATA[		_Dest));]]></Line>
      <Line Number="4695"><![CDATA[	}]]></Line>
      <Line Number="4696"><![CDATA[]]></Line>
      <Line Number="4697"><![CDATA[ #else /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="4698"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4699"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4700"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="4701"><![CDATA[	_OutIt _Set_difference1(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4702"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="4703"><![CDATA[		_OutIt _Dest, _STD tr1::true_type)]]></Line>
      <Line Number="4704"><![CDATA[	{	// take set [_First1, _Last1) from[_First2, _Last2), checked dest]]></Line>
      <Line Number="4705"><![CDATA[	return (_Set_difference(_First1, _Last1,]]></Line>
      <Line Number="4706"><![CDATA[		_First2, _Last2,]]></Line>
      <Line Number="4707"><![CDATA[		_Dest));]]></Line>
      <Line Number="4708"><![CDATA[	}]]></Line>
      <Line Number="4709"><![CDATA[]]></Line>
      <Line Number="4710"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4711"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4712"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="4713"><![CDATA[_SCL_INSECURE_DEPRECATE]]></Line>
      <Line Number="4714"><![CDATA[	_OutIt _Set_difference1(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4715"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="4716"><![CDATA[		_OutIt _Dest, _STD tr1::false_type)]]></Line>
      <Line Number="4717"><![CDATA[	{	// take set [_First1, _Last1) from [_First2, _Last2), unchecked dest]]></Line>
      <Line Number="4718"><![CDATA[	return (_Set_difference(_First1, _Last1,]]></Line>
      <Line Number="4719"><![CDATA[		_First2, _Last2,]]></Line>
      <Line Number="4720"><![CDATA[		_Dest));]]></Line>
      <Line Number="4721"><![CDATA[	}]]></Line>
      <Line Number="4722"><![CDATA[]]></Line>
      <Line Number="4723"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4724"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4725"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="4726"><![CDATA[	_OutIt set_difference(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4727"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="4728"><![CDATA[		_OutIt _Dest)]]></Line>
      <Line Number="4729"><![CDATA[	{	// take set [_First2, _Last2) from [_First1, _Last1), using operator<]]></Line>
      <Line Number="4730"><![CDATA[	_DEBUG_ORDER(_First1, _Last1);]]></Line>
      <Line Number="4731"><![CDATA[	_DEBUG_ORDER(_First2, _Last2);]]></Line>
      <Line Number="4732"><![CDATA[	_DEBUG_POINTER(_Dest);]]></Line>
      <Line Number="4733"><![CDATA[	return (_Set_difference1(_Unchecked(_First1), _Unchecked(_Last1),]]></Line>
      <Line Number="4734"><![CDATA[		_Unchecked(_First2), _Unchecked(_Last2),]]></Line>
      <Line Number="4735"><![CDATA[		_Dest, _Is_checked(_Dest)));]]></Line>
      <Line Number="4736"><![CDATA[	}]]></Line>
      <Line Number="4737"><![CDATA[]]></Line>
      <Line Number="4738"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4739"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4740"><![CDATA[	class _OutTy,]]></Line>
      <Line Number="4741"><![CDATA[	size_t _OutSize> inline]]></Line>
      <Line Number="4742"><![CDATA[	_OutTy *set_difference(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4743"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="4744"><![CDATA[		_OutTy (&_Dest)[_OutSize])]]></Line>
      <Line Number="4745"><![CDATA[	{	// take set [_First2, _Last2) from [_First1, _Last1), array dest]]></Line>
      <Line Number="4746"><![CDATA[	return (_Unchecked(]]></Line>
      <Line Number="4747"><![CDATA[		set_difference(_First1, _Last1,]]></Line>
      <Line Number="4748"><![CDATA[			_First2, _Last2,]]></Line>
      <Line Number="4749"><![CDATA[			_Array_iterator<_OutTy, _OutSize>(_Dest))));]]></Line>
      <Line Number="4750"><![CDATA[	}]]></Line>
      <Line Number="4751"><![CDATA[]]></Line>
      <Line Number="4752"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="4753"><![CDATA[]]></Line>
      <Line Number="4754"><![CDATA[		// TEMPLATE FUNCTION set_difference WITH PRED]]></Line>
      <Line Number="4755"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4756"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4757"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="4758"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="4759"><![CDATA[	_OutIt _Set_difference(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4760"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="4761"><![CDATA[		_OutIt _Dest, _Pr _Pred)]]></Line>
      <Line Number="4762"><![CDATA[	{	// take set [_First2, _Last2) from [_First1, _Last1), using _Pred]]></Line>
      <Line Number="4763"><![CDATA[	for (; _First1 != _Last1 && _First2 != _Last2; )]]></Line>
      <Line Number="4764"><![CDATA[		if (_DEBUG_LT_PRED(_Pred, *_First1, *_First2))]]></Line>
      <Line Number="4765"><![CDATA[			{	// copy first]]></Line>
      <Line Number="4766"><![CDATA[			*_Dest++ = *_First1;]]></Line>
      <Line Number="4767"><![CDATA[			++_First1;]]></Line>
      <Line Number="4768"><![CDATA[			}]]></Line>
      <Line Number="4769"><![CDATA[		else if (_Pred(*_First2, *_First1))]]></Line>
      <Line Number="4770"><![CDATA[			++_First2;]]></Line>
      <Line Number="4771"><![CDATA[		else]]></Line>
      <Line Number="4772"><![CDATA[			{	// advance both]]></Line>
      <Line Number="4773"><![CDATA[			++_First1;]]></Line>
      <Line Number="4774"><![CDATA[			++_First2;]]></Line>
      <Line Number="4775"><![CDATA[			}]]></Line>
      <Line Number="4776"><![CDATA[	return (_STD copy(_First1, _Last1, _Dest));]]></Line>
      <Line Number="4777"><![CDATA[	}]]></Line>
      <Line Number="4778"><![CDATA[]]></Line>
      <Line Number="4779"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 0]]></Line>
      <Line Number="4780"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4781"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4782"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="4783"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="4784"><![CDATA[	_OutIt set_difference(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4785"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="4786"><![CDATA[		_OutIt _Dest, _Pr _Pred)]]></Line>
      <Line Number="4787"><![CDATA[	{	// take set [_First2, _Last2) from [_First1, _Last1), using _Pred]]></Line>
      <Line Number="4788"><![CDATA[	return (_Set_difference(_Unchecked(_First1), _Unchecked(_Last1),]]></Line>
      <Line Number="4789"><![CDATA[		_Unchecked(_First2), _Unchecked(_Last2),]]></Line>
      <Line Number="4790"><![CDATA[		_Dest, _Pred));]]></Line>
      <Line Number="4791"><![CDATA[	}]]></Line>
      <Line Number="4792"><![CDATA[]]></Line>
      <Line Number="4793"><![CDATA[ #else /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="4794"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4795"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4796"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="4797"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="4798"><![CDATA[	_OutIt _Set_difference2(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4799"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="4800"><![CDATA[		_OutIt _Dest, _Pr _Pred, _STD tr1::true_type)]]></Line>
      <Line Number="4801"><![CDATA[	{	// take set [_First1, _Last1) from [_First2, _Last2), checked dest]]></Line>
      <Line Number="4802"><![CDATA[	return (_Set_difference(_First1, _Last1,]]></Line>
      <Line Number="4803"><![CDATA[		_First2, _Last2,]]></Line>
      <Line Number="4804"><![CDATA[		_Dest, _Pred));]]></Line>
      <Line Number="4805"><![CDATA[	}]]></Line>
      <Line Number="4806"><![CDATA[]]></Line>
      <Line Number="4807"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4808"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4809"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="4810"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="4811"><![CDATA[_SCL_INSECURE_DEPRECATE]]></Line>
      <Line Number="4812"><![CDATA[	_OutIt _Set_difference2(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4813"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="4814"><![CDATA[		_OutIt _Dest, _Pr _Pred, _STD tr1::false_type)]]></Line>
      <Line Number="4815"><![CDATA[	{	// take set [_First1, _Last1) from [_First2, _Last2), unchecked dest]]></Line>
      <Line Number="4816"><![CDATA[	return (_Set_difference(_First1, _Last1,]]></Line>
      <Line Number="4817"><![CDATA[		_First2, _Last2,]]></Line>
      <Line Number="4818"><![CDATA[		_Dest, _Pred));]]></Line>
      <Line Number="4819"><![CDATA[	}]]></Line>
      <Line Number="4820"><![CDATA[]]></Line>
      <Line Number="4821"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4822"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4823"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="4824"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="4825"><![CDATA[	_OutIt set_difference(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4826"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="4827"><![CDATA[		_OutIt _Dest, _Pr _Pred)]]></Line>
      <Line Number="4828"><![CDATA[	{	// take set [_First2, _Last2) from [_First1, _Last1), using _Pred]]></Line>
      <Line Number="4829"><![CDATA[	_DEBUG_ORDER_PRED(_First1, _Last1, _Pred);]]></Line>
      <Line Number="4830"><![CDATA[	_DEBUG_ORDER_PRED(_First2, _Last2, _Pred);]]></Line>
      <Line Number="4831"><![CDATA[	_DEBUG_POINTER(_Dest);]]></Line>
      <Line Number="4832"><![CDATA[	return (_Set_difference2(_Unchecked(_First1), _Unchecked(_Last1),]]></Line>
      <Line Number="4833"><![CDATA[		_Unchecked(_First2), _Unchecked(_Last2),]]></Line>
      <Line Number="4834"><![CDATA[		_Dest, _Pred, _Is_checked(_Dest)));]]></Line>
      <Line Number="4835"><![CDATA[	}]]></Line>
      <Line Number="4836"><![CDATA[]]></Line>
      <Line Number="4837"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4838"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4839"><![CDATA[	class _OutTy,]]></Line>
      <Line Number="4840"><![CDATA[	size_t _OutSize,]]></Line>
      <Line Number="4841"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="4842"><![CDATA[	_OutTy *set_difference(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4843"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="4844"><![CDATA[		_OutTy (&_Dest)[_OutSize], _Pr _Pred)]]></Line>
      <Line Number="4845"><![CDATA[	{	// take set [_First2, _Last2) from [_First1, _Last1), array dest]]></Line>
      <Line Number="4846"><![CDATA[	return (_Unchecked(]]></Line>
      <Line Number="4847"><![CDATA[		set_difference(_First1, _Last1,]]></Line>
      <Line Number="4848"><![CDATA[			_First2, _Last2,]]></Line>
      <Line Number="4849"><![CDATA[			_Array_iterator<_OutTy, _OutSize>(_Dest), _Pred)));]]></Line>
      <Line Number="4850"><![CDATA[	}]]></Line>
      <Line Number="4851"><![CDATA[]]></Line>
      <Line Number="4852"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="4853"><![CDATA[]]></Line>
      <Line Number="4854"><![CDATA[		// TEMPLATE FUNCTION set_symmetric_difference]]></Line>
      <Line Number="4855"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4856"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4857"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="4858"><![CDATA[	_OutIt _Set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4859"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="4860"><![CDATA[		_OutIt _Dest)]]></Line>
      <Line Number="4861"><![CDATA[	{	// XOR sets [_First1, _Last1) and [_First2, _Last2), using operator<]]></Line>
      <Line Number="4862"><![CDATA[	for (; _First1 != _Last1 && _First2 != _Last2; )]]></Line>
      <Line Number="4863"><![CDATA[		if (_DEBUG_LT(*_First1, *_First2))]]></Line>
      <Line Number="4864"><![CDATA[			{	// copy first]]></Line>
      <Line Number="4865"><![CDATA[			*_Dest++ = *_First1;]]></Line>
      <Line Number="4866"><![CDATA[			++_First1;]]></Line>
      <Line Number="4867"><![CDATA[			}]]></Line>
      <Line Number="4868"><![CDATA[		else if (*_First2 < *_First1)]]></Line>
      <Line Number="4869"><![CDATA[			{	// copy second]]></Line>
      <Line Number="4870"><![CDATA[			*_Dest++ = *_First2;]]></Line>
      <Line Number="4871"><![CDATA[			++_First2;]]></Line>
      <Line Number="4872"><![CDATA[			}]]></Line>
      <Line Number="4873"><![CDATA[		else]]></Line>
      <Line Number="4874"><![CDATA[			{	// advance both]]></Line>
      <Line Number="4875"><![CDATA[			++_First1;]]></Line>
      <Line Number="4876"><![CDATA[			++_First2;]]></Line>
      <Line Number="4877"><![CDATA[			}]]></Line>
      <Line Number="4878"><![CDATA[	_Dest = _STD copy(_First1, _Last1, _Dest);]]></Line>
      <Line Number="4879"><![CDATA[	return (_STD copy(_First2, _Last2, _Dest));]]></Line>
      <Line Number="4880"><![CDATA[	}]]></Line>
      <Line Number="4881"><![CDATA[]]></Line>
      <Line Number="4882"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 0]]></Line>
      <Line Number="4883"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4884"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4885"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="4886"><![CDATA[	_OutIt set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4887"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="4888"><![CDATA[		_OutIt _Dest)]]></Line>
      <Line Number="4889"><![CDATA[	{	// XOR sets [_First1, _Last1) and [_First2, _Last2), using operator<]]></Line>
      <Line Number="4890"><![CDATA[	return (_Set_symmetric_difference(]]></Line>
      <Line Number="4891"><![CDATA[		_Unchecked(_First1), _Unchecked(_Last1),]]></Line>
      <Line Number="4892"><![CDATA[		_Unchecked(_First2), _Unchecked(_Last2),]]></Line>
      <Line Number="4893"><![CDATA[		_Dest));]]></Line>
      <Line Number="4894"><![CDATA[	}]]></Line>
      <Line Number="4895"><![CDATA[]]></Line>
      <Line Number="4896"><![CDATA[ #else /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="4897"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4898"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4899"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="4900"><![CDATA[	_OutIt _Set_symmetric_difference1(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4901"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="4902"><![CDATA[		_OutIt _Dest, _STD tr1::true_type)]]></Line>
      <Line Number="4903"><![CDATA[	{	// XOR sets [_First1, _Last1) and [_First2, _Last2), checked dest]]></Line>
      <Line Number="4904"><![CDATA[	return (_Set_symmetric_difference(_First1, _Last1,]]></Line>
      <Line Number="4905"><![CDATA[		_First2, _Last2,]]></Line>
      <Line Number="4906"><![CDATA[		_Dest));]]></Line>
      <Line Number="4907"><![CDATA[	}]]></Line>
      <Line Number="4908"><![CDATA[]]></Line>
      <Line Number="4909"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4910"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4911"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="4912"><![CDATA[_SCL_INSECURE_DEPRECATE]]></Line>
      <Line Number="4913"><![CDATA[	_OutIt _Set_symmetric_difference1(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4914"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="4915"><![CDATA[		_OutIt _Dest, _STD tr1::false_type)]]></Line>
      <Line Number="4916"><![CDATA[	{	// XOR sets [_First1, _Last1) and [_First2, _Last2), unchecked dest]]></Line>
      <Line Number="4917"><![CDATA[	return (_Set_symmetric_difference(_First1, _Last1,]]></Line>
      <Line Number="4918"><![CDATA[		_First2, _Last2,]]></Line>
      <Line Number="4919"><![CDATA[		_Dest));]]></Line>
      <Line Number="4920"><![CDATA[	}]]></Line>
      <Line Number="4921"><![CDATA[]]></Line>
      <Line Number="4922"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4923"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4924"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="4925"><![CDATA[	_OutIt set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4926"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="4927"><![CDATA[		_OutIt _Dest)]]></Line>
      <Line Number="4928"><![CDATA[	{	// XOR sets [_First1, _Last1) and [_First2, _Last2), using operator<]]></Line>
      <Line Number="4929"><![CDATA[	_DEBUG_ORDER(_First1, _Last1);]]></Line>
      <Line Number="4930"><![CDATA[	_DEBUG_ORDER(_First2, _Last2);]]></Line>
      <Line Number="4931"><![CDATA[	_DEBUG_POINTER(_Dest);]]></Line>
      <Line Number="4932"><![CDATA[	return (_Set_symmetric_difference1(]]></Line>
      <Line Number="4933"><![CDATA[		_Unchecked(_First1), _Unchecked(_Last1),]]></Line>
      <Line Number="4934"><![CDATA[		_Unchecked(_First2), _Unchecked(_Last2),]]></Line>
      <Line Number="4935"><![CDATA[		_Dest, _Is_checked(_Dest)));]]></Line>
      <Line Number="4936"><![CDATA[	}]]></Line>
      <Line Number="4937"><![CDATA[]]></Line>
      <Line Number="4938"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4939"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4940"><![CDATA[	class _OutTy,]]></Line>
      <Line Number="4941"><![CDATA[	size_t _OutSize> inline]]></Line>
      <Line Number="4942"><![CDATA[	_OutTy *set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4943"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="4944"><![CDATA[		_OutTy (&_Dest)[_OutSize])]]></Line>
      <Line Number="4945"><![CDATA[	{	// XOR sets [_First1, _Last1) and [_First2, _Last2), array dest]]></Line>
      <Line Number="4946"><![CDATA[	return (_Unchecked(]]></Line>
      <Line Number="4947"><![CDATA[		set_symmetric_difference(_First1, _Last1,]]></Line>
      <Line Number="4948"><![CDATA[			_First2, _Last2,]]></Line>
      <Line Number="4949"><![CDATA[			_Array_iterator<_OutTy, _OutSize>(_Dest))));]]></Line>
      <Line Number="4950"><![CDATA[	}]]></Line>
      <Line Number="4951"><![CDATA[]]></Line>
      <Line Number="4952"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="4953"><![CDATA[]]></Line>
      <Line Number="4954"><![CDATA[		// TEMPLATE FUNCTION set_symmetric_difference WITH PRED]]></Line>
      <Line Number="4955"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4956"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4957"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="4958"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="4959"><![CDATA[	_OutIt _Set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4960"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="4961"><![CDATA[		_OutIt _Dest, _Pr _Pred)]]></Line>
      <Line Number="4962"><![CDATA[	{	// XOR sets [_First1, _Last1) and [_First2, _Last2), using _Pred]]></Line>
      <Line Number="4963"><![CDATA[	for (; _First1 != _Last1 && _First2 != _Last2; )]]></Line>
      <Line Number="4964"><![CDATA[		if (_DEBUG_LT_PRED(_Pred, *_First1, *_First2))]]></Line>
      <Line Number="4965"><![CDATA[			{	// copy first]]></Line>
      <Line Number="4966"><![CDATA[			*_Dest++ = *_First1;]]></Line>
      <Line Number="4967"><![CDATA[			++_First1;]]></Line>
      <Line Number="4968"><![CDATA[			}]]></Line>
      <Line Number="4969"><![CDATA[		else if (_Pred(*_First2, *_First1))]]></Line>
      <Line Number="4970"><![CDATA[			{	// copy second]]></Line>
      <Line Number="4971"><![CDATA[			*_Dest++ = *_First2;]]></Line>
      <Line Number="4972"><![CDATA[			++_First2;]]></Line>
      <Line Number="4973"><![CDATA[			}]]></Line>
      <Line Number="4974"><![CDATA[		else]]></Line>
      <Line Number="4975"><![CDATA[			{	// advance both]]></Line>
      <Line Number="4976"><![CDATA[			++_First1;]]></Line>
      <Line Number="4977"><![CDATA[			++_First2;]]></Line>
      <Line Number="4978"><![CDATA[			}]]></Line>
      <Line Number="4979"><![CDATA[	_Dest = _STD copy(_First1, _Last1, _Dest);]]></Line>
      <Line Number="4980"><![CDATA[	return (_STD copy(_First2, _Last2, _Dest));]]></Line>
      <Line Number="4981"><![CDATA[	}]]></Line>
      <Line Number="4982"><![CDATA[]]></Line>
      <Line Number="4983"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 0]]></Line>
      <Line Number="4984"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="4985"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="4986"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="4987"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="4988"><![CDATA[	_OutIt set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="4989"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="4990"><![CDATA[		_OutIt _Dest, _Pr _Pred)]]></Line>
      <Line Number="4991"><![CDATA[	{	// XOR sets [_First1, _Last1) and [_First2, _Last2), using _Pred]]></Line>
      <Line Number="4992"><![CDATA[	return (_Set_symmetric_difference(]]></Line>
      <Line Number="4993"><![CDATA[		_Unchecked(_First1), _Unchecked(_Last1),]]></Line>
      <Line Number="4994"><![CDATA[		_Unchecked(_First2), _Unchecked(_Last2),]]></Line>
      <Line Number="4995"><![CDATA[		_Dest, _Pred));]]></Line>
      <Line Number="4996"><![CDATA[	}]]></Line>
      <Line Number="4997"><![CDATA[]]></Line>
      <Line Number="4998"><![CDATA[ #else /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="4999"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="5000"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="5001"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="5002"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="5003"><![CDATA[	_OutIt _Set_symmetric_difference2(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="5004"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="5005"><![CDATA[		_OutIt _Dest, _Pr _Pred, _STD tr1::true_type)]]></Line>
      <Line Number="5006"><![CDATA[	{	// XOR sets [_First1, _Last1) and [_First2, _Last2), checked dest]]></Line>
      <Line Number="5007"><![CDATA[	return (_Set_symmetric_difference(_First1, _Last1,]]></Line>
      <Line Number="5008"><![CDATA[		_First2, _Last2,]]></Line>
      <Line Number="5009"><![CDATA[		_Dest, _Pred));]]></Line>
      <Line Number="5010"><![CDATA[	}]]></Line>
      <Line Number="5011"><![CDATA[]]></Line>
      <Line Number="5012"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="5013"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="5014"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="5015"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="5016"><![CDATA[_SCL_INSECURE_DEPRECATE]]></Line>
      <Line Number="5017"><![CDATA[	_OutIt _Set_symmetric_difference2(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="5018"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="5019"><![CDATA[		_OutIt _Dest, _Pr _Pred, _STD tr1::false_type)]]></Line>
      <Line Number="5020"><![CDATA[	{	// XOR sets [_First1, _Last1) and [_First2, _Last2), unchecked dest]]></Line>
      <Line Number="5021"><![CDATA[	return (_Set_symmetric_difference(_First1, _Last1,]]></Line>
      <Line Number="5022"><![CDATA[		_First2, _Last2,]]></Line>
      <Line Number="5023"><![CDATA[		_Dest, _Pred));]]></Line>
      <Line Number="5024"><![CDATA[	}]]></Line>
      <Line Number="5025"><![CDATA[]]></Line>
      <Line Number="5026"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="5027"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="5028"><![CDATA[	class _OutIt,]]></Line>
      <Line Number="5029"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="5030"><![CDATA[	_OutIt set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="5031"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="5032"><![CDATA[		_OutIt _Dest, _Pr _Pred)]]></Line>
      <Line Number="5033"><![CDATA[	{	// XOR sets [_First1, _Last1) and [_First2, _Last2), using _Pred]]></Line>
      <Line Number="5034"><![CDATA[	_DEBUG_ORDER_PRED(_First1, _Last1, _Pred);]]></Line>
      <Line Number="5035"><![CDATA[	_DEBUG_ORDER_PRED(_First2, _Last2, _Pred);]]></Line>
      <Line Number="5036"><![CDATA[	_DEBUG_POINTER(_Dest);]]></Line>
      <Line Number="5037"><![CDATA[	return (_Set_symmetric_difference2(]]></Line>
      <Line Number="5038"><![CDATA[		_Unchecked(_First1), _Unchecked(_Last1),]]></Line>
      <Line Number="5039"><![CDATA[		_Unchecked(_First2), _Unchecked(_Last2),]]></Line>
      <Line Number="5040"><![CDATA[		_Dest, _Pred, _Is_checked(_Dest)));]]></Line>
      <Line Number="5041"><![CDATA[	}]]></Line>
      <Line Number="5042"><![CDATA[]]></Line>
      <Line Number="5043"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="5044"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="5045"><![CDATA[	class _OutTy,]]></Line>
      <Line Number="5046"><![CDATA[	size_t _OutSize,]]></Line>
      <Line Number="5047"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="5048"><![CDATA[	_OutTy *set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="5049"><![CDATA[		_InIt2 _First2, _InIt2 _Last2,]]></Line>
      <Line Number="5050"><![CDATA[		_OutTy (&_Dest)[_OutSize], _Pr _Pred)]]></Line>
      <Line Number="5051"><![CDATA[	{	// XOR sets [_First1, _Last1) and [_First2, _Last2), array dest]]></Line>
      <Line Number="5052"><![CDATA[	return (_Unchecked(]]></Line>
      <Line Number="5053"><![CDATA[		set_symmetric_difference(_First1, _Last1,]]></Line>
      <Line Number="5054"><![CDATA[			_First2, _Last2,]]></Line>
      <Line Number="5055"><![CDATA[			_Array_iterator<_OutTy, _OutSize>(_Dest), _Pred)));]]></Line>
      <Line Number="5056"><![CDATA[	}]]></Line>
      <Line Number="5057"><![CDATA[]]></Line>
      <Line Number="5058"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="5059"><![CDATA[]]></Line>
      <Line Number="5060"><![CDATA[		// TEMPLATE FUNCTION max_element]]></Line>
      <Line Number="5061"><![CDATA[template<class _FwdIt> inline]]></Line>
      <Line Number="5062"><![CDATA[	_FwdIt _Max_element(_FwdIt _First, _FwdIt _Last)]]></Line>
      <Line Number="5063"><![CDATA[	{	// find largest element, using operator<]]></Line>
      <Line Number="5064"><![CDATA[	_FwdIt _Found = _First;]]></Line>
      <Line Number="5065"><![CDATA[	if (_First != _Last)]]></Line>
      <Line Number="5066"><![CDATA[		for (; ++_First != _Last; )]]></Line>
      <Line Number="5067"><![CDATA[			if (_DEBUG_LT(*_Found, *_First))]]></Line>
      <Line Number="5068"><![CDATA[				_Found = _First;]]></Line>
      <Line Number="5069"><![CDATA[	return (_Found);]]></Line>
      <Line Number="5070"><![CDATA[	}]]></Line>
      <Line Number="5071"><![CDATA[]]></Line>
      <Line Number="5072"><![CDATA[template<class _FwdIt> inline]]></Line>
      <Line Number="5073"><![CDATA[	_FwdIt max_element(_FwdIt _First, _FwdIt _Last)]]></Line>
      <Line Number="5074"><![CDATA[	{	// find largest element, using operator<]]></Line>
      <Line Number="5075"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="5076"><![CDATA[	return (_Rechecked(_First,]]></Line>
      <Line Number="5077"><![CDATA[		_Max_element(_Unchecked(_First), _Unchecked(_Last))));]]></Line>
      <Line Number="5078"><![CDATA[	}]]></Line>
      <Line Number="5079"><![CDATA[]]></Line>
      <Line Number="5080"><![CDATA[		// TEMPLATE FUNCTION max_element WITH PRED]]></Line>
      <Line Number="5081"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="5082"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="5083"><![CDATA[	_FwdIt _Max_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)]]></Line>
      <Line Number="5084"><![CDATA[	{	// find largest element, using _Pred]]></Line>
      <Line Number="5085"><![CDATA[	_FwdIt _Found = _First;]]></Line>
      <Line Number="5086"><![CDATA[	if (_First != _Last)]]></Line>
      <Line Number="5087"><![CDATA[		for (; ++_First != _Last; )]]></Line>
      <Line Number="5088"><![CDATA[			if (_DEBUG_LT_PRED(_Pred, *_Found, *_First))]]></Line>
      <Line Number="5089"><![CDATA[				_Found = _First;]]></Line>
      <Line Number="5090"><![CDATA[	return (_Found);]]></Line>
      <Line Number="5091"><![CDATA[	}]]></Line>
      <Line Number="5092"><![CDATA[]]></Line>
      <Line Number="5093"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="5094"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="5095"><![CDATA[	_FwdIt max_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)]]></Line>
      <Line Number="5096"><![CDATA[	{	// find largest element, using _Pred]]></Line>
      <Line Number="5097"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="5098"><![CDATA[	_DEBUG_POINTER(_Pred);]]></Line>
      <Line Number="5099"><![CDATA[	return (_Rechecked(_First,]]></Line>
      <Line Number="5100"><![CDATA[		_Max_element(_Unchecked(_First), _Unchecked(_Last), _Pred)));]]></Line>
      <Line Number="5101"><![CDATA[	}]]></Line>
      <Line Number="5102"><![CDATA[]]></Line>
      <Line Number="5103"><![CDATA[		// TEMPLATE FUNCTION min_element]]></Line>
      <Line Number="5104"><![CDATA[template<class _FwdIt> inline]]></Line>
      <Line Number="5105"><![CDATA[	_FwdIt _Min_element(_FwdIt _First, _FwdIt _Last)]]></Line>
      <Line Number="5106"><![CDATA[	{	// find smallest element, using operator<]]></Line>
      <Line Number="5107"><![CDATA[	_FwdIt _Found = _First;]]></Line>
      <Line Number="5108"><![CDATA[	if (_First != _Last)]]></Line>
      <Line Number="5109"><![CDATA[		for (; ++_First != _Last; )]]></Line>
      <Line Number="5110"><![CDATA[			if (_DEBUG_LT(*_First, *_Found))]]></Line>
      <Line Number="5111"><![CDATA[				_Found = _First;]]></Line>
      <Line Number="5112"><![CDATA[	return (_Found);]]></Line>
      <Line Number="5113"><![CDATA[	}]]></Line>
      <Line Number="5114"><![CDATA[]]></Line>
      <Line Number="5115"><![CDATA[template<class _FwdIt> inline]]></Line>
      <Line Number="5116"><![CDATA[	_FwdIt min_element(_FwdIt _First, _FwdIt _Last)]]></Line>
      <Line Number="5117"><![CDATA[	{	// find smallest element, using operator<]]></Line>
      <Line Number="5118"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="5119"><![CDATA[	return (_Rechecked(_First,]]></Line>
      <Line Number="5120"><![CDATA[		_Min_element(_Unchecked(_First), _Unchecked(_Last))));]]></Line>
      <Line Number="5121"><![CDATA[	}]]></Line>
      <Line Number="5122"><![CDATA[]]></Line>
      <Line Number="5123"><![CDATA[		// TEMPLATE FUNCTION min_element WITH PRED]]></Line>
      <Line Number="5124"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="5125"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="5126"><![CDATA[	_FwdIt _Min_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)]]></Line>
      <Line Number="5127"><![CDATA[	{	// find smallest element, using _Pred]]></Line>
      <Line Number="5128"><![CDATA[	_FwdIt _Found = _First;]]></Line>
      <Line Number="5129"><![CDATA[	if (_First != _Last)]]></Line>
      <Line Number="5130"><![CDATA[		for (; ++_First != _Last; )]]></Line>
      <Line Number="5131"><![CDATA[			if (_DEBUG_LT_PRED(_Pred, *_First, *_Found))]]></Line>
      <Line Number="5132"><![CDATA[				_Found = _First;]]></Line>
      <Line Number="5133"><![CDATA[	return (_Found);]]></Line>
      <Line Number="5134"><![CDATA[	}]]></Line>
      <Line Number="5135"><![CDATA[]]></Line>
      <Line Number="5136"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="5137"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="5138"><![CDATA[	_FwdIt min_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)]]></Line>
      <Line Number="5139"><![CDATA[	{	// find smallest element, using _Pred]]></Line>
      <Line Number="5140"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="5141"><![CDATA[	_DEBUG_POINTER(_Pred);]]></Line>
      <Line Number="5142"><![CDATA[	return (_Rechecked(_First,]]></Line>
      <Line Number="5143"><![CDATA[		_Min_element(_Unchecked(_First), _Unchecked(_Last), _Pred)));]]></Line>
      <Line Number="5144"><![CDATA[	}]]></Line>
      <Line Number="5145"><![CDATA[]]></Line>
      <Line Number="5146"><![CDATA[ #if _HAS_CPP0X]]></Line>
      <Line Number="5147"><![CDATA[		// TEMPLATE FUNCTION minmax_element]]></Line>
      <Line Number="5148"><![CDATA[template<class _FwdIt> inline]]></Line>
      <Line Number="5149"><![CDATA[	_STD pair<_FwdIt, _FwdIt>]]></Line>
      <Line Number="5150"><![CDATA[		_Minmax_element(_FwdIt _First, _FwdIt _Last)]]></Line>
      <Line Number="5151"><![CDATA[	{	// find smallest and largest elements, using operator<]]></Line>
      <Line Number="5152"><![CDATA[	_STD pair<_FwdIt, _FwdIt> _Found(_First, _First);]]></Line>
      <Line Number="5153"><![CDATA[]]></Line>
      <Line Number="5154"><![CDATA[	if (_First != _Last)]]></Line>
      <Line Number="5155"><![CDATA[		for (; ++_First != _Last; )]]></Line>
      <Line Number="5156"><![CDATA[			{	// process one or two elements]]></Line>
      <Line Number="5157"><![CDATA[			_FwdIt _Next = _First;]]></Line>
      <Line Number="5158"><![CDATA[			if (++_Next == _Last)]]></Line>
      <Line Number="5159"><![CDATA[				{	// process last element]]></Line>
      <Line Number="5160"><![CDATA[				if (_DEBUG_LT(*_First, *_Found.first))]]></Line>
      <Line Number="5161"><![CDATA[					_Found.first = _First;]]></Line>
      <Line Number="5162"><![CDATA[				else if (_DEBUG_LT(*_Found.second, *_First))]]></Line>
      <Line Number="5163"><![CDATA[					_Found.second = _First;]]></Line>
      <Line Number="5164"><![CDATA[				}]]></Line>
      <Line Number="5165"><![CDATA[			else]]></Line>
      <Line Number="5166"><![CDATA[				{	// process next two elements]]></Line>
      <Line Number="5167"><![CDATA[				if (_DEBUG_LT(*_Next, *_First))]]></Line>
      <Line Number="5168"><![CDATA[					{	// test _Next for new smallest]]></Line>
      <Line Number="5169"><![CDATA[					if (_DEBUG_LT(*_Next, *_Found.first))]]></Line>
      <Line Number="5170"><![CDATA[						_Found.first = _Next;]]></Line>
      <Line Number="5171"><![CDATA[					if (_DEBUG_LT(*_Found.second, *_First))]]></Line>
      <Line Number="5172"><![CDATA[						_Found.second = _First;]]></Line>
      <Line Number="5173"><![CDATA[					}]]></Line>
      <Line Number="5174"><![CDATA[				else]]></Line>
      <Line Number="5175"><![CDATA[					{	// test _First for new smallest]]></Line>
      <Line Number="5176"><![CDATA[					if (_DEBUG_LT(*_First, *_Found.first))]]></Line>
      <Line Number="5177"><![CDATA[						_Found.first = _First;]]></Line>
      <Line Number="5178"><![CDATA[					if (_DEBUG_LT(*_Found.second, *_Next))]]></Line>
      <Line Number="5179"><![CDATA[						_Found.second = _Next;]]></Line>
      <Line Number="5180"><![CDATA[					}]]></Line>
      <Line Number="5181"><![CDATA[				_First = _Next;]]></Line>
      <Line Number="5182"><![CDATA[				}]]></Line>
      <Line Number="5183"><![CDATA[			}]]></Line>
      <Line Number="5184"><![CDATA[	return (_Found);]]></Line>
      <Line Number="5185"><![CDATA[	}]]></Line>
      <Line Number="5186"><![CDATA[]]></Line>
      <Line Number="5187"><![CDATA[template<class _FwdIt> inline]]></Line>
      <Line Number="5188"><![CDATA[	_STD pair<_FwdIt, _FwdIt>]]></Line>
      <Line Number="5189"><![CDATA[		minmax_element(_FwdIt _First, _FwdIt _Last)]]></Line>
      <Line Number="5190"><![CDATA[	{	// find smallest and largest elements, using operator<]]></Line>
      <Line Number="5191"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="5192"><![CDATA[	_STD pair<_UNCHECKED_TYPE(_FwdIt), _UNCHECKED_TYPE(_FwdIt)> _Ans(]]></Line>
      <Line Number="5193"><![CDATA[		_Minmax_element(_Unchecked(_First), _Unchecked(_Last)));]]></Line>
      <Line Number="5194"><![CDATA[	return (_STD pair<_FwdIt, _FwdIt>(]]></Line>
      <Line Number="5195"><![CDATA[		_Rechecked(_First, _Ans.first),]]></Line>
      <Line Number="5196"><![CDATA[		_Rechecked(_Last, _Ans.second)));]]></Line>
      <Line Number="5197"><![CDATA[	}]]></Line>
      <Line Number="5198"><![CDATA[]]></Line>
      <Line Number="5199"><![CDATA[		// TEMPLATE FUNCTION minmax_element WITH PRED]]></Line>
      <Line Number="5200"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="5201"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="5202"><![CDATA[	_STD pair<_FwdIt, _FwdIt>]]></Line>
      <Line Number="5203"><![CDATA[		_Minmax_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)]]></Line>
      <Line Number="5204"><![CDATA[	{	// find smallest and largest elements, using _Pred]]></Line>
      <Line Number="5205"><![CDATA[	_STD pair<_FwdIt, _FwdIt> _Found(_First, _First);]]></Line>
      <Line Number="5206"><![CDATA[]]></Line>
      <Line Number="5207"><![CDATA[	if (_First != _Last)]]></Line>
      <Line Number="5208"><![CDATA[		for (; ++_First != _Last; )]]></Line>
      <Line Number="5209"><![CDATA[			{	// process one or two elements]]></Line>
      <Line Number="5210"><![CDATA[			_FwdIt _Next = _First;]]></Line>
      <Line Number="5211"><![CDATA[			if (++_Next == _Last)]]></Line>
      <Line Number="5212"><![CDATA[				{	// process last element]]></Line>
      <Line Number="5213"><![CDATA[				if (_DEBUG_LT_PRED(_Pred, *_First, *_Found.first))]]></Line>
      <Line Number="5214"><![CDATA[					_Found.first = _First;]]></Line>
      <Line Number="5215"><![CDATA[				else if (_DEBUG_LT_PRED(_Pred, *_Found.second, *_First))]]></Line>
      <Line Number="5216"><![CDATA[					_Found.second = _First;]]></Line>
      <Line Number="5217"><![CDATA[				}]]></Line>
      <Line Number="5218"><![CDATA[			else]]></Line>
      <Line Number="5219"><![CDATA[				{	// process next two elements]]></Line>
      <Line Number="5220"><![CDATA[				if (_DEBUG_LT_PRED(_Pred, *_Next, *_First))]]></Line>
      <Line Number="5221"><![CDATA[					{	// test _Next for new smallest]]></Line>
      <Line Number="5222"><![CDATA[					if (_DEBUG_LT_PRED(_Pred, *_Next, *_Found.first))]]></Line>
      <Line Number="5223"><![CDATA[						_Found.first = _Next;]]></Line>
      <Line Number="5224"><![CDATA[					if (_DEBUG_LT_PRED(_Pred, *_Found.second, *_First))]]></Line>
      <Line Number="5225"><![CDATA[						_Found.second = _First;]]></Line>
      <Line Number="5226"><![CDATA[					}]]></Line>
      <Line Number="5227"><![CDATA[				else]]></Line>
      <Line Number="5228"><![CDATA[					{	// test _First for new smallest]]></Line>
      <Line Number="5229"><![CDATA[					if (_DEBUG_LT_PRED(_Pred, *_First, *_Found.first))]]></Line>
      <Line Number="5230"><![CDATA[						_Found.first = _First;]]></Line>
      <Line Number="5231"><![CDATA[					if (_DEBUG_LT_PRED(_Pred, *_Found.second, *_Next))]]></Line>
      <Line Number="5232"><![CDATA[						_Found.second = _Next;]]></Line>
      <Line Number="5233"><![CDATA[					}]]></Line>
      <Line Number="5234"><![CDATA[				_First = _Next;]]></Line>
      <Line Number="5235"><![CDATA[				}]]></Line>
      <Line Number="5236"><![CDATA[			}]]></Line>
      <Line Number="5237"><![CDATA[	return (_Found);]]></Line>
      <Line Number="5238"><![CDATA[	}]]></Line>
      <Line Number="5239"><![CDATA[]]></Line>
      <Line Number="5240"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="5241"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="5242"><![CDATA[	_STD pair<_FwdIt, _FwdIt>]]></Line>
      <Line Number="5243"><![CDATA[		minmax_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)]]></Line>
      <Line Number="5244"><![CDATA[	{	// find smallest and largest elements, using _Pred]]></Line>
      <Line Number="5245"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="5246"><![CDATA[	_DEBUG_POINTER(_Pred);]]></Line>
      <Line Number="5247"><![CDATA[	_STD pair<_UNCHECKED_TYPE(_FwdIt), _UNCHECKED_TYPE(_FwdIt)> _Ans(]]></Line>
      <Line Number="5248"><![CDATA[		_Minmax_element(_Unchecked(_First), _Unchecked(_Last), _Pred));]]></Line>
      <Line Number="5249"><![CDATA[	return (_STD pair<_FwdIt, _FwdIt>(]]></Line>
      <Line Number="5250"><![CDATA[		_Rechecked(_First, _Ans.first),]]></Line>
      <Line Number="5251"><![CDATA[		_Rechecked(_Last, _Ans.second)));]]></Line>
      <Line Number="5252"><![CDATA[	}]]></Line>
      <Line Number="5253"><![CDATA[ #endif /* _HAS_CPP0X */]]></Line>
      <Line Number="5254"><![CDATA[]]></Line>
      <Line Number="5255"><![CDATA[		// TEMPLATE FUNCTION next_permutation]]></Line>
      <Line Number="5256"><![CDATA[template<class _BidIt> inline]]></Line>
      <Line Number="5257"><![CDATA[	bool _Next_permutation(_BidIt _First, _BidIt _Last)]]></Line>
      <Line Number="5258"><![CDATA[	{	// permute and test for pure ascending, using operator<]]></Line>
      <Line Number="5259"><![CDATA[	_BidIt _Next = _Last;]]></Line>
      <Line Number="5260"><![CDATA[	if (_First == _Last || _First == --_Next)]]></Line>
      <Line Number="5261"><![CDATA[		return (false);]]></Line>
      <Line Number="5262"><![CDATA[]]></Line>
      <Line Number="5263"><![CDATA[	for (; ; )]]></Line>
      <Line Number="5264"><![CDATA[		{	// find rightmost element smaller than successor]]></Line>
      <Line Number="5265"><![CDATA[		_BidIt _Next1 = _Next;]]></Line>
      <Line Number="5266"><![CDATA[		if (_DEBUG_LT(*--_Next, *_Next1))]]></Line>
      <Line Number="5267"><![CDATA[			{	// swap with rightmost element that's smaller, flip suffix]]></Line>
      <Line Number="5268"><![CDATA[			_BidIt _Mid = _Last;]]></Line>
      <Line Number="5269"><![CDATA[			for (; !_DEBUG_LT(*_Next, *--_Mid); )]]></Line>
      <Line Number="5270"><![CDATA[				;]]></Line>
      <Line Number="5271"><![CDATA[			_STD iter_swap(_Next, _Mid);]]></Line>
      <Line Number="5272"><![CDATA[			_STD reverse(_Next1, _Last);]]></Line>
      <Line Number="5273"><![CDATA[			return (true);]]></Line>
      <Line Number="5274"><![CDATA[			}]]></Line>
      <Line Number="5275"><![CDATA[]]></Line>
      <Line Number="5276"><![CDATA[		if (_Next == _First)]]></Line>
      <Line Number="5277"><![CDATA[			{	// pure descending, flip all]]></Line>
      <Line Number="5278"><![CDATA[			_STD reverse(_First, _Last);]]></Line>
      <Line Number="5279"><![CDATA[			return (false);]]></Line>
      <Line Number="5280"><![CDATA[			}]]></Line>
      <Line Number="5281"><![CDATA[		}]]></Line>
      <Line Number="5282"><![CDATA[	}]]></Line>
      <Line Number="5283"><![CDATA[]]></Line>
      <Line Number="5284"><![CDATA[template<class _BidIt> inline]]></Line>
      <Line Number="5285"><![CDATA[	bool next_permutation(_BidIt _First, _BidIt _Last)]]></Line>
      <Line Number="5286"><![CDATA[	{	// permute and test for pure ascending, using operator<]]></Line>
      <Line Number="5287"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="5288"><![CDATA[	return (_Next_permutation(_Unchecked(_First), _Unchecked(_Last)));]]></Line>
      <Line Number="5289"><![CDATA[	}]]></Line>
      <Line Number="5290"><![CDATA[]]></Line>
      <Line Number="5291"><![CDATA[		// TEMPLATE FUNCTION next_permutation WITH PRED]]></Line>
      <Line Number="5292"><![CDATA[template<class _BidIt,]]></Line>
      <Line Number="5293"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="5294"><![CDATA[	bool _Next_permutation(_BidIt _First, _BidIt _Last, _Pr _Pred)]]></Line>
      <Line Number="5295"><![CDATA[	{	// permute and test for pure ascending, using _Pred]]></Line>
      <Line Number="5296"><![CDATA[	_BidIt _Next = _Last;]]></Line>
      <Line Number="5297"><![CDATA[	if (_First == _Last || _First == --_Next)]]></Line>
      <Line Number="5298"><![CDATA[		return (false);]]></Line>
      <Line Number="5299"><![CDATA[]]></Line>
      <Line Number="5300"><![CDATA[	for (; ; )]]></Line>
      <Line Number="5301"><![CDATA[		{	// find rightmost element smaller than successor]]></Line>
      <Line Number="5302"><![CDATA[		_BidIt _Next1 = _Next;]]></Line>
      <Line Number="5303"><![CDATA[		if (_DEBUG_LT_PRED(_Pred, *--_Next, *_Next1))]]></Line>
      <Line Number="5304"><![CDATA[			{	// swap with rightmost element that's smaller, flip suffix]]></Line>
      <Line Number="5305"><![CDATA[			_BidIt _Mid = _Last;]]></Line>
      <Line Number="5306"><![CDATA[			for (; !_DEBUG_LT_PRED(_Pred, *_Next, *--_Mid); )]]></Line>
      <Line Number="5307"><![CDATA[				;]]></Line>
      <Line Number="5308"><![CDATA[			_STD iter_swap(_Next, _Mid);]]></Line>
      <Line Number="5309"><![CDATA[			_STD reverse(_Next1, _Last);]]></Line>
      <Line Number="5310"><![CDATA[			return (true);]]></Line>
      <Line Number="5311"><![CDATA[			}]]></Line>
      <Line Number="5312"><![CDATA[]]></Line>
      <Line Number="5313"><![CDATA[		if (_Next == _First)]]></Line>
      <Line Number="5314"><![CDATA[			{	// pure descending, flip all]]></Line>
      <Line Number="5315"><![CDATA[			_STD reverse(_First, _Last);]]></Line>
      <Line Number="5316"><![CDATA[			return (false);]]></Line>
      <Line Number="5317"><![CDATA[			}]]></Line>
      <Line Number="5318"><![CDATA[		}]]></Line>
      <Line Number="5319"><![CDATA[	}]]></Line>
      <Line Number="5320"><![CDATA[]]></Line>
      <Line Number="5321"><![CDATA[template<class _BidIt,]]></Line>
      <Line Number="5322"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="5323"><![CDATA[	bool next_permutation(_BidIt _First, _BidIt _Last, _Pr _Pred)]]></Line>
      <Line Number="5324"><![CDATA[	{	// permute and test for pure ascending, using _Pred]]></Line>
      <Line Number="5325"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="5326"><![CDATA[	_DEBUG_POINTER(_Pred);]]></Line>
      <Line Number="5327"><![CDATA[	return (_Next_permutation(_Unchecked(_First), _Unchecked(_Last), _Pred));]]></Line>
      <Line Number="5328"><![CDATA[	}]]></Line>
      <Line Number="5329"><![CDATA[]]></Line>
      <Line Number="5330"><![CDATA[		// TEMPLATE FUNCTION prev_permutation]]></Line>
      <Line Number="5331"><![CDATA[template<class _BidIt> inline]]></Line>
      <Line Number="5332"><![CDATA[	bool _Prev_permutation(_BidIt _First, _BidIt _Last)]]></Line>
      <Line Number="5333"><![CDATA[	{	// reverse permute and test for pure descending, using operator<]]></Line>
      <Line Number="5334"><![CDATA[	_BidIt _Next = _Last;]]></Line>
      <Line Number="5335"><![CDATA[	if (_First == _Last || _First == --_Next)]]></Line>
      <Line Number="5336"><![CDATA[		return (false);]]></Line>
      <Line Number="5337"><![CDATA[	for (; ; )]]></Line>
      <Line Number="5338"><![CDATA[		{	// find rightmost element not smaller than successor]]></Line>
      <Line Number="5339"><![CDATA[		_BidIt _Next1 = _Next;]]></Line>
      <Line Number="5340"><![CDATA[		if (_DEBUG_LT(*_Next1, *--_Next))]]></Line>
      <Line Number="5341"><![CDATA[			{	// swap with rightmost element that's not smaller, flip suffix]]></Line>
      <Line Number="5342"><![CDATA[			_BidIt _Mid = _Last;]]></Line>
      <Line Number="5343"><![CDATA[			for (; !_DEBUG_LT(*--_Mid, *_Next); )]]></Line>
      <Line Number="5344"><![CDATA[				;]]></Line>
      <Line Number="5345"><![CDATA[			_STD iter_swap(_Next, _Mid);]]></Line>
      <Line Number="5346"><![CDATA[			_STD reverse(_Next1, _Last);]]></Line>
      <Line Number="5347"><![CDATA[			return (true);]]></Line>
      <Line Number="5348"><![CDATA[			}]]></Line>
      <Line Number="5349"><![CDATA[]]></Line>
      <Line Number="5350"><![CDATA[		if (_Next == _First)]]></Line>
      <Line Number="5351"><![CDATA[			{	// pure ascending, flip all]]></Line>
      <Line Number="5352"><![CDATA[			_STD reverse(_First, _Last);]]></Line>
      <Line Number="5353"><![CDATA[			return (false);]]></Line>
      <Line Number="5354"><![CDATA[			}]]></Line>
      <Line Number="5355"><![CDATA[		}]]></Line>
      <Line Number="5356"><![CDATA[	}]]></Line>
      <Line Number="5357"><![CDATA[]]></Line>
      <Line Number="5358"><![CDATA[template<class _BidIt> inline]]></Line>
      <Line Number="5359"><![CDATA[	bool prev_permutation(_BidIt _First, _BidIt _Last)]]></Line>
      <Line Number="5360"><![CDATA[	{	// reverse permute and test for pure descending, using operator<]]></Line>
      <Line Number="5361"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="5362"><![CDATA[	return (_Prev_permutation(_Unchecked(_First), _Unchecked(_Last)));]]></Line>
      <Line Number="5363"><![CDATA[	}]]></Line>
      <Line Number="5364"><![CDATA[]]></Line>
      <Line Number="5365"><![CDATA[		// TEMPLATE FUNCTION prev_permutation WITH PRED]]></Line>
      <Line Number="5366"><![CDATA[template<class _BidIt,]]></Line>
      <Line Number="5367"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="5368"><![CDATA[	bool _Prev_permutation(_BidIt _First, _BidIt _Last, _Pr _Pred)]]></Line>
      <Line Number="5369"><![CDATA[	{	// reverse permute and test for pure descending, using _Pred]]></Line>
      <Line Number="5370"><![CDATA[	_BidIt _Next = _Last;]]></Line>
      <Line Number="5371"><![CDATA[	if (_First == _Last || _First == --_Next)]]></Line>
      <Line Number="5372"><![CDATA[		return (false);]]></Line>
      <Line Number="5373"><![CDATA[]]></Line>
      <Line Number="5374"><![CDATA[	for (; ; )]]></Line>
      <Line Number="5375"><![CDATA[		{	// find rightmost element not smaller than successor]]></Line>
      <Line Number="5376"><![CDATA[		_BidIt _Next1 = _Next;]]></Line>
      <Line Number="5377"><![CDATA[		if (_DEBUG_LT_PRED(_Pred, *_Next1, *--_Next))]]></Line>
      <Line Number="5378"><![CDATA[			{	// swap with rightmost element that's not smaller, flip suffix]]></Line>
      <Line Number="5379"><![CDATA[			_BidIt _Mid = _Last;]]></Line>
      <Line Number="5380"><![CDATA[			for (; !_DEBUG_LT_PRED(_Pred, *--_Mid, *_Next); )]]></Line>
      <Line Number="5381"><![CDATA[				;]]></Line>
      <Line Number="5382"><![CDATA[			_STD iter_swap(_Next, _Mid);]]></Line>
      <Line Number="5383"><![CDATA[			_STD reverse(_Next1, _Last);]]></Line>
      <Line Number="5384"><![CDATA[			return (true);]]></Line>
      <Line Number="5385"><![CDATA[			}]]></Line>
      <Line Number="5386"><![CDATA[]]></Line>
      <Line Number="5387"><![CDATA[		if (_Next == _First)]]></Line>
      <Line Number="5388"><![CDATA[			{	// pure ascending, flip all]]></Line>
      <Line Number="5389"><![CDATA[			_STD reverse(_First, _Last);]]></Line>
      <Line Number="5390"><![CDATA[			return (false);]]></Line>
      <Line Number="5391"><![CDATA[			}]]></Line>
      <Line Number="5392"><![CDATA[		}]]></Line>
      <Line Number="5393"><![CDATA[	}]]></Line>
      <Line Number="5394"><![CDATA[]]></Line>
      <Line Number="5395"><![CDATA[template<class _BidIt,]]></Line>
      <Line Number="5396"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="5397"><![CDATA[	bool prev_permutation(_BidIt _First, _BidIt _Last, _Pr _Pred)]]></Line>
      <Line Number="5398"><![CDATA[	{	// reverse permute and test for pure descending, using _Pred]]></Line>
      <Line Number="5399"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="5400"><![CDATA[	_DEBUG_POINTER(_Pred);]]></Line>
      <Line Number="5401"><![CDATA[	return (_Prev_permutation(_Unchecked(_First), _Unchecked(_Last), _Pred));]]></Line>
      <Line Number="5402"><![CDATA[	}]]></Line>
      <Line Number="5403"><![CDATA[]]></Line>
      <Line Number="5404"><![CDATA[ #if _HAS_CPP0X]]></Line>
      <Line Number="5405"><![CDATA[		// TEMPLATE FUNCTIONS is_heap AND is_heap_until]]></Line>
      <Line Number="5406"><![CDATA[template<class _RanIt,]]></Line>
      <Line Number="5407"><![CDATA[	class _Diff> inline]]></Line>
      <Line Number="5408"><![CDATA[	_RanIt _Is_heap_until(_RanIt _First, _RanIt _Last, _Diff *)]]></Line>
      <Line Number="5409"><![CDATA[	{	// find extent of range that is a heap ordered by operator<]]></Line>
      <Line Number="5410"><![CDATA[	_Diff _Size = _Last - _First;]]></Line>
      <Line Number="5411"><![CDATA[]]></Line>
      <Line Number="5412"><![CDATA[	if (2 <= _Size)]]></Line>
      <Line Number="5413"><![CDATA[		for (_Diff _Off = 0; ++_Off < _Size; )]]></Line>
      <Line Number="5414"><![CDATA[			if (_DEBUG_LT(*(_First + (_Off - 1) / 2), *(_First + _Off)))]]></Line>
      <Line Number="5415"><![CDATA[				return (_First + _Off);]]></Line>
      <Line Number="5416"><![CDATA[	return (_Last);]]></Line>
      <Line Number="5417"><![CDATA[	}]]></Line>
      <Line Number="5418"><![CDATA[]]></Line>
      <Line Number="5419"><![CDATA[template<class _RanIt>]]></Line>
      <Line Number="5420"><![CDATA[	_RanIt is_heap_until(_RanIt _First, _RanIt _Last)]]></Line>
      <Line Number="5421"><![CDATA[	{	// find extent of range that is a heap ordered by operator<]]></Line>
      <Line Number="5422"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="5423"><![CDATA[	return (_Rechecked(_First,]]></Line>
      <Line Number="5424"><![CDATA[		_Is_heap_until(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="5425"><![CDATA[			_Dist_type(_First))));]]></Line>
      <Line Number="5426"><![CDATA[	}]]></Line>
      <Line Number="5427"><![CDATA[]]></Line>
      <Line Number="5428"><![CDATA[template<class _RanIt>]]></Line>
      <Line Number="5429"><![CDATA[	bool is_heap(_RanIt _First, _RanIt _Last)]]></Line>
      <Line Number="5430"><![CDATA[	{	// test if range is a heap ordered by operator<]]></Line>
      <Line Number="5431"><![CDATA[	return (_Is_heap_until(_First, _Last, _Dist_type(_First))]]></Line>
      <Line Number="5432"><![CDATA[		== _Last);]]></Line>
      <Line Number="5433"><![CDATA[	}]]></Line>
      <Line Number="5434"><![CDATA[]]></Line>
      <Line Number="5435"><![CDATA[		// TEMPLATE FUNCTIONS is_heap AND is_heap_until WITH PRED]]></Line>
      <Line Number="5436"><![CDATA[template<class _RanIt,]]></Line>
      <Line Number="5437"><![CDATA[	class _Diff,]]></Line>
      <Line Number="5438"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="5439"><![CDATA[	_RanIt _Is_heap_until(_RanIt _First, _RanIt _Last, _Pr _Pred, _Diff *)]]></Line>
      <Line Number="5440"><![CDATA[	{	// find extent of range that is a heap ordered by _Pred]]></Line>
      <Line Number="5441"><![CDATA[	_Diff _Size = _Last - _First;]]></Line>
      <Line Number="5442"><![CDATA[]]></Line>
      <Line Number="5443"><![CDATA[	if (2 <= _Size)]]></Line>
      <Line Number="5444"><![CDATA[		for (_Diff _Off = 0; ++_Off < _Size; )]]></Line>
      <Line Number="5445"><![CDATA[			if (_DEBUG_LT_PRED(_Pred, *(_First + (_Off - 1) / 2),]]></Line>
      <Line Number="5446"><![CDATA[				*(_First + _Off)))]]></Line>
      <Line Number="5447"><![CDATA[				return (_First + _Off);]]></Line>
      <Line Number="5448"><![CDATA[	return (_Last);]]></Line>
      <Line Number="5449"><![CDATA[	}]]></Line>
      <Line Number="5450"><![CDATA[]]></Line>
      <Line Number="5451"><![CDATA[template<class _RanIt,]]></Line>
      <Line Number="5452"><![CDATA[	class _Pr>]]></Line>
      <Line Number="5453"><![CDATA[	_RanIt is_heap_until(_RanIt _First, _RanIt _Last, _Pr _Pred)]]></Line>
      <Line Number="5454"><![CDATA[	{	// find extent of range that is a heap ordered by _Pred]]></Line>
      <Line Number="5455"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="5456"><![CDATA[	_DEBUG_POINTER(_Pred);]]></Line>
      <Line Number="5457"><![CDATA[	return (_Rechecked(_First,]]></Line>
      <Line Number="5458"><![CDATA[		_Is_heap_until(_Unchecked(_First), _Unchecked(_Last), _Pred,]]></Line>
      <Line Number="5459"><![CDATA[			_Dist_type(_First))));]]></Line>
      <Line Number="5460"><![CDATA[	}]]></Line>
      <Line Number="5461"><![CDATA[]]></Line>
      <Line Number="5462"><![CDATA[template<class _RanIt,]]></Line>
      <Line Number="5463"><![CDATA[	class _Pr>]]></Line>
      <Line Number="5464"><![CDATA[	bool is_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)]]></Line>
      <Line Number="5465"><![CDATA[	{	// test if range is a heap ordered by _Pred]]></Line>
      <Line Number="5466"><![CDATA[	return (_Is_heap_until(_First, _Last, _Pred, _Dist_type(_First))]]></Line>
      <Line Number="5467"><![CDATA[		== _Last);]]></Line>
      <Line Number="5468"><![CDATA[	}]]></Line>
      <Line Number="5469"><![CDATA[]]></Line>
      <Line Number="5470"><![CDATA[		// TEMPLATE FUNCTIONS is_sorted AND is_sorted_until]]></Line>
      <Line Number="5471"><![CDATA[template<class _FwdIt> inline]]></Line>
      <Line Number="5472"><![CDATA[	_FwdIt _Is_sorted_until(_FwdIt _First, _FwdIt _Last)]]></Line>
      <Line Number="5473"><![CDATA[	{	// find extent of range that is ordered by operator<]]></Line>
      <Line Number="5474"><![CDATA[	for (_FwdIt _Next = _First; _First != _Last && ++_Next != _Last; ++_First)]]></Line>
      <Line Number="5475"><![CDATA[		if (_DEBUG_LT(*_Next, *_First))]]></Line>
      <Line Number="5476"><![CDATA[			return (_First);]]></Line>
      <Line Number="5477"><![CDATA[	return (_Last);]]></Line>
      <Line Number="5478"><![CDATA[	}]]></Line>
      <Line Number="5479"><![CDATA[]]></Line>
      <Line Number="5480"><![CDATA[template<class _FwdIt> inline]]></Line>
      <Line Number="5481"><![CDATA[	_FwdIt is_sorted_until(_FwdIt _First, _FwdIt _Last)]]></Line>
      <Line Number="5482"><![CDATA[	{	// find extent of range that is ordered by operator<]]></Line>
      <Line Number="5483"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="5484"><![CDATA[	return (_Rechecked(_First,]]></Line>
      <Line Number="5485"><![CDATA[		_Is_sorted_until(_Unchecked(_First), _Unchecked(_Last))));]]></Line>
      <Line Number="5486"><![CDATA[	}]]></Line>
      <Line Number="5487"><![CDATA[]]></Line>
      <Line Number="5488"><![CDATA[template<class _FwdIt> inline]]></Line>
      <Line Number="5489"><![CDATA[	bool is_sorted(_FwdIt _First, _FwdIt _Last)]]></Line>
      <Line Number="5490"><![CDATA[	{	// test if range is ordered by operator<]]></Line>
      <Line Number="5491"><![CDATA[	return (_STD is_sorted_until(_First, _Last) == _Last);]]></Line>
      <Line Number="5492"><![CDATA[	}]]></Line>
      <Line Number="5493"><![CDATA[]]></Line>
      <Line Number="5494"><![CDATA[		// TEMPLATE FUNCTIONS is_sorted AND is_sorted_until WITH PRED]]></Line>
      <Line Number="5495"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="5496"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="5497"><![CDATA[	_FwdIt _Is_sorted_until(_FwdIt _First, _FwdIt _Last, _Pr _Pred)]]></Line>
      <Line Number="5498"><![CDATA[	{	// find extent of range that is ordered by predicate]]></Line>
      <Line Number="5499"><![CDATA[	for (_FwdIt _Next = _First; _First != _Last && ++_Next != _Last; ++_First)]]></Line>
      <Line Number="5500"><![CDATA[		if (_DEBUG_LT_PRED(_Pred, *_Next, *_First))]]></Line>
      <Line Number="5501"><![CDATA[			return (_First);]]></Line>
      <Line Number="5502"><![CDATA[	return (_Last);]]></Line>
      <Line Number="5503"><![CDATA[	}]]></Line>
      <Line Number="5504"><![CDATA[]]></Line>
      <Line Number="5505"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="5506"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="5507"><![CDATA[	_FwdIt is_sorted_until(_FwdIt _First, _FwdIt _Last, _Pr _Pred)]]></Line>
      <Line Number="5508"><![CDATA[	{	// find extent of range that is ordered by predicate]]></Line>
      <Line Number="5509"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="5510"><![CDATA[	_DEBUG_POINTER(_Pred);]]></Line>
      <Line Number="5511"><![CDATA[	return (_Rechecked(_First,]]></Line>
      <Line Number="5512"><![CDATA[		_Is_sorted_until(_Unchecked(_First), _Unchecked(_Last), _Pred)));]]></Line>
      <Line Number="5513"><![CDATA[	}]]></Line>
      <Line Number="5514"><![CDATA[]]></Line>
      <Line Number="5515"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="5516"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="5517"><![CDATA[	bool is_sorted(_FwdIt _First, _FwdIt _Last, _Pr _Pred)]]></Line>
      <Line Number="5518"><![CDATA[	{	// test if range is ordered by predicate]]></Line>
      <Line Number="5519"><![CDATA[	return (_STD is_sorted_until(_First, _Last, _Pred) == _Last);]]></Line>
      <Line Number="5520"><![CDATA[	}]]></Line>
      <Line Number="5521"><![CDATA[ #endif /* _HAS_CPP0X */]]></Line>
      <Line Number="5522"><![CDATA[_STD_END]]></Line>
      <Line Number="5523"><![CDATA[ #pragma warning(pop)]]></Line>
      <Line Number="5524"><![CDATA[ #pragma pack(pop)]]></Line>
      <Line Number="5525"><![CDATA[]]></Line>
      <Line Number="5526"><![CDATA[#endif /* RC_INVOKED */]]></Line>
      <Line Number="5527"><![CDATA[#endif /* _ALGORITHM_ */]]></Line>
      <Line Number="5528"><![CDATA[]]></Line>
      <Line Number="5529"><![CDATA[/*]]></Line>
      <Line Number="5530"><![CDATA[ * This file is derived from software bearing the following]]></Line>
      <Line Number="5531"><![CDATA[ * restrictions:]]></Line>
      <Line Number="5532"><![CDATA[ *]]></Line>
      <Line Number="5533"><![CDATA[ * Copyright (c) 1994]]></Line>
      <Line Number="5534"><![CDATA[ * Hewlett-Packard Company]]></Line>
      <Line Number="5535"><![CDATA[ *]]></Line>
      <Line Number="5536"><![CDATA[ * Permission to use, copy, modify, distribute and sell this]]></Line>
      <Line Number="5537"><![CDATA[ * software and its documentation for any purpose is hereby]]></Line>
      <Line Number="5538"><![CDATA[ * granted without fee, provided that the above copyright notice]]></Line>
      <Line Number="5539"><![CDATA[ * appear in all copies and that both that copyright notice and]]></Line>
      <Line Number="5540"><![CDATA[ * this permission notice appear in supporting documentation.]]></Line>
      <Line Number="5541"><![CDATA[ * Hewlett-Packard Company makes no representations about the]]></Line>
      <Line Number="5542"><![CDATA[ * suitability of this software for any purpose. It is provided]]></Line>
      <Line Number="5543"><![CDATA[ * "as is" without express or implied warranty.]]></Line>
      <Line Number="5544"><![CDATA[ */]]></Line>
      <Line Number="5545"><![CDATA[]]></Line>
      <Line Number="5546"><![CDATA[/*]]></Line>
      <Line Number="5547"><![CDATA[ * Copyright (c) 1992-2009 by P.J. Plauger.  ALL RIGHTS RESERVED.]]></Line>
      <Line Number="5548"><![CDATA[ * Consult your license regarding permissions and restrictions.]]></Line>
      <Line Number="5549"><![CDATA[V5.20:0009 */]]></Line>
      <Line Number="5550"><![CDATA[]]></Line>
    </File>
    <File Name="c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility">
      <Line Number="1"><![CDATA[// utility standard header]]></Line>
      <Line Number="2"><![CDATA[#pragma once]]></Line>
      <Line Number="3"><![CDATA[#ifndef _UTILITY_]]></Line>
      <Line Number="4"><![CDATA[#define _UTILITY_]]></Line>
      <Line Number="5"><![CDATA[#ifndef RC_INVOKED]]></Line>
      <Line Number="6"><![CDATA[#include <xstddef>]]></Line>
      <Line Number="7"><![CDATA[#include <iosfwd>]]></Line>
      <Line Number="8"><![CDATA[]]></Line>
      <Line Number="9"><![CDATA[#include <type_traits>]]></Line>
      <Line Number="10"><![CDATA[]]></Line>
      <Line Number="11"><![CDATA[ #pragma pack(push,_CRT_PACKING)]]></Line>
      <Line Number="12"><![CDATA[ #pragma warning(push,3)]]></Line>
      <Line Number="13"><![CDATA[]]></Line>
      <Line Number="14"><![CDATA[ #pragma warning(disable: 4180 4512)]]></Line>
      <Line Number="15"><![CDATA[]]></Line>
      <Line Number="16"><![CDATA[_STD_BEGIN]]></Line>
      <Line Number="17"><![CDATA[	namespace tr1 {]]></Line>
      <Line Number="18"><![CDATA[	// CLASS _Unrefwrap]]></Line>
      <Line Number="19"><![CDATA[template<class _Type>]]></Line>
      <Line Number="20"><![CDATA[	class reference_wrapper;]]></Line>
      <Line Number="21"><![CDATA[]]></Line>
      <Line Number="22"><![CDATA[ #if _HAS_CPP0X]]></Line>
      <Line Number="23"><![CDATA[template<class _Type>]]></Line>
      <Line Number="24"><![CDATA[	struct _Unrefwrap]]></Line>
      <Line Number="25"><![CDATA[	{	// unwrap a reference_wrapper]]></Line>
      <Line Number="26"><![CDATA[	typedef typename decay<_Type>::type type;]]></Line>
      <Line Number="27"><![CDATA[	};]]></Line>
      <Line Number="28"><![CDATA[]]></Line>
      <Line Number="29"><![CDATA[template<class _Type>]]></Line>
      <Line Number="30"><![CDATA[	struct _Unrefwrap<reference_wrapper<_Type> >]]></Line>
      <Line Number="31"><![CDATA[	{	// make a reference from a reference_wrapper]]></Line>
      <Line Number="32"><![CDATA[	typedef _Type& type;]]></Line>
      <Line Number="33"><![CDATA[	};]]></Line>
      <Line Number="34"><![CDATA[]]></Line>
      <Line Number="35"><![CDATA[template<class _Type>]]></Line>
      <Line Number="36"><![CDATA[	struct _Unrefwrap<const reference_wrapper<_Type> >]]></Line>
      <Line Number="37"><![CDATA[	{	// make a reference from a const reference_wrapper]]></Line>
      <Line Number="38"><![CDATA[	typedef _Type& type;]]></Line>
      <Line Number="39"><![CDATA[	};]]></Line>
      <Line Number="40"><![CDATA[]]></Line>
      <Line Number="41"><![CDATA[template<class _Type>]]></Line>
      <Line Number="42"><![CDATA[	struct _Unrefwrap<volatile reference_wrapper<_Type> >]]></Line>
      <Line Number="43"><![CDATA[	{	// make a reference from a volatile reference_wrapper]]></Line>
      <Line Number="44"><![CDATA[	typedef _Type& type;]]></Line>
      <Line Number="45"><![CDATA[	};]]></Line>
      <Line Number="46"><![CDATA[]]></Line>
      <Line Number="47"><![CDATA[template<class _Type>]]></Line>
      <Line Number="48"><![CDATA[	struct _Unrefwrap<const volatile reference_wrapper<_Type> >]]></Line>
      <Line Number="49"><![CDATA[	{	// make a reference from a const volatile reference_wrapper]]></Line>
      <Line Number="50"><![CDATA[	typedef _Type& type;]]></Line>
      <Line Number="51"><![CDATA[	};]]></Line>
      <Line Number="52"><![CDATA[]]></Line>
      <Line Number="53"><![CDATA[ #else /* _HAS_CPP0X */]]></Line>
      <Line Number="54"><![CDATA[template<class _Type>]]></Line>
      <Line Number="55"><![CDATA[	struct _Unrefwrap]]></Line>
      <Line Number="56"><![CDATA[	{	// unwrap a reference_wrapper]]></Line>
      <Line Number="57"><![CDATA[	typedef _Type type;]]></Line>
      <Line Number="58"><![CDATA[	};]]></Line>
      <Line Number="59"><![CDATA[ #endif /* _HAS_CPP0X */]]></Line>
      <Line Number="60"><![CDATA[	}	// namespace tr1]]></Line>
      <Line Number="61"><![CDATA[using tr1::_Unrefwrap;]]></Line>
      <Line Number="62"><![CDATA[]]></Line>
      <Line Number="63"><![CDATA[	// TEMPLATE CLASS identity]]></Line>
      <Line Number="64"><![CDATA[template<class _Ty>]]></Line>
      <Line Number="65"><![CDATA[	struct identity]]></Line>
      <Line Number="66"><![CDATA[	{	// map _Ty to type unchanged]]></Line>
      <Line Number="67"><![CDATA[	typedef _Ty type;]]></Line>
      <Line Number="68"><![CDATA[]]></Line>
      <Line Number="69"><![CDATA[	const _Ty& operator()(const _Ty& _Left) const]]></Line>
      <Line Number="70"><![CDATA[		{	// apply identity operator to operand]]></Line>
      <Line Number="71"><![CDATA[		return (_Left);]]></Line>
      <Line Number="72"><![CDATA[		}]]></Line>
      <Line Number="73"><![CDATA[	};]]></Line>
      <Line Number="74"><![CDATA[]]></Line>
      <Line Number="75"><![CDATA[	// TEMPLATE FUNCTION forward]]></Line>
      <Line Number="76"><![CDATA[template<class _Ty> inline]]></Line>
      <Line Number="77"><![CDATA[	_Ty&& forward(typename identity<_Ty>::type& _Arg)]]></Line>
      <Line Number="78"><![CDATA[	{	// forward _Arg, given explicitly specified type parameter]]></Line>
      <Line Number="79"><![CDATA[	return ((_Ty&&)_Arg);]]></Line>
      <Line Number="80"><![CDATA[	}]]></Line>
      <Line Number="81"><![CDATA[]]></Line>
      <Line Number="82"><![CDATA[	// TEMPLATE FUNCTION move]]></Line>
      <Line Number="83"><![CDATA[template<class _Ty> inline]]></Line>
      <Line Number="84"><![CDATA[	typename tr1::_Remove_reference<_Ty>::_Type&&]]></Line>
      <Line Number="85"><![CDATA[		move(_Ty&& _Arg)]]></Line>
      <Line Number="86"><![CDATA[	{	// forward _Arg as movable]]></Line>
      <Line Number="87"><![CDATA[	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);]]></Line>
      <Line Number="88"><![CDATA[	}]]></Line>
      <Line Number="89"><![CDATA[]]></Line>
      <Line Number="90"><![CDATA[	// TEMPLATE FUNCTION _Move]]></Line>
      <Line Number="91"><![CDATA[template<class _Ty> inline]]></Line>
      <Line Number="92"><![CDATA[	typename tr1::_Remove_reference<_Ty>::_Type&&]]></Line>
      <Line Number="93"><![CDATA[		_Move(_Ty&& _Arg)]]></Line>
      <Line Number="94"><![CDATA[	{	// forward _Arg as movable]]></Line>
      <Line Number="95"><![CDATA[	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);]]></Line>
      <Line Number="96"><![CDATA[	}]]></Line>
      <Line Number="97"><![CDATA[]]></Line>
      <Line Number="98"><![CDATA[		// TEMPLATE FUNCTION swap (from <algorithm>)]]></Line>
      <Line Number="99"><![CDATA[template<class _Ty> inline]]></Line>
      <Line Number="100"><![CDATA[	void swap(_Ty& _Left, _Ty& _Right)]]></Line>
      <Line Number="101"><![CDATA[	{	// exchange values stored at _Left and _Right]]></Line>
      <Line Number="102"><![CDATA[	_Ty _Tmp = _Move(_Left);]]></Line>
      <Line Number="103"><![CDATA[	_Left = _Move(_Right);]]></Line>
      <Line Number="104"><![CDATA[	_Right = _Move(_Tmp);]]></Line>
      <Line Number="105"><![CDATA[	}]]></Line>
      <Line Number="106"><![CDATA[]]></Line>
      <Line Number="107"><![CDATA[		// TEMPLATE FUNCTION _Swap_adl]]></Line>
      <Line Number="108"><![CDATA[template<class _Ty> inline]]></Line>
      <Line Number="109"><![CDATA[	void _Swap_adl(_Ty& _Left, _Ty& _Right)]]></Line>
      <Line Number="110"><![CDATA[	{	// exchange values stored at _Left and _Right, using ADL]]></Line>
      <Line Number="111"><![CDATA[	swap(_Left, _Right);]]></Line>
      <Line Number="112"><![CDATA[	}]]></Line>
      <Line Number="113"><![CDATA[]]></Line>
      <Line Number="114"><![CDATA[		// TEMPLATE STRUCT pair]]></Line>
      <Line Number="115"><![CDATA[]]></Line>
      <Line Number="116"><![CDATA[template<class _Ty1,]]></Line>
      <Line Number="117"><![CDATA[	class _Ty2>]]></Line>
      <Line Number="118"><![CDATA[	struct _Pair_base]]></Line>
      <Line Number="119"><![CDATA[	{	// store a pair of values]]></Line>
      <Line Number="120"><![CDATA[	typedef _Pair_base<_Ty1, _Ty2> _Myt;]]></Line>
      <Line Number="121"><![CDATA[	typedef _Ty1 first_type;]]></Line>
      <Line Number="122"><![CDATA[	typedef _Ty2 second_type;]]></Line>
      <Line Number="123"><![CDATA[]]></Line>
      <Line Number="124"><![CDATA[	_Pair_base()]]></Line>
      <Line Number="125"><![CDATA[		: first(_Ty1()), second(_Ty2())]]></Line>
      <Line Number="126"><![CDATA[		{	// construct from defaults]]></Line>
      <Line Number="127"><![CDATA[		}]]></Line>
      <Line Number="128"><![CDATA[]]></Line>
      <Line Number="129"><![CDATA[	_Pair_base(const _Pair_base<_Ty1, _Ty2>& _Right)]]></Line>
      <Line Number="130"><![CDATA[		: first(_Right.first), second(_Right.second)]]></Line>
      <Line Number="131"><![CDATA[		{	// construct by copying _Pair_base]]></Line>
      <Line Number="132"><![CDATA[		}]]></Line>
      <Line Number="133"><![CDATA[]]></Line>
      <Line Number="134"><![CDATA[	_Pair_base(const _Ty1& _Val1, const _Ty2& _Val2)]]></Line>
      <Line Number="135"><![CDATA[		: first(_Val1), second(_Val2)]]></Line>
      <Line Number="136"><![CDATA[		{	// construct from specified values]]></Line>
      <Line Number="137"><![CDATA[		}]]></Line>
      <Line Number="138"><![CDATA[]]></Line>
      <Line Number="139"><![CDATA[	typedef typename tr1::remove_reference<_Ty1>::type _Ty1x;]]></Line>
      <Line Number="140"><![CDATA[	typedef typename tr1::remove_reference<_Ty2>::type _Ty2x;]]></Line>
      <Line Number="141"><![CDATA[]]></Line>
      <Line Number="142"><![CDATA[	_Pair_base(_Ty1x&& _Val1, _Ty2x&& _Val2)]]></Line>
      <Line Number="143"><![CDATA[		: first(_STD move(_Val1)),]]></Line>
      <Line Number="144"><![CDATA[			second(_STD move(_Val2))]]></Line>
      <Line Number="145"><![CDATA[		{	// construct from specified values]]></Line>
      <Line Number="146"><![CDATA[		}]]></Line>
      <Line Number="147"><![CDATA[]]></Line>
      <Line Number="148"><![CDATA[	_Pair_base(const _Ty1x& _Val1, _Ty2x&& _Val2)]]></Line>
      <Line Number="149"><![CDATA[		: first(_Val1), second(_STD move(_Val2))]]></Line>
      <Line Number="150"><![CDATA[		{	// construct from specified values]]></Line>
      <Line Number="151"><![CDATA[		}]]></Line>
      <Line Number="152"><![CDATA[]]></Line>
      <Line Number="153"><![CDATA[	_Pair_base(_Ty1x&& _Val1, const _Ty2x& _Val2)]]></Line>
      <Line Number="154"><![CDATA[		: first(_STD move(_Val1)), second(_Val2)]]></Line>
      <Line Number="155"><![CDATA[		{	// construct from specified values]]></Line>
      <Line Number="156"><![CDATA[		}]]></Line>
      <Line Number="157"><![CDATA[]]></Line>
      <Line Number="158"><![CDATA[	template<class _Other1,]]></Line>
      <Line Number="159"><![CDATA[		class _Other2>]]></Line>
      <Line Number="160"><![CDATA[		_Pair_base(_Other1&& _Val1, _Other2&& _Val2)]]></Line>
      <Line Number="161"><![CDATA[		: first(_STD forward<_Other1>(_Val1)),]]></Line>
      <Line Number="162"><![CDATA[			second(_STD forward<_Other2>(_Val2))]]></Line>
      <Line Number="163"><![CDATA[		{	// construct from moved values]]></Line>
      <Line Number="164"><![CDATA[		}]]></Line>
      <Line Number="165"><![CDATA[]]></Line>
      <Line Number="166"><![CDATA[	_Ty1 first;	// the first stored value]]></Line>
      <Line Number="167"><![CDATA[	_Ty2 second;	// the second stored value]]></Line>
      <Line Number="168"><![CDATA[	};]]></Line>
      <Line Number="169"><![CDATA[]]></Line>
      <Line Number="170"><![CDATA[template<class _Ty1,]]></Line>
      <Line Number="171"><![CDATA[	class _Ty2>]]></Line>
      <Line Number="172"><![CDATA[	struct pair]]></Line>
      <Line Number="173"><![CDATA[		: public _Pair_base<_Ty1, _Ty2>]]></Line>
      <Line Number="174"><![CDATA[	{	// store a pair of values]]></Line>
      <Line Number="175"><![CDATA[	typedef _Pair_base<_Ty1, _Ty2> _Mybase;]]></Line>
      <Line Number="176"><![CDATA[]]></Line>
      <Line Number="177"><![CDATA[	typedef pair<_Ty1, _Ty2> _Myt;]]></Line>
      <Line Number="178"><![CDATA[	typedef _Ty1 first_type;]]></Line>
      <Line Number="179"><![CDATA[	typedef _Ty2 second_type;]]></Line>
      <Line Number="180"><![CDATA[]]></Line>
      <Line Number="181"><![CDATA[	pair()]]></Line>
      <Line Number="182"><![CDATA[		: _Mybase()]]></Line>
      <Line Number="183"><![CDATA[		{	// construct from defaults]]></Line>
      <Line Number="184"><![CDATA[		}]]></Line>
      <Line Number="185"><![CDATA[]]></Line>
      <Line Number="186"><![CDATA[	pair(const _Ty1& _Val1, const _Ty2& _Val2)]]></Line>
      <Line Number="187"><![CDATA[		: _Mybase(_Val1, _Val2)]]></Line>
      <Line Number="188"><![CDATA[		{	// construct from specified values]]></Line>
      <Line Number="189"><![CDATA[		}]]></Line>
      <Line Number="190"><![CDATA[]]></Line>
      <Line Number="191"><![CDATA[	template<class _Other1,]]></Line>
      <Line Number="192"><![CDATA[		class _Other2>]]></Line>
      <Line Number="193"><![CDATA[		pair(pair<_Other1, _Other2>& _Right)]]></Line>
      <Line Number="194"><![CDATA[		: _Mybase(_Right.first, _Right.second)]]></Line>
      <Line Number="195"><![CDATA[		{	// construct from compatible pair]]></Line>
      <Line Number="196"><![CDATA[		}]]></Line>
      <Line Number="197"><![CDATA[]]></Line>
      <Line Number="198"><![CDATA[	template<class _Other1,]]></Line>
      <Line Number="199"><![CDATA[		class _Other2>]]></Line>
      <Line Number="200"><![CDATA[		pair(const pair<_Other1, _Other2>& _Right)]]></Line>
      <Line Number="201"><![CDATA[		: _Mybase(_Right.first, _Right.second)]]></Line>
      <Line Number="202"><![CDATA[		{	// construct from compatible pair]]></Line>
      <Line Number="203"><![CDATA[		}]]></Line>
      <Line Number="204"><![CDATA[]]></Line>
      <Line Number="205"><![CDATA[	void swap(_Myt& _Right)]]></Line>
      <Line Number="206"><![CDATA[		{	// exchange contents with _Right]]></Line>
      <Line Number="207"><![CDATA[		if (this != &_Right)]]></Line>
      <Line Number="208"><![CDATA[			{	// different, worth swapping]]></Line>
      <Line Number="209"><![CDATA[			_Swap_adl(this->first, _Right.first);]]></Line>
      <Line Number="210"><![CDATA[			_Swap_adl(this->second, _Right.second);]]></Line>
      <Line Number="211"><![CDATA[			}]]></Line>
      <Line Number="212"><![CDATA[		}]]></Line>
      <Line Number="213"><![CDATA[]]></Line>
      <Line Number="214"><![CDATA[	_Myt& operator=(const _Myt& _Right)]]></Line>
      <Line Number="215"><![CDATA[		{	// assign from copied pair]]></Line>
      <Line Number="216"><![CDATA[		this->first = _Right.first;]]></Line>
      <Line Number="217"><![CDATA[		this->second = _Right.second;]]></Line>
      <Line Number="218"><![CDATA[		return (*this);]]></Line>
      <Line Number="219"><![CDATA[		}]]></Line>
      <Line Number="220"><![CDATA[]]></Line>
      <Line Number="221"><![CDATA[	typedef typename tr1::remove_reference<_Ty1>::type _Ty1x;]]></Line>
      <Line Number="222"><![CDATA[	typedef typename tr1::remove_reference<_Ty2>::type _Ty2x;]]></Line>
      <Line Number="223"><![CDATA[]]></Line>
      <Line Number="224"><![CDATA[	pair(_Ty1x&& _Val1, _Ty2x&& _Val2)]]></Line>
      <Line Number="225"><![CDATA[		: _Mybase(_STD move(_Val1),]]></Line>
      <Line Number="226"><![CDATA[			_STD move(_Val2))]]></Line>
      <Line Number="227"><![CDATA[		{	// construct from specified values]]></Line>
      <Line Number="228"><![CDATA[		}]]></Line>
      <Line Number="229"><![CDATA[]]></Line>
      <Line Number="230"><![CDATA[	pair(const _Ty1x& _Val1, _Ty2x&& _Val2)]]></Line>
      <Line Number="231"><![CDATA[		: _Mybase(_Val1,]]></Line>
      <Line Number="232"><![CDATA[			_STD move(_Val2))]]></Line>
      <Line Number="233"><![CDATA[		{	// construct from specified values]]></Line>
      <Line Number="234"><![CDATA[		}]]></Line>
      <Line Number="235"><![CDATA[]]></Line>
      <Line Number="236"><![CDATA[	pair(_Ty1x&& _Val1, const _Ty2x& _Val2)]]></Line>
      <Line Number="237"><![CDATA[		: _Mybase(_STD move(_Val1),]]></Line>
      <Line Number="238"><![CDATA[			_Val2)]]></Line>
      <Line Number="239"><![CDATA[		{	// construct from specified values]]></Line>
      <Line Number="240"><![CDATA[		}]]></Line>
      <Line Number="241"><![CDATA[]]></Line>
      <Line Number="242"><![CDATA[	template<class _Other1,]]></Line>
      <Line Number="243"><![CDATA[		class _Other2>]]></Line>
      <Line Number="244"><![CDATA[		pair(_Other1&& _Val1, _Other2&& _Val2)]]></Line>
      <Line Number="245"><![CDATA[		: _Mybase(_STD forward<_Other1>(_Val1),]]></Line>
      <Line Number="246"><![CDATA[			_STD forward<_Other2>(_Val2))]]></Line>
      <Line Number="247"><![CDATA[		{	// construct from moved values]]></Line>
      <Line Number="248"><![CDATA[		}]]></Line>
      <Line Number="249"><![CDATA[]]></Line>
      <Line Number="250"><![CDATA[	template<class _Other1,]]></Line>
      <Line Number="251"><![CDATA[		class _Other2>]]></Line>
      <Line Number="252"><![CDATA[		pair(pair<_Other1, _Other2>&& _Right)]]></Line>
      <Line Number="253"><![CDATA[		: _Mybase(_STD forward<_Other1>(_Right.first),]]></Line>
      <Line Number="254"><![CDATA[			_STD forward<_Other2>(_Right.second))]]></Line>
      <Line Number="255"><![CDATA[		{	// construct from moved compatible pair]]></Line>
      <Line Number="256"><![CDATA[		}]]></Line>
      <Line Number="257"><![CDATA[]]></Line>
      <Line Number="258"><![CDATA[	pair& operator=(pair<_Ty1, _Ty2>&& _Right)]]></Line>
      <Line Number="259"><![CDATA[		{	// assign from moved pair]]></Line>
      <Line Number="260"><![CDATA[		this->first = _STD move(_Right.first);]]></Line>
      <Line Number="261"><![CDATA[		this->second = _STD move(_Right.second);]]></Line>
      <Line Number="262"><![CDATA[		return (*this);]]></Line>
      <Line Number="263"><![CDATA[		}]]></Line>
      <Line Number="264"><![CDATA[]]></Line>
      <Line Number="265"><![CDATA[	void swap(_Myt&& _Right)]]></Line>
      <Line Number="266"><![CDATA[		{	// exchange contents with _Right]]></Line>
      <Line Number="267"><![CDATA[		if (this != &_Right)]]></Line>
      <Line Number="268"><![CDATA[			{	// different, worth swapping]]></Line>
      <Line Number="269"><![CDATA[			this->first = _STD move(_Right.first);]]></Line>
      <Line Number="270"><![CDATA[			this->second = _STD move(_Right.second);]]></Line>
      <Line Number="271"><![CDATA[			}]]></Line>
      <Line Number="272"><![CDATA[		}]]></Line>
      <Line Number="273"><![CDATA[	};]]></Line>
      <Line Number="274"><![CDATA[]]></Line>
      <Line Number="275"><![CDATA[		// pair TEMPLATE FUNCTIONS]]></Line>
      <Line Number="276"><![CDATA[]]></Line>
      <Line Number="277"><![CDATA[template<class _Ty1,]]></Line>
      <Line Number="278"><![CDATA[	class _Ty2> inline]]></Line>
      <Line Number="279"><![CDATA[	void swap(pair<_Ty1, _Ty2>& _Left, pair<_Ty1, _Ty2>& _Right)]]></Line>
      <Line Number="280"><![CDATA[	{	// swap _Left and _Right pairs]]></Line>
      <Line Number="281"><![CDATA[	_Left.swap(_Right);]]></Line>
      <Line Number="282"><![CDATA[	}]]></Line>
      <Line Number="283"><![CDATA[]]></Line>
      <Line Number="284"><![CDATA[template<class _Ty1,]]></Line>
      <Line Number="285"><![CDATA[	class _Ty2> inline]]></Line>
      <Line Number="286"><![CDATA[	void swap(pair<_Ty1, _Ty2>& _Left, pair<_Ty1, _Ty2>&& _Right)]]></Line>
      <Line Number="287"><![CDATA[	{	// swap _Left and _Right pairs]]></Line>
      <Line Number="288"><![CDATA[	typedef pair<_Ty1, _Ty2> _Myt;]]></Line>
      <Line Number="289"><![CDATA[	_Left.swap(_STD forward<_Myt>(_Right));]]></Line>
      <Line Number="290"><![CDATA[	}]]></Line>
      <Line Number="291"><![CDATA[]]></Line>
      <Line Number="292"><![CDATA[template<class _Ty1,]]></Line>
      <Line Number="293"><![CDATA[	class _Ty2> inline]]></Line>
      <Line Number="294"><![CDATA[	void swap(pair<_Ty1, _Ty2>&& _Left, pair<_Ty1, _Ty2>& _Right)]]></Line>
      <Line Number="295"><![CDATA[	{	// swap _Left and _Right pairs]]></Line>
      <Line Number="296"><![CDATA[	typedef pair<_Ty1, _Ty2> _Myt;]]></Line>
      <Line Number="297"><![CDATA[	_Right.swap(_STD forward<_Myt>(_Left));]]></Line>
      <Line Number="298"><![CDATA[	}]]></Line>
      <Line Number="299"><![CDATA[]]></Line>
      <Line Number="300"><![CDATA[template<class _Ty1,]]></Line>
      <Line Number="301"><![CDATA[	class _Ty2> inline]]></Line>
      <Line Number="302"><![CDATA[	bool operator==(const pair<_Ty1, _Ty2>& _Left,]]></Line>
      <Line Number="303"><![CDATA[		const pair<_Ty1, _Ty2>& _Right)]]></Line>
      <Line Number="304"><![CDATA[	{	// test for pair equality]]></Line>
      <Line Number="305"><![CDATA[	return (_Left.first == _Right.first && _Left.second == _Right.second);]]></Line>
      <Line Number="306"><![CDATA[	}]]></Line>
      <Line Number="307"><![CDATA[]]></Line>
      <Line Number="308"><![CDATA[template<class _Ty1,]]></Line>
      <Line Number="309"><![CDATA[	class _Ty2> inline]]></Line>
      <Line Number="310"><![CDATA[	bool operator!=(const pair<_Ty1, _Ty2>& _Left,]]></Line>
      <Line Number="311"><![CDATA[		const pair<_Ty1, _Ty2>& _Right)]]></Line>
      <Line Number="312"><![CDATA[	{	// test for pair inequality]]></Line>
      <Line Number="313"><![CDATA[	return (!(_Left == _Right));]]></Line>
      <Line Number="314"><![CDATA[	}]]></Line>
      <Line Number="315"><![CDATA[]]></Line>
      <Line Number="316"><![CDATA[template<class _Ty1,]]></Line>
      <Line Number="317"><![CDATA[	class _Ty2> inline]]></Line>
      <Line Number="318"><![CDATA[	bool operator<(const pair<_Ty1, _Ty2>& _Left,]]></Line>
      <Line Number="319"><![CDATA[		const pair<_Ty1, _Ty2>& _Right)]]></Line>
      <Line Number="320"><![CDATA[	{	// test if _Left < _Right for pairs]]></Line>
      <Line Number="321"><![CDATA[	return (_Left.first < _Right.first ||]]></Line>
      <Line Number="322"><![CDATA[		!(_Right.first < _Left.first) && _Left.second < _Right.second);]]></Line>
      <Line Number="323"><![CDATA[	}]]></Line>
      <Line Number="324"><![CDATA[]]></Line>
      <Line Number="325"><![CDATA[template<class _Ty1,]]></Line>
      <Line Number="326"><![CDATA[	class _Ty2> inline]]></Line>
      <Line Number="327"><![CDATA[	bool operator>(const pair<_Ty1, _Ty2>& _Left,]]></Line>
      <Line Number="328"><![CDATA[		const pair<_Ty1, _Ty2>& _Right)]]></Line>
      <Line Number="329"><![CDATA[	{	// test if _Left > _Right for pairs]]></Line>
      <Line Number="330"><![CDATA[	return (_Right < _Left);]]></Line>
      <Line Number="331"><![CDATA[	}]]></Line>
      <Line Number="332"><![CDATA[]]></Line>
      <Line Number="333"><![CDATA[template<class _Ty1,]]></Line>
      <Line Number="334"><![CDATA[	class _Ty2> inline]]></Line>
      <Line Number="335"><![CDATA[	bool operator<=(const pair<_Ty1, _Ty2>& _Left,]]></Line>
      <Line Number="336"><![CDATA[		const pair<_Ty1, _Ty2>& _Right)]]></Line>
      <Line Number="337"><![CDATA[	{	// test if _Left <= _Right for pairs]]></Line>
      <Line Number="338"><![CDATA[	return (!(_Right < _Left));]]></Line>
      <Line Number="339"><![CDATA[	}]]></Line>
      <Line Number="340"><![CDATA[]]></Line>
      <Line Number="341"><![CDATA[template<class _Ty1,]]></Line>
      <Line Number="342"><![CDATA[	class _Ty2> inline]]></Line>
      <Line Number="343"><![CDATA[	bool operator>=(const pair<_Ty1, _Ty2>& _Left,]]></Line>
      <Line Number="344"><![CDATA[		const pair<_Ty1, _Ty2>& _Right)]]></Line>
      <Line Number="345"><![CDATA[	{	// test if _Left >= _Right for pairs]]></Line>
      <Line Number="346"><![CDATA[	return (!(_Left < _Right));]]></Line>
      <Line Number="347"><![CDATA[	}]]></Line>
      <Line Number="348"><![CDATA[]]></Line>
      <Line Number="349"><![CDATA[	// TEMPLATE FUNCTION make_pair]]></Line>
      <Line Number="350"><![CDATA[]]></Line>
      <Line Number="351"><![CDATA[template<class _Ty1,]]></Line>
      <Line Number="352"><![CDATA[	class _Ty2> inline]]></Line>
      <Line Number="353"><![CDATA[	pair<typename _Unrefwrap<_Ty1>::type,]]></Line>
      <Line Number="354"><![CDATA[		typename _Unrefwrap<_Ty2>::type>]]></Line>
      <Line Number="355"><![CDATA[		make_pair(_Ty1&& _Val1, _Ty2&& _Val2)]]></Line>
      <Line Number="356"><![CDATA[	{	// return pair composed from arguments]]></Line>
      <Line Number="357"><![CDATA[	typedef pair<typename _Unrefwrap<_Ty1>::type,]]></Line>
      <Line Number="358"><![CDATA[		typename _Unrefwrap<_Ty2>::type> _Mypair;]]></Line>
      <Line Number="359"><![CDATA[	return (_Mypair(_STD forward<_Ty1>(_Val1),]]></Line>
      <Line Number="360"><![CDATA[		_STD forward<_Ty2>(_Val2)));]]></Line>
      <Line Number="361"><![CDATA[	}]]></Line>
      <Line Number="362"><![CDATA[]]></Line>
      <Line Number="363"><![CDATA[template<class _Ty1,]]></Line>
      <Line Number="364"><![CDATA[	class _Ty2> inline]]></Line>
      <Line Number="365"><![CDATA[	pair<typename _Unrefwrap<_Ty1>::type,]]></Line>
      <Line Number="366"><![CDATA[		typename _Unrefwrap<_Ty2>::type>]]></Line>
      <Line Number="367"><![CDATA[		make_pair(const _Ty1& _Val1, _Ty2&& _Val2)]]></Line>
      <Line Number="368"><![CDATA[	{	// return pair composed from arguments]]></Line>
      <Line Number="369"><![CDATA[	typedef pair<typename _Unrefwrap<_Ty1>::type,]]></Line>
      <Line Number="370"><![CDATA[		typename _Unrefwrap<_Ty2>::type> _Mypair;]]></Line>
      <Line Number="371"><![CDATA[	return (_Mypair((typename _Unrefwrap<_Ty1>::type)_Val1,]]></Line>
      <Line Number="372"><![CDATA[		_STD forward<_Ty2>(_Val2)));]]></Line>
      <Line Number="373"><![CDATA[	}]]></Line>
      <Line Number="374"><![CDATA[]]></Line>
      <Line Number="375"><![CDATA[template<class _Ty1,]]></Line>
      <Line Number="376"><![CDATA[	class _Ty2> inline]]></Line>
      <Line Number="377"><![CDATA[	pair<typename _Unrefwrap<_Ty1>::type,]]></Line>
      <Line Number="378"><![CDATA[		typename _Unrefwrap<_Ty2>::type>]]></Line>
      <Line Number="379"><![CDATA[		make_pair(_Ty1&& _Val1, const _Ty2& _Val2)]]></Line>
      <Line Number="380"><![CDATA[	{	// return pair composed from arguments]]></Line>
      <Line Number="381"><![CDATA[	typedef pair<typename _Unrefwrap<_Ty1>::type,]]></Line>
      <Line Number="382"><![CDATA[		typename _Unrefwrap<_Ty2>::type> _Mypair;]]></Line>
      <Line Number="383"><![CDATA[	return (_Mypair(_STD forward<_Ty1>(_Val1),]]></Line>
      <Line Number="384"><![CDATA[		(typename _Unrefwrap<_Ty2>::type)_Val2));]]></Line>
      <Line Number="385"><![CDATA[	}]]></Line>
      <Line Number="386"><![CDATA[]]></Line>
      <Line Number="387"><![CDATA[template<class _Ty1,]]></Line>
      <Line Number="388"><![CDATA[	class _Ty2> inline]]></Line>
      <Line Number="389"><![CDATA[	pair<typename _Unrefwrap<_Ty1>::type,]]></Line>
      <Line Number="390"><![CDATA[		typename _Unrefwrap<_Ty2>::type>]]></Line>
      <Line Number="391"><![CDATA[		make_pair(const _Ty1& _Val1, const _Ty2& _Val2)]]></Line>
      <Line Number="392"><![CDATA[	{	// return pair composed from arguments]]></Line>
      <Line Number="393"><![CDATA[	typedef pair<typename _Unrefwrap<_Ty1>::type,]]></Line>
      <Line Number="394"><![CDATA[		typename _Unrefwrap<_Ty2>::type> _Mypair;]]></Line>
      <Line Number="395"><![CDATA[	return (_Mypair((typename _Unrefwrap<_Ty1>::type)_Val1,]]></Line>
      <Line Number="396"><![CDATA[		(typename _Unrefwrap<_Ty2>::type)_Val2));]]></Line>
      <Line Number="397"><![CDATA[	}]]></Line>
      <Line Number="398"><![CDATA[]]></Line>
      <Line Number="399"><![CDATA[ #if _HAS_CPP0X]]></Line>
      <Line Number="400"><![CDATA[template<class _InIt> inline]]></Line>
      <Line Number="401"><![CDATA[	_InIt begin(const pair<_InIt, _InIt>& _Pair)]]></Line>
      <Line Number="402"><![CDATA[	{	// return first element of pair]]></Line>
      <Line Number="403"><![CDATA[	return (_Pair.first);]]></Line>
      <Line Number="404"><![CDATA[	}]]></Line>
      <Line Number="405"><![CDATA[]]></Line>
      <Line Number="406"><![CDATA[template<class _InIt> inline]]></Line>
      <Line Number="407"><![CDATA[	_InIt end(const pair<_InIt, _InIt>& _Pair)]]></Line>
      <Line Number="408"><![CDATA[	{	// return second element of pair]]></Line>
      <Line Number="409"><![CDATA[	return (_Pair.second);]]></Line>
      <Line Number="410"><![CDATA[	}]]></Line>
      <Line Number="411"><![CDATA[ #endif /* _HAS_CPP0X */]]></Line>
      <Line Number="412"><![CDATA[]]></Line>
      <Line Number="413"><![CDATA[		// TEMPLATE OPERATORS]]></Line>
      <Line Number="414"><![CDATA[	namespace rel_ops]]></Line>
      <Line Number="415"><![CDATA[		{	// nested namespace to hide relational operators from std]]></Line>
      <Line Number="416"><![CDATA[template<class _Ty> inline]]></Line>
      <Line Number="417"><![CDATA[	bool operator!=(const _Ty& _Left, const _Ty& _Right)]]></Line>
      <Line Number="418"><![CDATA[	{	// test for inequality, in terms of equality]]></Line>
      <Line Number="419"><![CDATA[	return (!(_Left == _Right));]]></Line>
      <Line Number="420"><![CDATA[	}]]></Line>
      <Line Number="421"><![CDATA[]]></Line>
      <Line Number="422"><![CDATA[template<class _Ty> inline]]></Line>
      <Line Number="423"><![CDATA[	bool operator>(const _Ty& _Left, const _Ty& _Right)]]></Line>
      <Line Number="424"><![CDATA[	{	// test if _Left > _Right, in terms of operator<]]></Line>
      <Line Number="425"><![CDATA[	return (_Right < _Left);]]></Line>
      <Line Number="426"><![CDATA[	}]]></Line>
      <Line Number="427"><![CDATA[]]></Line>
      <Line Number="428"><![CDATA[template<class _Ty> inline]]></Line>
      <Line Number="429"><![CDATA[	bool operator<=(const _Ty& _Left, const _Ty& _Right)]]></Line>
      <Line Number="430"><![CDATA[	{	// test if _Left <= _Right, in terms of operator<]]></Line>
      <Line Number="431"><![CDATA[	return (!(_Right < _Left));]]></Line>
      <Line Number="432"><![CDATA[	}]]></Line>
      <Line Number="433"><![CDATA[]]></Line>
      <Line Number="434"><![CDATA[template<class _Ty> inline]]></Line>
      <Line Number="435"><![CDATA[	bool operator>=(const _Ty& _Left, const _Ty& _Right)]]></Line>
      <Line Number="436"><![CDATA[	{	// test if _Left >= _Right, in terms of operator<]]></Line>
      <Line Number="437"><![CDATA[	return (!(_Left < _Right));]]></Line>
      <Line Number="438"><![CDATA[	}]]></Line>
      <Line Number="439"><![CDATA[		}]]></Line>
      <Line Number="440"><![CDATA[_STD_END]]></Line>
      <Line Number="441"><![CDATA[]]></Line>
      <Line Number="442"><![CDATA[ #if _HAS_TR1]]></Line>
      <Line Number="443"><![CDATA[_STD_BEGIN]]></Line>
      <Line Number="444"><![CDATA[	namespace tr1 {	// TR1 additions]]></Line>
      <Line Number="445"><![CDATA[	// TUPLE INTERFACE TO _STD tr1::pair]]></Line>
      <Line Number="446"><![CDATA[template<class _Tuple>]]></Line>
      <Line Number="447"><![CDATA[	struct tuple_size;]]></Line>
      <Line Number="448"><![CDATA[template<size_t _Idx,]]></Line>
      <Line Number="449"><![CDATA[	class _Tuple>]]></Line>
      <Line Number="450"><![CDATA[	struct tuple_element;]]></Line>
      <Line Number="451"><![CDATA[template<class _Ty1,]]></Line>
      <Line Number="452"><![CDATA[	class _Ty2>]]></Line>
      <Line Number="453"><![CDATA[	struct tuple_size<_STD pair<_Ty1, _Ty2> >]]></Line>
      <Line Number="454"><![CDATA[	{	// struct to determine number of elements in pair]]></Line>
      <Line Number="455"><![CDATA[	static const int value = 2;]]></Line>
      <Line Number="456"><![CDATA[	};]]></Line>
      <Line Number="457"><![CDATA[]]></Line>
      <Line Number="458"><![CDATA[template<int _Idx,]]></Line>
      <Line Number="459"><![CDATA[	class _Ty>]]></Line>
      <Line Number="460"><![CDATA[	struct _Pair_data;]]></Line>
      <Line Number="461"><![CDATA[template<class _Ty1,]]></Line>
      <Line Number="462"><![CDATA[	class _Ty2>]]></Line>
      <Line Number="463"><![CDATA[	struct _Pair_data<0, _STD pair<_Ty1, _Ty2> >]]></Line>
      <Line Number="464"><![CDATA[	{	// struct to pick out argument type and value at index 0]]></Line>
      <Line Number="465"><![CDATA[	typedef _Ty1& _Type;]]></Line>
      <Line Number="466"><![CDATA[	typedef const _Ty1& _CType;]]></Line>
      <Line Number="467"><![CDATA[]]></Line>
      <Line Number="468"><![CDATA[	static _Type _Val(_STD pair<_Ty1, _Ty2>& _Pr)]]></Line>
      <Line Number="469"><![CDATA[		{	// return value]]></Line>
      <Line Number="470"><![CDATA[		return (_Pr.first);]]></Line>
      <Line Number="471"><![CDATA[		}]]></Line>
      <Line Number="472"><![CDATA[]]></Line>
      <Line Number="473"><![CDATA[	static _CType _Val(const _STD pair<_Ty1, _Ty2>& _Pr)]]></Line>
      <Line Number="474"><![CDATA[		{	// return value]]></Line>
      <Line Number="475"><![CDATA[		return (_Pr.first);]]></Line>
      <Line Number="476"><![CDATA[		}]]></Line>
      <Line Number="477"><![CDATA[	};]]></Line>
      <Line Number="478"><![CDATA[]]></Line>
      <Line Number="479"><![CDATA[template<class _Ty1,]]></Line>
      <Line Number="480"><![CDATA[	class _Ty2>]]></Line>
      <Line Number="481"><![CDATA[	struct _Pair_data<1, _STD pair<_Ty1, _Ty2> >]]></Line>
      <Line Number="482"><![CDATA[	{	// struct to pick out argument type and value at index 1]]></Line>
      <Line Number="483"><![CDATA[	typedef _Ty2& _Type;]]></Line>
      <Line Number="484"><![CDATA[	typedef const _Ty2& _CType;]]></Line>
      <Line Number="485"><![CDATA[]]></Line>
      <Line Number="486"><![CDATA[	static _Type _Val(_STD pair<_Ty1, _Ty2>& _Pr)]]></Line>
      <Line Number="487"><![CDATA[		{	// return value]]></Line>
      <Line Number="488"><![CDATA[		return (_Pr.second);]]></Line>
      <Line Number="489"><![CDATA[		}]]></Line>
      <Line Number="490"><![CDATA[]]></Line>
      <Line Number="491"><![CDATA[	static _CType _Val(const _STD pair<_Ty1, _Ty2>& _Pr)]]></Line>
      <Line Number="492"><![CDATA[		{	// return value]]></Line>
      <Line Number="493"><![CDATA[		return (_Pr.second);]]></Line>
      <Line Number="494"><![CDATA[		}]]></Line>
      <Line Number="495"><![CDATA[	};]]></Line>
      <Line Number="496"><![CDATA[]]></Line>
      <Line Number="497"><![CDATA[template<class _Ty1,]]></Line>
      <Line Number="498"><![CDATA[	class _Ty2>]]></Line>
      <Line Number="499"><![CDATA[	struct tuple_element<0, _STD pair<_Ty1, _Ty2> >]]></Line>
      <Line Number="500"><![CDATA[	{	// struct to determine type of element 0 in pair]]></Line>
      <Line Number="501"><![CDATA[	typedef _Ty1 type;]]></Line>
      <Line Number="502"><![CDATA[	};]]></Line>
      <Line Number="503"><![CDATA[]]></Line>
      <Line Number="504"><![CDATA[template<class _Ty1,]]></Line>
      <Line Number="505"><![CDATA[	class _Ty2>]]></Line>
      <Line Number="506"><![CDATA[	struct tuple_element<1, _STD pair<_Ty1, _Ty2> >]]></Line>
      <Line Number="507"><![CDATA[	{	// struct to determine type of element 1 in pair]]></Line>
      <Line Number="508"><![CDATA[	typedef _Ty2 type;]]></Line>
      <Line Number="509"><![CDATA[	};]]></Line>
      <Line Number="510"><![CDATA[]]></Line>
      <Line Number="511"><![CDATA[template<int _Idx,]]></Line>
      <Line Number="512"><![CDATA[	class _Ty1,]]></Line>
      <Line Number="513"><![CDATA[	class _Ty2>]]></Line>
      <Line Number="514"><![CDATA[	typename _Pair_data<_Idx, _STD pair<_Ty1, _Ty2> >::_Type]]></Line>
      <Line Number="515"><![CDATA[		get(_STD pair<_Ty1, _Ty2>& _Pr)]]></Line>
      <Line Number="516"><![CDATA[	{	// return element at _Idx in pair _Pr]]></Line>
      <Line Number="517"><![CDATA[	return (_Pair_data<_Idx, _STD pair<_Ty1, _Ty2> >::_Val(_Pr));]]></Line>
      <Line Number="518"><![CDATA[	}]]></Line>
      <Line Number="519"><![CDATA[]]></Line>
      <Line Number="520"><![CDATA[template<int _Idx,]]></Line>
      <Line Number="521"><![CDATA[	class _Ty1,]]></Line>
      <Line Number="522"><![CDATA[	class _Ty2>]]></Line>
      <Line Number="523"><![CDATA[	typename _Pair_data<_Idx, _STD pair<_Ty1, _Ty2> >::_CType]]></Line>
      <Line Number="524"><![CDATA[		get(const _STD pair<_Ty1, _Ty2>& _Pr)]]></Line>
      <Line Number="525"><![CDATA[	{	// return element at _Idx in pair _Pr]]></Line>
      <Line Number="526"><![CDATA[	return (_Pair_data<_Idx, _STD pair<_Ty1, _Ty2> >::_Val(_Pr));]]></Line>
      <Line Number="527"><![CDATA[	}]]></Line>
      <Line Number="528"><![CDATA[	}	// namespace tr1]]></Line>
      <Line Number="529"><![CDATA[_STD_END]]></Line>
      <Line Number="530"><![CDATA[ #endif /* _HAS_TR1 */]]></Line>
      <Line Number="531"><![CDATA[]]></Line>
      <Line Number="532"><![CDATA[ #if _HAS_TR1_IMPORTS]]></Line>
      <Line Number="533"><![CDATA[_STD_BEGIN]]></Line>
      <Line Number="534"><![CDATA[using tr1::get;]]></Line>
      <Line Number="535"><![CDATA[using tr1::tuple_element;]]></Line>
      <Line Number="536"><![CDATA[using tr1::tuple_size;]]></Line>
      <Line Number="537"><![CDATA[_STD_END]]></Line>
      <Line Number="538"><![CDATA[ #endif /* _HAS_TR1_IMPORTS */]]></Line>
      <Line Number="539"><![CDATA[]]></Line>
      <Line Number="540"><![CDATA[ #pragma warning(pop)]]></Line>
      <Line Number="541"><![CDATA[ #pragma pack(pop)]]></Line>
      <Line Number="542"><![CDATA[]]></Line>
      <Line Number="543"><![CDATA[#endif /* RC_INVOKED */]]></Line>
      <Line Number="544"><![CDATA[#endif /* _UTILITY_ */]]></Line>
      <Line Number="545"><![CDATA[]]></Line>
      <Line Number="546"><![CDATA[/*]]></Line>
      <Line Number="547"><![CDATA[ * This file is derived from software bearing the following]]></Line>
      <Line Number="548"><![CDATA[ * restrictions:]]></Line>
      <Line Number="549"><![CDATA[ *]]></Line>
      <Line Number="550"><![CDATA[ * Copyright (c) 1994]]></Line>
      <Line Number="551"><![CDATA[ * Hewlett-Packard Company]]></Line>
      <Line Number="552"><![CDATA[ *]]></Line>
      <Line Number="553"><![CDATA[ * Permission to use, copy, modify, distribute and sell this]]></Line>
      <Line Number="554"><![CDATA[ * software and its documentation for any purpose is hereby]]></Line>
      <Line Number="555"><![CDATA[ * granted without fee, provided that the above copyright notice]]></Line>
      <Line Number="556"><![CDATA[ * appear in all copies and that both that copyright notice and]]></Line>
      <Line Number="557"><![CDATA[ * this permission notice appear in supporting documentation.]]></Line>
      <Line Number="558"><![CDATA[ * Hewlett-Packard Company makes no representations about the]]></Line>
      <Line Number="559"><![CDATA[ * suitability of this software for any purpose. It is provided]]></Line>
      <Line Number="560"><![CDATA[ * "as is" without express or implied warranty.]]></Line>
      <Line Number="561"><![CDATA[ */]]></Line>
      <Line Number="562"><![CDATA[]]></Line>
      <Line Number="563"><![CDATA[/*]]></Line>
      <Line Number="564"><![CDATA[ * Copyright (c) 1992-2009 by P.J. Plauger.  ALL RIGHTS RESERVED.]]></Line>
      <Line Number="565"><![CDATA[ * Consult your license regarding permissions and restrictions.]]></Line>
      <Line Number="566"><![CDATA[V5.20:0009 */]]></Line>
      <Line Number="567"><![CDATA[]]></Line>
    </File>
    <File Name="c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory">
      <Line Number="1"><![CDATA[// xmemory internal header (from <memory>)]]></Line>
      <Line Number="2"><![CDATA[#pragma once]]></Line>
      <Line Number="3"><![CDATA[#ifndef _XMEMORY_]]></Line>
      <Line Number="4"><![CDATA[#define _XMEMORY_]]></Line>
      <Line Number="5"><![CDATA[#ifndef RC_INVOKED]]></Line>
      <Line Number="6"><![CDATA[#include <cstdlib>]]></Line>
      <Line Number="7"><![CDATA[#include <new>]]></Line>
      <Line Number="8"><![CDATA[#include <xutility>]]></Line>
      <Line Number="9"><![CDATA[]]></Line>
      <Line Number="10"><![CDATA[ #pragma pack(push,_CRT_PACKING)]]></Line>
      <Line Number="11"><![CDATA[ #pragma warning(push,3)]]></Line>
      <Line Number="12"><![CDATA[]]></Line>
      <Line Number="13"><![CDATA[ #define _ALLOCATOR	allocator]]></Line>
      <Line Number="14"><![CDATA[]]></Line>
      <Line Number="15"><![CDATA[ #pragma push_macro("new")]]></Line>
      <Line Number="16"><![CDATA[ #undef new]]></Line>
      <Line Number="17"><![CDATA[]]></Line>
      <Line Number="18"><![CDATA[ #pragma warning(disable: 4100)]]></Line>
      <Line Number="19"><![CDATA[]]></Line>
      <Line Number="20"><![CDATA[#ifndef _FARQ	/* specify standard memory model */]]></Line>
      <Line Number="21"><![CDATA[ #define _FARQ]]></Line>
      <Line Number="22"><![CDATA[ #define _PDFT	ptrdiff_t]]></Line>
      <Line Number="23"><![CDATA[ #define _SIZT	size_t]]></Line>
      <Line Number="24"><![CDATA[#endif /* _FARQ */]]></Line>
      <Line Number="25"><![CDATA[]]></Line>
      <Line Number="26"><![CDATA[_STD_BEGIN]]></Line>
      <Line Number="27"><![CDATA[		// TEMPLATE FUNCTION _Allocate]]></Line>
      <Line Number="28"><![CDATA[template<class _Ty> inline]]></Line>
      <Line Number="29"><![CDATA[	_Ty _FARQ *_Allocate(_SIZT _Count, _Ty _FARQ *)]]></Line>
      <Line Number="30"><![CDATA[	{	// allocate storage for _Count elements of type _Ty]]></Line>
      <Line Number="31"><![CDATA[	void *_Ptr = 0;]]></Line>
      <Line Number="32"><![CDATA[]]></Line>
      <Line Number="33"><![CDATA[	if (_Count <= 0)]]></Line>
      <Line Number="34"><![CDATA[		_Count = 0;]]></Line>
      <Line Number="35"><![CDATA[	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)]]></Line>
      <Line Number="36"><![CDATA[		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)]]></Line>
      <Line Number="37"><![CDATA[		_THROW_NCEE(bad_alloc, 0);]]></Line>
      <Line Number="38"><![CDATA[]]></Line>
      <Line Number="39"><![CDATA[	return ((_Ty _FARQ *)_Ptr);]]></Line>
      <Line Number="40"><![CDATA[	}]]></Line>
      <Line Number="41"><![CDATA[]]></Line>
      <Line Number="42"><![CDATA[		// TEMPLATE FUNCTION _Construct]]></Line>
      <Line Number="43"><![CDATA[template<class _Ty1,]]></Line>
      <Line Number="44"><![CDATA[	class _Ty2> inline]]></Line>
      <Line Number="45"><![CDATA[	void _Construct(_Ty1 _FARQ *_Ptr, _Ty2&& _Val)]]></Line>
      <Line Number="46"><![CDATA[	{	// construct object at _Ptr with value _Val]]></Line>
      <Line Number="47"><![CDATA[	void _FARQ *_Vptr = _Ptr;]]></Line>
      <Line Number="48"><![CDATA[	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));]]></Line>
      <Line Number="49"><![CDATA[	}]]></Line>
      <Line Number="50"><![CDATA[]]></Line>
      <Line Number="51"><![CDATA[template<class _Ty1> inline]]></Line>
      <Line Number="52"><![CDATA[	void _Construct(_Ty1 _FARQ *_Ptr)]]></Line>
      <Line Number="53"><![CDATA[	{	// construct object at _Ptr with default value]]></Line>
      <Line Number="54"><![CDATA[	void _FARQ *_Vptr = _Ptr;]]></Line>
      <Line Number="55"><![CDATA[]]></Line>
      <Line Number="56"><![CDATA[	::new (_Vptr) _Ty1();]]></Line>
      <Line Number="57"><![CDATA[	}]]></Line>
      <Line Number="58"><![CDATA[]]></Line>
      <Line Number="59"><![CDATA[		// TEMPLATE FUNCTION _Destroy]]></Line>
      <Line Number="60"><![CDATA[template<class _Ty> inline]]></Line>
      <Line Number="61"><![CDATA[	void _Destroy(_Ty _FARQ *_Ptr)]]></Line>
      <Line Number="62"><![CDATA[	{	// destroy object at _Ptr]]></Line>
      <Line Number="63"><![CDATA[	_Ptr->~_Ty();]]></Line>
      <Line Number="64"><![CDATA[	}]]></Line>
      <Line Number="65"><![CDATA[]]></Line>
      <Line Number="66"><![CDATA[template<> inline]]></Line>
      <Line Number="67"><![CDATA[	void _Destroy(char _FARQ *)]]></Line>
      <Line Number="68"><![CDATA[	{	// destroy a char (do nothing)]]></Line>
      <Line Number="69"><![CDATA[	}]]></Line>
      <Line Number="70"><![CDATA[]]></Line>
      <Line Number="71"><![CDATA[template<> inline]]></Line>
      <Line Number="72"><![CDATA[	void _Destroy(wchar_t _FARQ *)]]></Line>
      <Line Number="73"><![CDATA[	{	// destroy a wchar_t (do nothing)]]></Line>
      <Line Number="74"><![CDATA[	}]]></Line>
      <Line Number="75"><![CDATA[]]></Line>
      <Line Number="76"><![CDATA[ #ifdef _NATIVE_WCHAR_T_DEFINED]]></Line>
      <Line Number="77"><![CDATA[template<> inline]]></Line>
      <Line Number="78"><![CDATA[	void _Destroy(unsigned short _FARQ *)]]></Line>
      <Line Number="79"><![CDATA[	{	// destroy a unsigned short (do nothing)]]></Line>
      <Line Number="80"><![CDATA[	}]]></Line>
      <Line Number="81"><![CDATA[ #endif /* _NATIVE_WCHAR_T_DEFINED */]]></Line>
      <Line Number="82"><![CDATA[]]></Line>
      <Line Number="83"><![CDATA[		// TEMPLATE FUNCTION _Destroy_range]]></Line>
      <Line Number="84"><![CDATA[template<class _Alloc> inline]]></Line>
      <Line Number="85"><![CDATA[	void _Destroy_range(typename _Alloc::pointer _First,]]></Line>
      <Line Number="86"><![CDATA[		typename _Alloc::pointer _Last, _Alloc& _Al)]]></Line>
      <Line Number="87"><![CDATA[	{	// destroy [_First, _Last)]]></Line>
      <Line Number="88"><![CDATA[	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));]]></Line>
      <Line Number="89"><![CDATA[	}]]></Line>
      <Line Number="90"><![CDATA[]]></Line>
      <Line Number="91"><![CDATA[template<class _Alloc> inline]]></Line>
      <Line Number="92"><![CDATA[	void _Destroy_range(typename _Alloc::pointer _First,]]></Line>
      <Line Number="93"><![CDATA[		typename _Alloc::pointer _Last, _Alloc& _Al,]]></Line>
      <Line Number="94"><![CDATA[		_Nonscalar_ptr_iterator_tag)]]></Line>
      <Line Number="95"><![CDATA[	{	// destroy [_First, _Last), arbitrary type]]></Line>
      <Line Number="96"><![CDATA[	for (; _First != _Last; ++_First)]]></Line>
      <Line Number="97"><![CDATA[		_Dest_val(_Al, _First);]]></Line>
      <Line Number="98"><![CDATA[	}]]></Line>
      <Line Number="99"><![CDATA[]]></Line>
      <Line Number="100"><![CDATA[template<class _Alloc> inline]]></Line>
      <Line Number="101"><![CDATA[	void _Destroy_range(typename _Alloc::pointer _First,]]></Line>
      <Line Number="102"><![CDATA[		typename _Alloc::pointer _Last, _Alloc& _Al,]]></Line>
      <Line Number="103"><![CDATA[		_Scalar_ptr_iterator_tag)]]></Line>
      <Line Number="104"><![CDATA[	{	// destroy [_First, _Last), scalar type (do nothing)]]></Line>
      <Line Number="105"><![CDATA[	}]]></Line>
      <Line Number="106"><![CDATA[]]></Line>
      <Line Number="107"><![CDATA[		// TEMPLATE FUNCTION addressof]]></Line>
      <Line Number="108"><![CDATA[template<class _Ty> inline]]></Line>
      <Line Number="109"><![CDATA[	_Ty * addressof(_Ty& _Val)]]></Line>
      <Line Number="110"><![CDATA[	{	// return address of _Val]]></Line>
      <Line Number="111"><![CDATA[	return ((_Ty *) &(char&)_Val);]]></Line>
      <Line Number="112"><![CDATA[	}]]></Line>
      <Line Number="113"><![CDATA[]]></Line>
      <Line Number="114"><![CDATA[		// TEMPLATE CLASS _Allocator_base]]></Line>
      <Line Number="115"><![CDATA[template<class _Ty>]]></Line>
      <Line Number="116"><![CDATA[	struct _Allocator_base]]></Line>
      <Line Number="117"><![CDATA[	{	// base class for generic allocators]]></Line>
      <Line Number="118"><![CDATA[	typedef _Ty value_type;]]></Line>
      <Line Number="119"><![CDATA[	};]]></Line>
      <Line Number="120"><![CDATA[]]></Line>
      <Line Number="121"><![CDATA[		// TEMPLATE CLASS _Allocator_base<const _Ty>]]></Line>
      <Line Number="122"><![CDATA[template<class _Ty>]]></Line>
      <Line Number="123"><![CDATA[	struct _Allocator_base<const _Ty>]]></Line>
      <Line Number="124"><![CDATA[	{	// base class for generic allocators for const _Ty]]></Line>
      <Line Number="125"><![CDATA[	typedef _Ty value_type;]]></Line>
      <Line Number="126"><![CDATA[	};]]></Line>
      <Line Number="127"><![CDATA[]]></Line>
      <Line Number="128"><![CDATA[		// TEMPLATE CLASS _ALLOCATOR]]></Line>
      <Line Number="129"><![CDATA[template<class _Ty>]]></Line>
      <Line Number="130"><![CDATA[	class _ALLOCATOR]]></Line>
      <Line Number="131"><![CDATA[		: public _Allocator_base<_Ty>]]></Line>
      <Line Number="132"><![CDATA[	{	// generic allocator for objects of class _Ty]]></Line>
      <Line Number="133"><![CDATA[public:]]></Line>
      <Line Number="134"><![CDATA[	typedef _Allocator_base<_Ty> _Mybase;]]></Line>
      <Line Number="135"><![CDATA[	typedef typename _Mybase::value_type value_type;]]></Line>
      <Line Number="136"><![CDATA[]]></Line>
      <Line Number="137"><![CDATA[	typedef value_type _FARQ *pointer;]]></Line>
      <Line Number="138"><![CDATA[	typedef value_type _FARQ& reference;]]></Line>
      <Line Number="139"><![CDATA[	typedef const value_type _FARQ *const_pointer;]]></Line>
      <Line Number="140"><![CDATA[	typedef const value_type _FARQ& const_reference;]]></Line>
      <Line Number="141"><![CDATA[]]></Line>
      <Line Number="142"><![CDATA[	typedef _SIZT size_type;]]></Line>
      <Line Number="143"><![CDATA[	typedef _PDFT difference_type;]]></Line>
      <Line Number="144"><![CDATA[]]></Line>
      <Line Number="145"><![CDATA[	template<class _Other>]]></Line>
      <Line Number="146"><![CDATA[		struct rebind]]></Line>
      <Line Number="147"><![CDATA[		{	// convert this type to _ALLOCATOR<_Other>]]></Line>
      <Line Number="148"><![CDATA[		typedef _ALLOCATOR<_Other> other;]]></Line>
      <Line Number="149"><![CDATA[		};]]></Line>
      <Line Number="150"><![CDATA[]]></Line>
      <Line Number="151"><![CDATA[	pointer address(reference _Val) const]]></Line>
      <Line Number="152"><![CDATA[		{	// return address of mutable _Val]]></Line>
      <Line Number="153"><![CDATA[		return ((pointer) &(char&)_Val);]]></Line>
      <Line Number="154"><![CDATA[		}]]></Line>
      <Line Number="155"><![CDATA[]]></Line>
      <Line Number="156"><![CDATA[	const_pointer address(const_reference _Val) const]]></Line>
      <Line Number="157"><![CDATA[		{	// return address of nonmutable _Val]]></Line>
      <Line Number="158"><![CDATA[		return ((const_pointer) &(char&)_Val);]]></Line>
      <Line Number="159"><![CDATA[		}]]></Line>
      <Line Number="160"><![CDATA[]]></Line>
      <Line Number="161"><![CDATA[	_ALLOCATOR() _THROW0()]]></Line>
      <Line Number="162"><![CDATA[		{	// construct default allocator (do nothing)]]></Line>
      <Line Number="163"><![CDATA[		}]]></Line>
      <Line Number="164"><![CDATA[]]></Line>
      <Line Number="165"><![CDATA[	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()]]></Line>
      <Line Number="166"><![CDATA[		{	// construct by copying (do nothing)]]></Line>
      <Line Number="167"><![CDATA[		}]]></Line>
      <Line Number="168"><![CDATA[]]></Line>
      <Line Number="169"><![CDATA[	template<class _Other>]]></Line>
      <Line Number="170"><![CDATA[		_ALLOCATOR(const _ALLOCATOR<_Other>&) _THROW0()]]></Line>
      <Line Number="171"><![CDATA[		{	// construct from a related allocator (do nothing)]]></Line>
      <Line Number="172"><![CDATA[		}]]></Line>
      <Line Number="173"><![CDATA[]]></Line>
      <Line Number="174"><![CDATA[	template<class _Other>]]></Line>
      <Line Number="175"><![CDATA[		_ALLOCATOR<_Ty>& operator=(const _ALLOCATOR<_Other>&)]]></Line>
      <Line Number="176"><![CDATA[		{	// assign from a related allocator (do nothing)]]></Line>
      <Line Number="177"><![CDATA[		return (*this);]]></Line>
      <Line Number="178"><![CDATA[		}]]></Line>
      <Line Number="179"><![CDATA[]]></Line>
      <Line Number="180"><![CDATA[	void deallocate(pointer _Ptr, size_type)]]></Line>
      <Line Number="181"><![CDATA[		{	// deallocate object at _Ptr, ignore size]]></Line>
      <Line Number="182"><![CDATA[		::operator delete(_Ptr);]]></Line>
      <Line Number="183"><![CDATA[		}]]></Line>
      <Line Number="184"><![CDATA[]]></Line>
      <Line Number="185"><![CDATA[	pointer allocate(size_type _Count)]]></Line>
      <Line Number="186"><![CDATA[		{	// allocate array of _Count elements]]></Line>
      <Line Number="187"><![CDATA[		return (_Allocate(_Count, (pointer)0));]]></Line>
      <Line Number="188"><![CDATA[		}]]></Line>
      <Line Number="189"><![CDATA[]]></Line>
      <Line Number="190"><![CDATA[	pointer allocate(size_type _Count, const void _FARQ *)]]></Line>
      <Line Number="191"><![CDATA[		{	// allocate array of _Count elements, ignore hint]]></Line>
      <Line Number="192"><![CDATA[		return (allocate(_Count));]]></Line>
      <Line Number="193"><![CDATA[		}]]></Line>
      <Line Number="194"><![CDATA[]]></Line>
      <Line Number="195"><![CDATA[	void construct(pointer _Ptr, const _Ty& _Val)]]></Line>
      <Line Number="196"><![CDATA[		{	// construct object at _Ptr with value _Val]]></Line>
      <Line Number="197"><![CDATA[		_Construct(_Ptr, _Val);]]></Line>
      <Line Number="198"><![CDATA[		}]]></Line>
      <Line Number="199"><![CDATA[]]></Line>
      <Line Number="200"><![CDATA[	void construct(pointer _Ptr, _Ty&& _Val)]]></Line>
      <Line Number="201"><![CDATA[		{	// construct object at _Ptr with value _Val]]></Line>
      <Line Number="202"><![CDATA[		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));]]></Line>
      <Line Number="203"><![CDATA[		}]]></Line>
      <Line Number="204"><![CDATA[]]></Line>
      <Line Number="205"><![CDATA[	template<class _Other>]]></Line>
      <Line Number="206"><![CDATA[		void construct(pointer _Ptr, _Other&& _Val)]]></Line>
      <Line Number="207"><![CDATA[		{	// construct object at _Ptr with value _Val]]></Line>
      <Line Number="208"><![CDATA[		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));]]></Line>
      <Line Number="209"><![CDATA[		}]]></Line>
      <Line Number="210"><![CDATA[]]></Line>
      <Line Number="211"><![CDATA[	void destroy(pointer _Ptr)]]></Line>
      <Line Number="212"><![CDATA[		{	// destroy object at _Ptr]]></Line>
      <Line Number="213"><![CDATA[		_Destroy(_Ptr);]]></Line>
      <Line Number="214"><![CDATA[		}]]></Line>
      <Line Number="215"><![CDATA[]]></Line>
      <Line Number="216"><![CDATA[	_SIZT max_size() const _THROW0()]]></Line>
      <Line Number="217"><![CDATA[		{	// estimate maximum array size]]></Line>
      <Line Number="218"><![CDATA[		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);]]></Line>
      <Line Number="219"><![CDATA[		return (0 < _Count ? _Count : 1);]]></Line>
      <Line Number="220"><![CDATA[		}]]></Line>
      <Line Number="221"><![CDATA[	};]]></Line>
      <Line Number="222"><![CDATA[]]></Line>
      <Line Number="223"><![CDATA[		// CLASS _ALLOCATOR<void>]]></Line>
      <Line Number="224"><![CDATA[template<> class _ALLOCATOR<void>]]></Line>
      <Line Number="225"><![CDATA[	{	// generic _ALLOCATOR for type void]]></Line>
      <Line Number="226"><![CDATA[public:]]></Line>
      <Line Number="227"><![CDATA[	typedef void _Ty;]]></Line>
      <Line Number="228"><![CDATA[	typedef _Ty _FARQ *pointer;]]></Line>
      <Line Number="229"><![CDATA[	typedef const _Ty _FARQ *const_pointer;]]></Line>
      <Line Number="230"><![CDATA[	typedef _Ty value_type;]]></Line>
      <Line Number="231"><![CDATA[]]></Line>
      <Line Number="232"><![CDATA[	template<class _Other>]]></Line>
      <Line Number="233"><![CDATA[		struct rebind]]></Line>
      <Line Number="234"><![CDATA[		{	// convert this type to an _ALLOCATOR<_Other>]]></Line>
      <Line Number="235"><![CDATA[		typedef _ALLOCATOR<_Other> other;]]></Line>
      <Line Number="236"><![CDATA[		};]]></Line>
      <Line Number="237"><![CDATA[]]></Line>
      <Line Number="238"><![CDATA[	_ALLOCATOR() _THROW0()]]></Line>
      <Line Number="239"><![CDATA[		{	// construct default allocator (do nothing)]]></Line>
      <Line Number="240"><![CDATA[		}]]></Line>
      <Line Number="241"><![CDATA[]]></Line>
      <Line Number="242"><![CDATA[	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()]]></Line>
      <Line Number="243"><![CDATA[		{	// construct by copying (do nothing)]]></Line>
      <Line Number="244"><![CDATA[		}]]></Line>
      <Line Number="245"><![CDATA[]]></Line>
      <Line Number="246"><![CDATA[	template<class _Other>]]></Line>
      <Line Number="247"><![CDATA[		_ALLOCATOR(const _ALLOCATOR<_Other>&) _THROW0()]]></Line>
      <Line Number="248"><![CDATA[		{	// construct from related allocator (do nothing)]]></Line>
      <Line Number="249"><![CDATA[		}]]></Line>
      <Line Number="250"><![CDATA[]]></Line>
      <Line Number="251"><![CDATA[	template<class _Other>]]></Line>
      <Line Number="252"><![CDATA[		_ALLOCATOR<_Ty>& operator=(const _ALLOCATOR<_Other>&)]]></Line>
      <Line Number="253"><![CDATA[		{	// assign from a related allocator (do nothing)]]></Line>
      <Line Number="254"><![CDATA[		return (*this);]]></Line>
      <Line Number="255"><![CDATA[		}]]></Line>
      <Line Number="256"><![CDATA[	};]]></Line>
      <Line Number="257"><![CDATA[]]></Line>
      <Line Number="258"><![CDATA[template<class _Ty,]]></Line>
      <Line Number="259"><![CDATA[	class _Other> inline]]></Line>
      <Line Number="260"><![CDATA[	bool operator==(const allocator<_Ty>&,]]></Line>
      <Line Number="261"><![CDATA[		const allocator<_Other>&) _THROW0()]]></Line>
      <Line Number="262"><![CDATA[	{	// test for allocator equality]]></Line>
      <Line Number="263"><![CDATA[	return (true);]]></Line>
      <Line Number="264"><![CDATA[	}]]></Line>
      <Line Number="265"><![CDATA[]]></Line>
      <Line Number="266"><![CDATA[template<class _Ty,]]></Line>
      <Line Number="267"><![CDATA[	class _Other> inline]]></Line>
      <Line Number="268"><![CDATA[	bool operator!=(const allocator<_Ty>& _Left,]]></Line>
      <Line Number="269"><![CDATA[		const allocator<_Other>& _Right) _THROW0()]]></Line>
      <Line Number="270"><![CDATA[	{	// test for allocator inequality]]></Line>
      <Line Number="271"><![CDATA[	return (!(_Left == _Right));]]></Line>
      <Line Number="272"><![CDATA[	}]]></Line>
      <Line Number="273"><![CDATA[]]></Line>
      <Line Number="274"><![CDATA[		// TEMPLATE FUNCTIONS _Cons_val AND _Dest_val]]></Line>
      <Line Number="275"><![CDATA[template<class _Alloc,]]></Line>
      <Line Number="276"><![CDATA[	class _Ty1,]]></Line>
      <Line Number="277"><![CDATA[	class _Ty2>]]></Line>
      <Line Number="278"><![CDATA[	void _Cons_val(_Alloc& _Alval, _Ty1 *_Pdest, _Ty2&& _Src)]]></Line>
      <Line Number="279"><![CDATA[	{	// construct using allocator]]></Line>
      <Line Number="280"><![CDATA[	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));]]></Line>
      <Line Number="281"><![CDATA[	}]]></Line>
      <Line Number="282"><![CDATA[]]></Line>
      <Line Number="283"><![CDATA[template<class _Alloc,]]></Line>
      <Line Number="284"><![CDATA[	class _Ty1>]]></Line>
      <Line Number="285"><![CDATA[	void _Dest_val(_Alloc& _Alval, _Ty1 *_Pdest)]]></Line>
      <Line Number="286"><![CDATA[	{	// destroy using allocator]]></Line>
      <Line Number="287"><![CDATA[	_Alval.destroy(_Pdest);]]></Line>
      <Line Number="288"><![CDATA[	}]]></Line>
      <Line Number="289"><![CDATA[_STD_END]]></Line>
      <Line Number="290"><![CDATA[]]></Line>
      <Line Number="291"><![CDATA[ #pragma pop_macro("new")]]></Line>
      <Line Number="292"><![CDATA[]]></Line>
      <Line Number="293"><![CDATA[ #pragma warning(pop)]]></Line>
      <Line Number="294"><![CDATA[ #pragma pack(pop)]]></Line>
      <Line Number="295"><![CDATA[]]></Line>
      <Line Number="296"><![CDATA[#endif /* RC_INVOKED */]]></Line>
      <Line Number="297"><![CDATA[#endif /* _XMEMORY_ */]]></Line>
      <Line Number="298"><![CDATA[]]></Line>
      <Line Number="299"><![CDATA[/*]]></Line>
      <Line Number="300"><![CDATA[ * This file is derived from software bearing the following]]></Line>
      <Line Number="301"><![CDATA[ * restrictions:]]></Line>
      <Line Number="302"><![CDATA[ *]]></Line>
      <Line Number="303"><![CDATA[ * Copyright (c) 1994]]></Line>
      <Line Number="304"><![CDATA[ * Hewlett-Packard Company]]></Line>
      <Line Number="305"><![CDATA[ *]]></Line>
      <Line Number="306"><![CDATA[ * Permission to use, copy, modify, distribute and sell this]]></Line>
      <Line Number="307"><![CDATA[ * software and its documentation for any purpose is hereby]]></Line>
      <Line Number="308"><![CDATA[ * granted without fee, provided that the above copyright notice]]></Line>
      <Line Number="309"><![CDATA[ * appear in all copies and that both that copyright notice and]]></Line>
      <Line Number="310"><![CDATA[ * this permission notice appear in supporting documentation.]]></Line>
      <Line Number="311"><![CDATA[ * Hewlett-Packard Company makes no representations about the]]></Line>
      <Line Number="312"><![CDATA[ * suitability of this software for any purpose. It is provided]]></Line>
      <Line Number="313"><![CDATA[ * "as is" without express or implied warranty.]]></Line>
      <Line Number="314"><![CDATA[ */]]></Line>
      <Line Number="315"><![CDATA[]]></Line>
      <Line Number="316"><![CDATA[/*]]></Line>
      <Line Number="317"><![CDATA[ * Copyright (c) 1992-2009 by P.J. Plauger.  ALL RIGHTS RESERVED.]]></Line>
      <Line Number="318"><![CDATA[ * Consult your license regarding permissions and restrictions.]]></Line>
      <Line Number="319"><![CDATA[V5.20:0009 */]]></Line>
      <Line Number="320"><![CDATA[]]></Line>
    </File>
    <File Name="c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility">
      <Line Number="1"><![CDATA[// xutility internal header]]></Line>
      <Line Number="2"><![CDATA[#pragma once]]></Line>
      <Line Number="3"><![CDATA[#ifndef _XUTILITY_]]></Line>
      <Line Number="4"><![CDATA[#define _XUTILITY_]]></Line>
      <Line Number="5"><![CDATA[#ifndef RC_INVOKED]]></Line>
      <Line Number="6"><![CDATA[#include <climits>]]></Line>
      <Line Number="7"><![CDATA[#include <cstdlib>]]></Line>
      <Line Number="8"><![CDATA[#include <utility>]]></Line>
      <Line Number="9"><![CDATA[]]></Line>
      <Line Number="10"><![CDATA[ #pragma pack(push,_CRT_PACKING)]]></Line>
      <Line Number="11"><![CDATA[ #pragma warning(push,3)]]></Line>
      <Line Number="12"><![CDATA[]]></Line>
      <Line Number="13"><![CDATA[_STD_BEGIN]]></Line>
      <Line Number="14"><![CDATA[		// MACRO DEBUG_ERROR]]></Line>
      <Line Number="15"><![CDATA[]]></Line>
      <Line Number="16"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 2]]></Line>
      <Line Number="17"><![CDATA[]]></Line>
      <Line Number="18"><![CDATA[  #define _DEBUG_ERROR(mesg)	\]]></Line>
      <Line Number="19"><![CDATA[	_DEBUG_ERROR2(mesg, __FILEW__, __LINE__)]]></Line>
      <Line Number="20"><![CDATA[  #define _DEBUG_ERROR2(mesg, file, line)	\]]></Line>
      <Line Number="21"><![CDATA[	_Debug_message(L ## mesg, file, line)]]></Line>
      <Line Number="22"><![CDATA[]]></Line>
      <Line Number="23"><![CDATA[typedef const wchar_t *_Dbfile_t;]]></Line>
      <Line Number="24"><![CDATA[typedef unsigned int _Dbline_t;]]></Line>
      <Line Number="25"><![CDATA[]]></Line>
      <Line Number="26"><![CDATA[_CRTIMP2_PURE void __CLRCALL_PURE_OR_CDECL _Debug_message(const wchar_t *,]]></Line>
      <Line Number="27"><![CDATA[	const wchar_t *, unsigned int);]]></Line>
      <Line Number="28"><![CDATA[]]></Line>
      <Line Number="29"><![CDATA[ #else /* _ITERATOR_DEBUG_LEVEL == 2 */]]></Line>
      <Line Number="30"><![CDATA[  #define _DEBUG_ERROR(mesg)]]></Line>
      <Line Number="31"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL == 2 */]]></Line>
      <Line Number="32"><![CDATA[]]></Line>
      <Line Number="33"><![CDATA[		// CLASSES _Container_base*, _Iterator_base*]]></Line>
      <Line Number="34"><![CDATA[struct _CRTIMP2_PURE _Container_base0]]></Line>
      <Line Number="35"><![CDATA[	{	// base of all containers]]></Line>
      <Line Number="36"><![CDATA[	void _Orphan_all()]]></Line>
      <Line Number="37"><![CDATA[		{	// orphan all iterators]]></Line>
      <Line Number="38"><![CDATA[		}]]></Line>
      <Line Number="39"><![CDATA[]]></Line>
      <Line Number="40"><![CDATA[	void _Swap_all(_Container_base0&)]]></Line>
      <Line Number="41"><![CDATA[		{	// swap all iterators]]></Line>
      <Line Number="42"><![CDATA[		}]]></Line>
      <Line Number="43"><![CDATA[	};]]></Line>
      <Line Number="44"><![CDATA[]]></Line>
      <Line Number="45"><![CDATA[struct _Iterator_base0]]></Line>
      <Line Number="46"><![CDATA[	{	// base of all iterators]]></Line>
      <Line Number="47"><![CDATA[	void _Adopt(const void *)]]></Line>
      <Line Number="48"><![CDATA[		{	// adopt this iterator by parent]]></Line>
      <Line Number="49"><![CDATA[		}]]></Line>
      <Line Number="50"><![CDATA[]]></Line>
      <Line Number="51"><![CDATA[	const _Container_base0 *_Getcont() const]]></Line>
      <Line Number="52"><![CDATA[		{	// get owning container]]></Line>
      <Line Number="53"><![CDATA[		return (0);]]></Line>
      <Line Number="54"><![CDATA[		}]]></Line>
      <Line Number="55"><![CDATA[	};]]></Line>
      <Line Number="56"><![CDATA[]]></Line>
      <Line Number="57"><![CDATA[struct _Container_base12;]]></Line>
      <Line Number="58"><![CDATA[struct _Iterator_base12;]]></Line>
      <Line Number="59"><![CDATA[]]></Line>
      <Line Number="60"><![CDATA[		// CLASS _Container_proxy]]></Line>
      <Line Number="61"><![CDATA[struct _Container_proxy]]></Line>
      <Line Number="62"><![CDATA[	{	// store head of iterator chain and back pointer]]></Line>
      <Line Number="63"><![CDATA[	_Container_proxy()]]></Line>
      <Line Number="64"><![CDATA[		: _Mycont(0), _Myfirstiter(0)]]></Line>
      <Line Number="65"><![CDATA[		{	// construct from pointers]]></Line>
      <Line Number="66"><![CDATA[		}]]></Line>
      <Line Number="67"><![CDATA[]]></Line>
      <Line Number="68"><![CDATA[	const _Container_base12 *_Mycont;]]></Line>
      <Line Number="69"><![CDATA[	_Iterator_base12 *_Myfirstiter;]]></Line>
      <Line Number="70"><![CDATA[	};]]></Line>
      <Line Number="71"><![CDATA[]]></Line>
      <Line Number="72"><![CDATA[struct _CRTIMP2_PURE _Container_base12]]></Line>
      <Line Number="73"><![CDATA[	{	// store pointer to _Container_proxy]]></Line>
      <Line Number="74"><![CDATA[public:]]></Line>
      <Line Number="75"><![CDATA[	_Container_base12()]]></Line>
      <Line Number="76"><![CDATA[		: _Myproxy(0)]]></Line>
      <Line Number="77"><![CDATA[		{	// construct childless container]]></Line>
      <Line Number="78"><![CDATA[		}]]></Line>
      <Line Number="79"><![CDATA[]]></Line>
      <Line Number="80"><![CDATA[	_Container_base12(const _Container_base12&)]]></Line>
      <Line Number="81"><![CDATA[		: _Myproxy(0)]]></Line>
      <Line Number="82"><![CDATA[		{	// copy a container]]></Line>
      <Line Number="83"><![CDATA[		}]]></Line>
      <Line Number="84"><![CDATA[]]></Line>
      <Line Number="85"><![CDATA[	_Container_base12& operator=(const _Container_base12&)]]></Line>
      <Line Number="86"><![CDATA[		{	// assign a container]]></Line>
      <Line Number="87"><![CDATA[		return (*this);]]></Line>
      <Line Number="88"><![CDATA[		}]]></Line>
      <Line Number="89"><![CDATA[]]></Line>
      <Line Number="90"><![CDATA[	~_Container_base12()]]></Line>
      <Line Number="91"><![CDATA[		{	// destroy the container]]></Line>
      <Line Number="92"><![CDATA[		_Orphan_all();]]></Line>
      <Line Number="93"><![CDATA[		}]]></Line>
      <Line Number="94"><![CDATA[]]></Line>
      <Line Number="95"><![CDATA[	_Iterator_base12 **_Getpfirst() const]]></Line>
      <Line Number="96"><![CDATA[		{	// get address of iterator chain]]></Line>
      <Line Number="97"><![CDATA[		return (_Myproxy == 0 ? 0 : &_Myproxy->_Myfirstiter);]]></Line>
      <Line Number="98"><![CDATA[		}]]></Line>
      <Line Number="99"><![CDATA[]]></Line>
      <Line Number="100"><![CDATA[	void _Orphan_all();	// orphan all iterators]]></Line>
      <Line Number="101"><![CDATA[	void _Swap_all(_Container_base12&);	// swap all iterators]]></Line>
      <Line Number="102"><![CDATA[]]></Line>
      <Line Number="103"><![CDATA[	_Container_proxy *_Myproxy;]]></Line>
      <Line Number="104"><![CDATA[	};]]></Line>
      <Line Number="105"><![CDATA[]]></Line>
      <Line Number="106"><![CDATA[struct _Iterator_base12]]></Line>
      <Line Number="107"><![CDATA[	{	// store links to container proxy, next iterator]]></Line>
      <Line Number="108"><![CDATA[public:]]></Line>
      <Line Number="109"><![CDATA[	_Iterator_base12()]]></Line>
      <Line Number="110"><![CDATA[		: _Myproxy(0), _Mynextiter(0)]]></Line>
      <Line Number="111"><![CDATA[		{	// construct orphaned iterator]]></Line>
      <Line Number="112"><![CDATA[		}]]></Line>
      <Line Number="113"><![CDATA[]]></Line>
      <Line Number="114"><![CDATA[	_Iterator_base12(const _Iterator_base12& _Right)]]></Line>
      <Line Number="115"><![CDATA[		: _Myproxy(0), _Mynextiter(0)]]></Line>
      <Line Number="116"><![CDATA[		{	// copy an iterator]]></Line>
      <Line Number="117"><![CDATA[		*this = _Right;]]></Line>
      <Line Number="118"><![CDATA[		}]]></Line>
      <Line Number="119"><![CDATA[]]></Line>
      <Line Number="120"><![CDATA[	_Iterator_base12& operator=(const _Iterator_base12& _Right)]]></Line>
      <Line Number="121"><![CDATA[		{	// assign an iterator]]></Line>
      <Line Number="122"><![CDATA[		if (_Myproxy != _Right._Myproxy)]]></Line>
      <Line Number="123"><![CDATA[			_Adopt(_Right._Myproxy->_Mycont);]]></Line>
      <Line Number="124"><![CDATA[		return (*this);]]></Line>
      <Line Number="125"><![CDATA[		}]]></Line>
      <Line Number="126"><![CDATA[]]></Line>
      <Line Number="127"><![CDATA[	~_Iterator_base12()]]></Line>
      <Line Number="128"><![CDATA[		{	// destroy the iterator]]></Line>
      <Line Number="129"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 2]]></Line>
      <Line Number="130"><![CDATA[		_Lockit _Lock(_LOCK_DEBUG);]]></Line>
      <Line Number="131"><![CDATA[		_Orphan_me();]]></Line>
      <Line Number="132"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL == 2 */]]></Line>
      <Line Number="133"><![CDATA[		}]]></Line>
      <Line Number="134"><![CDATA[]]></Line>
      <Line Number="135"><![CDATA[	void _Adopt(const _Container_base12 *_Parent)]]></Line>
      <Line Number="136"><![CDATA[		{	// adopt this iterator by parent]]></Line>
      <Line Number="137"><![CDATA[		if (_Parent != 0)]]></Line>
      <Line Number="138"><![CDATA[			{	// have a parent, do adoption]]></Line>
      <Line Number="139"><![CDATA[			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;]]></Line>
      <Line Number="140"><![CDATA[]]></Line>
      <Line Number="141"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 2]]></Line>
      <Line Number="142"><![CDATA[			if (_Myproxy != _Parent_proxy)]]></Line>
      <Line Number="143"><![CDATA[				{	// change parentage]]></Line>
      <Line Number="144"><![CDATA[				_Lockit _Lock(_LOCK_DEBUG);]]></Line>
      <Line Number="145"><![CDATA[				_Orphan_me();]]></Line>
      <Line Number="146"><![CDATA[				_Mynextiter = _Parent_proxy->_Myfirstiter;]]></Line>
      <Line Number="147"><![CDATA[				_Parent_proxy->_Myfirstiter = this;]]></Line>
      <Line Number="148"><![CDATA[				_Myproxy = _Parent_proxy;]]></Line>
      <Line Number="149"><![CDATA[				}]]></Line>
      <Line Number="150"><![CDATA[ #else /* _ITERATOR_DEBUG_LEVEL == 2 */]]></Line>
      <Line Number="151"><![CDATA[			_Myproxy = _Parent_proxy;]]></Line>
      <Line Number="152"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL == 2 */]]></Line>
      <Line Number="153"><![CDATA[			}]]></Line>
      <Line Number="154"><![CDATA[		}]]></Line>
      <Line Number="155"><![CDATA[]]></Line>
      <Line Number="156"><![CDATA[	void _Clrcont()]]></Line>
      <Line Number="157"><![CDATA[		{	// disown owning container]]></Line>
      <Line Number="158"><![CDATA[		_Myproxy = 0;]]></Line>
      <Line Number="159"><![CDATA[		}]]></Line>
      <Line Number="160"><![CDATA[]]></Line>
      <Line Number="161"><![CDATA[	const _Container_base12 *_Getcont() const]]></Line>
      <Line Number="162"><![CDATA[		{	// get owning container]]></Line>
      <Line Number="163"><![CDATA[		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);]]></Line>
      <Line Number="164"><![CDATA[		}]]></Line>
      <Line Number="165"><![CDATA[]]></Line>
      <Line Number="166"><![CDATA[	_Iterator_base12 **_Getpnext()]]></Line>
      <Line Number="167"><![CDATA[		{	// get address of remaining iterator chain]]></Line>
      <Line Number="168"><![CDATA[		return (&_Mynextiter);]]></Line>
      <Line Number="169"><![CDATA[		}]]></Line>
      <Line Number="170"><![CDATA[]]></Line>
      <Line Number="171"><![CDATA[	void _Orphan_me()]]></Line>
      <Line Number="172"><![CDATA[		{	// cut ties with parent]]></Line>
      <Line Number="173"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 2]]></Line>
      <Line Number="174"><![CDATA[		if (_Myproxy != 0)]]></Line>
      <Line Number="175"><![CDATA[			{	// adopted, remove self from list]]></Line>
      <Line Number="176"><![CDATA[			_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;]]></Line>
      <Line Number="177"><![CDATA[			while (*_Pnext != 0 && *_Pnext != this)]]></Line>
      <Line Number="178"><![CDATA[				_Pnext = &(*_Pnext)->_Mynextiter;]]></Line>
      <Line Number="179"><![CDATA[]]></Line>
      <Line Number="180"><![CDATA[			if (*_Pnext == 0)]]></Line>
      <Line Number="181"><![CDATA[				_DEBUG_ERROR("ITERATOR LIST CORRUPTED!");]]></Line>
      <Line Number="182"><![CDATA[			*_Pnext = _Mynextiter;]]></Line>
      <Line Number="183"><![CDATA[			_Myproxy = 0;]]></Line>
      <Line Number="184"><![CDATA[			}]]></Line>
      <Line Number="185"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL == 2 */]]></Line>
      <Line Number="186"><![CDATA[		}]]></Line>
      <Line Number="187"><![CDATA[]]></Line>
      <Line Number="188"><![CDATA[	_Container_proxy *_Myproxy;]]></Line>
      <Line Number="189"><![CDATA[	_Iterator_base12 *_Mynextiter;]]></Line>
      <Line Number="190"><![CDATA[	};]]></Line>
      <Line Number="191"><![CDATA[]]></Line>
      <Line Number="192"><![CDATA[		// MEMBER FUNCTIONS FOR _Container_base12]]></Line>
      <Line Number="193"><![CDATA[inline void _Container_base12::_Orphan_all()]]></Line>
      <Line Number="194"><![CDATA[	{	// orphan all iterators]]></Line>
      <Line Number="195"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 2]]></Line>
      <Line Number="196"><![CDATA[	if (_Myproxy != 0)]]></Line>
      <Line Number="197"><![CDATA[		{	// proxy allocated, drain it]]></Line>
      <Line Number="198"><![CDATA[		_Lockit _Lock(_LOCK_DEBUG);]]></Line>
      <Line Number="199"><![CDATA[]]></Line>
      <Line Number="200"><![CDATA[		for (_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;]]></Line>
      <Line Number="201"><![CDATA[			*_Pnext != 0; *_Pnext = (*_Pnext)->_Mynextiter)]]></Line>
      <Line Number="202"><![CDATA[			(*_Pnext)->_Myproxy = 0;]]></Line>
      <Line Number="203"><![CDATA[		_Myproxy->_Myfirstiter = 0;]]></Line>
      <Line Number="204"><![CDATA[		}]]></Line>
      <Line Number="205"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL == 2 */]]></Line>
      <Line Number="206"><![CDATA[	}]]></Line>
      <Line Number="207"><![CDATA[]]></Line>
      <Line Number="208"><![CDATA[inline void _Container_base12::_Swap_all(_Container_base12& _Right)]]></Line>
      <Line Number="209"><![CDATA[	{	// swap all iterators]]></Line>
      <Line Number="210"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 2]]></Line>
      <Line Number="211"><![CDATA[	_Lockit _Lock(_LOCK_DEBUG);]]></Line>
      <Line Number="212"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL == 2 */]]></Line>
      <Line Number="213"><![CDATA[]]></Line>
      <Line Number="214"><![CDATA[	_Container_proxy *_Temp = _Myproxy;]]></Line>
      <Line Number="215"><![CDATA[	_Myproxy = _Right._Myproxy;]]></Line>
      <Line Number="216"><![CDATA[	_Right._Myproxy = _Temp;]]></Line>
      <Line Number="217"><![CDATA[]]></Line>
      <Line Number="218"><![CDATA[	if (_Myproxy != 0)]]></Line>
      <Line Number="219"><![CDATA[		_Myproxy->_Mycont = (_Container_base12 *)this;]]></Line>
      <Line Number="220"><![CDATA[	if (_Right._Myproxy != 0)]]></Line>
      <Line Number="221"><![CDATA[		_Right._Myproxy->_Mycont = (_Container_base12 *)&_Right;]]></Line>
      <Line Number="222"><![CDATA[	}]]></Line>
      <Line Number="223"><![CDATA[]]></Line>
      <Line Number="224"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 0]]></Line>
      <Line Number="225"><![CDATA[typedef _Container_base0 _Container_base;]]></Line>
      <Line Number="226"><![CDATA[typedef _Iterator_base0 _Iterator_base;]]></Line>
      <Line Number="227"><![CDATA[ #else /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="228"><![CDATA[typedef _Container_base12 _Container_base;]]></Line>
      <Line Number="229"><![CDATA[typedef _Iterator_base12 _Iterator_base;]]></Line>
      <Line Number="230"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="231"><![CDATA[]]></Line>
      <Line Number="232"><![CDATA[		// TEMPLATE FUNCTION _Has_unchecked_type AND FRIENDS]]></Line>
      <Line Number="233"><![CDATA[]]></Line>
      <Line Number="234"><![CDATA[ #define _UNCHECKED_TYPE(_Iter) \]]></Line>
      <Line Number="235"><![CDATA[	typename _Get_unchecked_type<_Iter>::type]]></Line>
      <Line Number="236"><![CDATA[]]></Line>
      <Line Number="237"><![CDATA[_STD tr1::_No _Has_unchecked_type(...);]]></Line>
      <Line Number="238"><![CDATA[]]></Line>
      <Line Number="239"><![CDATA[template<class _Ty>]]></Line>
      <Line Number="240"><![CDATA[	_STD tr1::_Yes _Has_unchecked_type(_Ty *,]]></Line>
      <Line Number="241"><![CDATA[		typename _Ty::_Unchecked_type * = 0);]]></Line>
      <Line Number="242"><![CDATA[]]></Line>
      <Line Number="243"><![CDATA[template<class _Iter,]]></Line>
      <Line Number="244"><![CDATA[	bool>]]></Line>
      <Line Number="245"><![CDATA[	struct _Unchecked_helper]]></Line>
      <Line Number="246"><![CDATA[	{	// _Iter doesn't define _Unchecked_type]]></Line>
      <Line Number="247"><![CDATA[	typedef _Iter type;]]></Line>
      <Line Number="248"><![CDATA[	};]]></Line>
      <Line Number="249"><![CDATA[]]></Line>
      <Line Number="250"><![CDATA[template<class _Iter>]]></Line>
      <Line Number="251"><![CDATA[	struct _Unchecked_helper<_Iter, true>]]></Line>
      <Line Number="252"><![CDATA[	{	// _Iter defines _Unchecked_type]]></Line>
      <Line Number="253"><![CDATA[	typedef typename _Iter::_Unchecked_type type;]]></Line>
      <Line Number="254"><![CDATA[	};]]></Line>
      <Line Number="255"><![CDATA[]]></Line>
      <Line Number="256"><![CDATA[template<class _Iter>]]></Line>
      <Line Number="257"><![CDATA[	struct _Get_unchecked_type]]></Line>
      <Line Number="258"><![CDATA[	{	// wraps unchecked type]]></Line>
      <Line Number="259"><![CDATA[	typedef typename _Unchecked_helper<_Iter,]]></Line>
      <Line Number="260"><![CDATA[		_IS_YES(_Has_unchecked_type((_Iter *)0))>::type type;]]></Line>
      <Line Number="261"><![CDATA[	};]]></Line>
      <Line Number="262"><![CDATA[]]></Line>
      <Line Number="263"><![CDATA[		// TEMPLATE FUNCTION _Unchecked]]></Line>
      <Line Number="264"><![CDATA[template<class _Iter> inline]]></Line>
      <Line Number="265"><![CDATA[	_Iter _Unchecked(_Iter _Src)]]></Line>
      <Line Number="266"><![CDATA[	{	// construct unchecked from checked, generic]]></Line>
      <Line Number="267"><![CDATA[	return (_Src);]]></Line>
      <Line Number="268"><![CDATA[	}]]></Line>
      <Line Number="269"><![CDATA[]]></Line>
      <Line Number="270"><![CDATA[		// TEMPLATE FUNCTION _Rechecked]]></Line>
      <Line Number="271"><![CDATA[template<class _Iter,]]></Line>
      <Line Number="272"><![CDATA[	class _UIter> inline]]></Line>
      <Line Number="273"><![CDATA[	_Iter& _Rechecked(_Iter& _Dest, _UIter _Src)]]></Line>
      <Line Number="274"><![CDATA[	{	// reset checked from unchecked, generic]]></Line>
      <Line Number="275"><![CDATA[	_Dest = _Src;]]></Line>
      <Line Number="276"><![CDATA[	return (_Dest);]]></Line>
      <Line Number="277"><![CDATA[	}]]></Line>
      <Line Number="278"><![CDATA[]]></Line>
      <Line Number="279"><![CDATA[		// TEMPLATE STRUCT _Is_checked_helper]]></Line>
      <Line Number="280"><![CDATA[template<class _Iter>]]></Line>
      <Line Number="281"><![CDATA[	struct _Is_checked_helper]]></Line>
      <Line Number="282"><![CDATA[	: public _STD tr1::integral_constant<bool, _IS_YES(_Has_unchecked_type((_Iter *)0))>]]></Line>
      <Line Number="283"><![CDATA[	{	// determine whether _Iter is checked]]></Line>
      <Line Number="284"><![CDATA[	};]]></Line>
      <Line Number="285"><![CDATA[]]></Line>
      <Line Number="286"><![CDATA[		// TEMPLATE FUNCTION _Is_checked]]></Line>
      <Line Number="287"><![CDATA[template<class _Iter> inline]]></Line>
      <Line Number="288"><![CDATA[	_Is_checked_helper<_Iter> _Is_checked(_Iter)]]></Line>
      <Line Number="289"><![CDATA[	{	// return type is derived from true_type if iterator is checked]]></Line>
      <Line Number="290"><![CDATA[	return (_Is_checked_helper<_Iter>());]]></Line>
      <Line Number="291"><![CDATA[	}]]></Line>
      <Line Number="292"><![CDATA[]]></Line>
      <Line Number="293"><![CDATA[		//	ITERATOR STUFF (from <iterator>)]]></Line>
      <Line Number="294"><![CDATA[		// ITERATOR TAGS]]></Line>
      <Line Number="295"><![CDATA[struct input_iterator_tag]]></Line>
      <Line Number="296"><![CDATA[	{	// identifying tag for input iterators]]></Line>
      <Line Number="297"><![CDATA[	};]]></Line>
      <Line Number="298"><![CDATA[]]></Line>
      <Line Number="299"><![CDATA[struct output_iterator_tag]]></Line>
      <Line Number="300"><![CDATA[	{	// identifying tag for output iterators]]></Line>
      <Line Number="301"><![CDATA[	};]]></Line>
      <Line Number="302"><![CDATA[]]></Line>
      <Line Number="303"><![CDATA[struct forward_iterator_tag]]></Line>
      <Line Number="304"><![CDATA[	: public input_iterator_tag, output_iterator_tag]]></Line>
      <Line Number="305"><![CDATA[	{	// identifying tag for forward iterators]]></Line>
      <Line Number="306"><![CDATA[	};]]></Line>
      <Line Number="307"><![CDATA[]]></Line>
      <Line Number="308"><![CDATA[struct bidirectional_iterator_tag]]></Line>
      <Line Number="309"><![CDATA[	: public forward_iterator_tag]]></Line>
      <Line Number="310"><![CDATA[	{	// identifying tag for bidirectional iterators]]></Line>
      <Line Number="311"><![CDATA[	};]]></Line>
      <Line Number="312"><![CDATA[]]></Line>
      <Line Number="313"><![CDATA[struct random_access_iterator_tag]]></Line>
      <Line Number="314"><![CDATA[	: public bidirectional_iterator_tag]]></Line>
      <Line Number="315"><![CDATA[	{	// identifying tag for random-access iterators]]></Line>
      <Line Number="316"><![CDATA[	};]]></Line>
      <Line Number="317"><![CDATA[]]></Line>
      <Line Number="318"><![CDATA[struct _Int_iterator_tag]]></Line>
      <Line Number="319"><![CDATA[	{	// identifying tag for integer types, not an iterator]]></Line>
      <Line Number="320"><![CDATA[	};]]></Line>
      <Line Number="321"><![CDATA[]]></Line>
      <Line Number="322"><![CDATA[		// POINTER ITERATOR TAGS]]></Line>
      <Line Number="323"><![CDATA[struct _Nonscalar_ptr_iterator_tag]]></Line>
      <Line Number="324"><![CDATA[	{	// pointer to unknown type]]></Line>
      <Line Number="325"><![CDATA[	};]]></Line>
      <Line Number="326"><![CDATA[struct _Scalar_ptr_iterator_tag]]></Line>
      <Line Number="327"><![CDATA[	{	// pointer to scalar type]]></Line>
      <Line Number="328"><![CDATA[	};]]></Line>
      <Line Number="329"><![CDATA[]]></Line>
      <Line Number="330"><![CDATA[		// TEMPLATE CLASS iterator]]></Line>
      <Line Number="331"><![CDATA[template<class _Category,]]></Line>
      <Line Number="332"><![CDATA[	class _Ty,]]></Line>
      <Line Number="333"><![CDATA[	class _Diff = ptrdiff_t,]]></Line>
      <Line Number="334"><![CDATA[	class _Pointer = _Ty *,]]></Line>
      <Line Number="335"><![CDATA[	class _Reference = _Ty&>]]></Line>
      <Line Number="336"><![CDATA[	struct iterator]]></Line>
      <Line Number="337"><![CDATA[	{	// base type for all iterator classes]]></Line>
      <Line Number="338"><![CDATA[	typedef _Category iterator_category;]]></Line>
      <Line Number="339"><![CDATA[	typedef _Ty value_type;]]></Line>
      <Line Number="340"><![CDATA[	typedef _Diff difference_type;]]></Line>
      <Line Number="341"><![CDATA[	typedef _Diff distance_type;	// retained]]></Line>
      <Line Number="342"><![CDATA[	typedef _Pointer pointer;]]></Line>
      <Line Number="343"><![CDATA[	typedef _Reference reference;]]></Line>
      <Line Number="344"><![CDATA[	};]]></Line>
      <Line Number="345"><![CDATA[]]></Line>
      <Line Number="346"><![CDATA[template<class _Category,]]></Line>
      <Line Number="347"><![CDATA[	class _Ty,]]></Line>
      <Line Number="348"><![CDATA[	class _Diff,]]></Line>
      <Line Number="349"><![CDATA[	class _Pointer,]]></Line>
      <Line Number="350"><![CDATA[	class _Reference,]]></Line>
      <Line Number="351"><![CDATA[	class _Base>]]></Line>
      <Line Number="352"><![CDATA[	struct _Iterator012]]></Line>
      <Line Number="353"><![CDATA[		: public _Base]]></Line>
      <Line Number="354"><![CDATA[	{]]></Line>
      <Line Number="355"><![CDATA[	typedef _Category iterator_category;]]></Line>
      <Line Number="356"><![CDATA[	typedef _Ty value_type;]]></Line>
      <Line Number="357"><![CDATA[	typedef _Diff difference_type;]]></Line>
      <Line Number="358"><![CDATA[	typedef _Diff distance_type;	// retained]]></Line>
      <Line Number="359"><![CDATA[	typedef _Pointer pointer;]]></Line>
      <Line Number="360"><![CDATA[	typedef _Reference reference;]]></Line>
      <Line Number="361"><![CDATA[	};]]></Line>
      <Line Number="362"><![CDATA[]]></Line>
      <Line Number="363"><![CDATA[struct _Outit]]></Line>
      <Line Number="364"><![CDATA[	: public iterator<output_iterator_tag, void, void,]]></Line>
      <Line Number="365"><![CDATA[		void, void>]]></Line>
      <Line Number="366"><![CDATA[	{	// base for output iterators]]></Line>
      <Line Number="367"><![CDATA[	};]]></Line>
      <Line Number="368"><![CDATA[]]></Line>
      <Line Number="369"><![CDATA[		// TEMPLATE CLASS iterator_traits]]></Line>
      <Line Number="370"><![CDATA[template<class _Iter>]]></Line>
      <Line Number="371"><![CDATA[	struct iterator_traits]]></Line>
      <Line Number="372"><![CDATA[	{	// get traits from iterator _Iter]]></Line>
      <Line Number="373"><![CDATA[	typedef typename _Iter::iterator_category iterator_category;]]></Line>
      <Line Number="374"><![CDATA[	typedef typename _Iter::value_type value_type;]]></Line>
      <Line Number="375"><![CDATA[	typedef typename _Iter::difference_type difference_type;]]></Line>
      <Line Number="376"><![CDATA[	typedef difference_type distance_type;	// retained]]></Line>
      <Line Number="377"><![CDATA[	typedef typename _Iter::pointer pointer;]]></Line>
      <Line Number="378"><![CDATA[	typedef typename _Iter::reference reference;]]></Line>
      <Line Number="379"><![CDATA[	};]]></Line>
      <Line Number="380"><![CDATA[]]></Line>
      <Line Number="381"><![CDATA[template<class _Ty>]]></Line>
      <Line Number="382"><![CDATA[	struct iterator_traits<_Ty *>]]></Line>
      <Line Number="383"><![CDATA[	{	// get traits from pointer]]></Line>
      <Line Number="384"><![CDATA[	typedef random_access_iterator_tag iterator_category;]]></Line>
      <Line Number="385"><![CDATA[	typedef _Ty value_type;]]></Line>
      <Line Number="386"><![CDATA[	typedef ptrdiff_t difference_type;]]></Line>
      <Line Number="387"><![CDATA[	typedef ptrdiff_t distance_type;	// retained]]></Line>
      <Line Number="388"><![CDATA[	typedef _Ty *pointer;]]></Line>
      <Line Number="389"><![CDATA[	typedef _Ty& reference;]]></Line>
      <Line Number="390"><![CDATA[	};]]></Line>
      <Line Number="391"><![CDATA[]]></Line>
      <Line Number="392"><![CDATA[template<class _Ty>]]></Line>
      <Line Number="393"><![CDATA[	struct iterator_traits<const _Ty *>]]></Line>
      <Line Number="394"><![CDATA[	{	// get traits from const pointer]]></Line>
      <Line Number="395"><![CDATA[	typedef random_access_iterator_tag iterator_category;]]></Line>
      <Line Number="396"><![CDATA[	typedef _Ty value_type;]]></Line>
      <Line Number="397"><![CDATA[	typedef ptrdiff_t difference_type;]]></Line>
      <Line Number="398"><![CDATA[	typedef ptrdiff_t distance_type;	// retained]]></Line>
      <Line Number="399"><![CDATA[	typedef const _Ty *pointer;]]></Line>
      <Line Number="400"><![CDATA[	typedef const _Ty& reference;]]></Line>
      <Line Number="401"><![CDATA[	};]]></Line>
      <Line Number="402"><![CDATA[]]></Line>
      <Line Number="403"><![CDATA[template<> struct iterator_traits<_Bool>]]></Line>
      <Line Number="404"><![CDATA[	{	// get traits from integer type]]></Line>
      <Line Number="405"><![CDATA[	typedef _Int_iterator_tag iterator_category;]]></Line>
      <Line Number="406"><![CDATA[	};]]></Line>
      <Line Number="407"><![CDATA[]]></Line>
      <Line Number="408"><![CDATA[template<> struct iterator_traits<char>]]></Line>
      <Line Number="409"><![CDATA[	{	// get traits from integer type]]></Line>
      <Line Number="410"><![CDATA[	typedef _Int_iterator_tag iterator_category;]]></Line>
      <Line Number="411"><![CDATA[	};]]></Line>
      <Line Number="412"><![CDATA[]]></Line>
      <Line Number="413"><![CDATA[template<> struct iterator_traits<signed char>]]></Line>
      <Line Number="414"><![CDATA[	{	// get traits from integer type]]></Line>
      <Line Number="415"><![CDATA[	typedef _Int_iterator_tag iterator_category;]]></Line>
      <Line Number="416"><![CDATA[	};]]></Line>
      <Line Number="417"><![CDATA[]]></Line>
      <Line Number="418"><![CDATA[template<> struct iterator_traits<unsigned char>]]></Line>
      <Line Number="419"><![CDATA[	{	// get traits from integer type]]></Line>
      <Line Number="420"><![CDATA[	typedef _Int_iterator_tag iterator_category;]]></Line>
      <Line Number="421"><![CDATA[	};]]></Line>
      <Line Number="422"><![CDATA[]]></Line>
      <Line Number="423"><![CDATA[ #ifdef _NATIVE_WCHAR_T_DEFINED]]></Line>
      <Line Number="424"><![CDATA[template<> struct iterator_traits<wchar_t>]]></Line>
      <Line Number="425"><![CDATA[	{	// get traits from integer type]]></Line>
      <Line Number="426"><![CDATA[	typedef _Int_iterator_tag iterator_category;]]></Line>
      <Line Number="427"><![CDATA[	};]]></Line>
      <Line Number="428"><![CDATA[ #endif /* _NATIVE_WCHAR_T_DEFINED */]]></Line>
      <Line Number="429"><![CDATA[]]></Line>
      <Line Number="430"><![CDATA[template<> struct iterator_traits<short>]]></Line>
      <Line Number="431"><![CDATA[	{	// get traits from integer type]]></Line>
      <Line Number="432"><![CDATA[	typedef _Int_iterator_tag iterator_category;]]></Line>
      <Line Number="433"><![CDATA[	};]]></Line>
      <Line Number="434"><![CDATA[]]></Line>
      <Line Number="435"><![CDATA[template<> struct iterator_traits<unsigned short>]]></Line>
      <Line Number="436"><![CDATA[	{	// get traits from integer type]]></Line>
      <Line Number="437"><![CDATA[	typedef _Int_iterator_tag iterator_category;]]></Line>
      <Line Number="438"><![CDATA[	};]]></Line>
      <Line Number="439"><![CDATA[]]></Line>
      <Line Number="440"><![CDATA[template<> struct iterator_traits<int>]]></Line>
      <Line Number="441"><![CDATA[	{	// get traits from integer type]]></Line>
      <Line Number="442"><![CDATA[	typedef _Int_iterator_tag iterator_category;]]></Line>
      <Line Number="443"><![CDATA[	};]]></Line>
      <Line Number="444"><![CDATA[]]></Line>
      <Line Number="445"><![CDATA[template<> struct iterator_traits<unsigned int>]]></Line>
      <Line Number="446"><![CDATA[	{	// get traits from integer type]]></Line>
      <Line Number="447"><![CDATA[	typedef _Int_iterator_tag iterator_category;]]></Line>
      <Line Number="448"><![CDATA[	};]]></Line>
      <Line Number="449"><![CDATA[]]></Line>
      <Line Number="450"><![CDATA[template<> struct iterator_traits<long>]]></Line>
      <Line Number="451"><![CDATA[	{	// get traits from integer type]]></Line>
      <Line Number="452"><![CDATA[	typedef _Int_iterator_tag iterator_category;]]></Line>
      <Line Number="453"><![CDATA[	};]]></Line>
      <Line Number="454"><![CDATA[]]></Line>
      <Line Number="455"><![CDATA[template<> struct iterator_traits<unsigned long>]]></Line>
      <Line Number="456"><![CDATA[	{	// get traits from integer type]]></Line>
      <Line Number="457"><![CDATA[	typedef _Int_iterator_tag iterator_category;]]></Line>
      <Line Number="458"><![CDATA[	};]]></Line>
      <Line Number="459"><![CDATA[]]></Line>
      <Line Number="460"><![CDATA[ #ifdef _LONGLONG]]></Line>
      <Line Number="461"><![CDATA[template<> struct iterator_traits<_LONGLONG>]]></Line>
      <Line Number="462"><![CDATA[	{	// get traits from integer type]]></Line>
      <Line Number="463"><![CDATA[	typedef _Int_iterator_tag iterator_category;]]></Line>
      <Line Number="464"><![CDATA[	};]]></Line>
      <Line Number="465"><![CDATA[]]></Line>
      <Line Number="466"><![CDATA[template<> struct iterator_traits<_ULONGLONG>]]></Line>
      <Line Number="467"><![CDATA[	{	// get traits from integer type]]></Line>
      <Line Number="468"><![CDATA[	typedef _Int_iterator_tag iterator_category;]]></Line>
      <Line Number="469"><![CDATA[	};]]></Line>
      <Line Number="470"><![CDATA[ #endif /* _LONGLONG */]]></Line>
      <Line Number="471"><![CDATA[]]></Line>
      <Line Number="472"><![CDATA[		// TEMPLATE FUNCTION _Iter_cat]]></Line>
      <Line Number="473"><![CDATA[template<class _Iter> inline]]></Line>
      <Line Number="474"><![CDATA[	typename iterator_traits<_Iter>::iterator_category]]></Line>
      <Line Number="475"><![CDATA[		_Iter_cat(const _Iter&)]]></Line>
      <Line Number="476"><![CDATA[	{	// return category from iterator argument]]></Line>
      <Line Number="477"><![CDATA[	typename iterator_traits<_Iter>::iterator_category _Cat;]]></Line>
      <Line Number="478"><![CDATA[	return (_Cat);]]></Line>
      <Line Number="479"><![CDATA[	}]]></Line>
      <Line Number="480"><![CDATA[]]></Line>
      <Line Number="481"><![CDATA[		// TEMPLATE FUNCTION _Ptr_cat]]></Line>
      <Line Number="482"><![CDATA[template<class _Iter1,]]></Line>
      <Line Number="483"><![CDATA[	class _Iter2> inline]]></Line>
      <Line Number="484"><![CDATA[	_Nonscalar_ptr_iterator_tag _Ptr_cat(_Iter1&, _Iter2&)]]></Line>
      <Line Number="485"><![CDATA[	{	// return pointer category from arbitrary arguments]]></Line>
      <Line Number="486"><![CDATA[	_Nonscalar_ptr_iterator_tag _Cat;]]></Line>
      <Line Number="487"><![CDATA[	return (_Cat);]]></Line>
      <Line Number="488"><![CDATA[	}]]></Line>
      <Line Number="489"><![CDATA[]]></Line>
      <Line Number="490"><![CDATA[template<class _Elem1,]]></Line>
      <Line Number="491"><![CDATA[	class _Elem2>]]></Line>
      <Line Number="492"><![CDATA[	struct _Ptr_cat_helper]]></Line>
      <Line Number="493"><![CDATA[	{	// determines pointer category, nonscalar by default]]></Line>
      <Line Number="494"><![CDATA[	typedef _Nonscalar_ptr_iterator_tag _Type;]]></Line>
      <Line Number="495"><![CDATA[	};]]></Line>
      <Line Number="496"><![CDATA[]]></Line>
      <Line Number="497"><![CDATA[template<class _Elem>]]></Line>
      <Line Number="498"><![CDATA[	struct _Ptr_cat_helper<_Elem, _Elem>]]></Line>
      <Line Number="499"><![CDATA[	{	// determines pointer category, common type]]></Line>
      <Line Number="500"><![CDATA[	typedef typename _STD tr1::conditional<]]></Line>
      <Line Number="501"><![CDATA[		_STD tr1::is_scalar<_Elem>::value,]]></Line>
      <Line Number="502"><![CDATA[			_Scalar_ptr_iterator_tag,]]></Line>
      <Line Number="503"><![CDATA[			_Nonscalar_ptr_iterator_tag>::type _Type;]]></Line>
      <Line Number="504"><![CDATA[	};]]></Line>
      <Line Number="505"><![CDATA[]]></Line>
      <Line Number="506"><![CDATA[template<class _Anything>]]></Line>
      <Line Number="507"><![CDATA[	struct _Ptr_cat_helper<_Anything *, const _Anything *>]]></Line>
      <Line Number="508"><![CDATA[	{	// determines pointer category]]></Line>
      <Line Number="509"><![CDATA[	typedef _Scalar_ptr_iterator_tag _Type;]]></Line>
      <Line Number="510"><![CDATA[	};]]></Line>
      <Line Number="511"><![CDATA[]]></Line>
      <Line Number="512"><![CDATA[template<class _Elem1,]]></Line>
      <Line Number="513"><![CDATA[	class _Elem2> inline]]></Line>
      <Line Number="514"><![CDATA[	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type]]></Line>
      <Line Number="515"><![CDATA[		_Ptr_cat(_Elem1 *, _Elem2 *)]]></Line>
      <Line Number="516"><![CDATA[	{	// return pointer category from pointers]]></Line>
      <Line Number="517"><![CDATA[	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;]]></Line>
      <Line Number="518"><![CDATA[	return (_Cat);]]></Line>
      <Line Number="519"><![CDATA[	}]]></Line>
      <Line Number="520"><![CDATA[]]></Line>
      <Line Number="521"><![CDATA[template<class _Elem1,]]></Line>
      <Line Number="522"><![CDATA[	class _Elem2> inline]]></Line>
      <Line Number="523"><![CDATA[	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type]]></Line>
      <Line Number="524"><![CDATA[		_Ptr_cat(const _Elem1 *, _Elem2 *)]]></Line>
      <Line Number="525"><![CDATA[	{	// return pointer category from pointers]]></Line>
      <Line Number="526"><![CDATA[	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;]]></Line>
      <Line Number="527"><![CDATA[	return (_Cat);]]></Line>
      <Line Number="528"><![CDATA[	}]]></Line>
      <Line Number="529"><![CDATA[]]></Line>
      <Line Number="530"><![CDATA[		// DEBUG TESTING MACROS]]></Line>
      <Line Number="531"><![CDATA[]]></Line>
      <Line Number="532"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL < 2]]></Line>
      <Line Number="533"><![CDATA[  #define _DEBUG_LT(x, y)	((x) < (y))]]></Line>
      <Line Number="534"><![CDATA[  #define _DEBUG_LT_PRED(pred, x, y)	pred(x, y)]]></Line>
      <Line Number="535"><![CDATA[  #define _DEBUG_ORDER(first, last)]]></Line>
      <Line Number="536"><![CDATA[  #define _DEBUG_ORDER_PRED(first, last, pred)]]></Line>
      <Line Number="537"><![CDATA[  #define _DEBUG_POINTER(first)]]></Line>
      <Line Number="538"><![CDATA[  #define _DEBUG_POINTER2(first, file, line)]]></Line>
      <Line Number="539"><![CDATA[  #define _DEBUG_RANGE(first, last)]]></Line>
      <Line Number="540"><![CDATA[  #define _DEBUG_RANGE2(first, last, file, line)]]></Line>
      <Line Number="541"><![CDATA[]]></Line>
      <Line Number="542"><![CDATA[ #else /* _ITERATOR_DEBUG_LEVEL < 2 */]]></Line>
      <Line Number="543"><![CDATA[]]></Line>
      <Line Number="544"><![CDATA[  #define _FILENAME	__FILEW__]]></Line>
      <Line Number="545"><![CDATA[]]></Line>
      <Line Number="546"><![CDATA[  #ifndef _DEBUG_LT_IMPL]]></Line>
      <Line Number="547"><![CDATA[   #define _DEBUG_LT_IMPL	_Debug_lt]]></Line>
      <Line Number="548"><![CDATA[  #endif /* _DEBUG_LT_IMPL */]]></Line>
      <Line Number="549"><![CDATA[]]></Line>
      <Line Number="550"><![CDATA[  #define _DEBUG_LT(x, y) \]]></Line>
      <Line Number="551"><![CDATA[	_DEBUG_LT_IMPL(x, y, _FILENAME, __LINE__)]]></Line>
      <Line Number="552"><![CDATA[]]></Line>
      <Line Number="553"><![CDATA[  #ifndef _DEBUG_LT_PRED_IMPL]]></Line>
      <Line Number="554"><![CDATA[   #define _DEBUG_LT_PRED_IMPL	_Debug_lt_pred]]></Line>
      <Line Number="555"><![CDATA[  #endif /* _DEBUG_LT_PRED_IMPL */]]></Line>
      <Line Number="556"><![CDATA[]]></Line>
      <Line Number="557"><![CDATA[  #define _DEBUG_LT_PRED(pred, x, y)	\]]></Line>
      <Line Number="558"><![CDATA[	_DEBUG_LT_PRED_IMPL(pred, x, y, _FILENAME, __LINE__)]]></Line>
      <Line Number="559"><![CDATA[]]></Line>
      <Line Number="560"><![CDATA[  #ifndef _DEBUG_ORDER_IMPL]]></Line>
      <Line Number="561"><![CDATA[   #define _DEBUG_ORDER_IMPL	_Debug_order]]></Line>
      <Line Number="562"><![CDATA[  #endif /* _DEBUG_ORDER_IMPL */]]></Line>
      <Line Number="563"><![CDATA[]]></Line>
      <Line Number="564"><![CDATA[  #define _DEBUG_ORDER(first, last)	\]]></Line>
      <Line Number="565"><![CDATA[	_DEBUG_ORDER_IMPL(first, last, _FILENAME, __LINE__)]]></Line>
      <Line Number="566"><![CDATA[  #define _DEBUG_ORDER_PRED(first, last, pred)	\]]></Line>
      <Line Number="567"><![CDATA[	_DEBUG_ORDER_IMPL(first, last, pred, _FILENAME, __LINE__)]]></Line>
      <Line Number="568"><![CDATA[]]></Line>
      <Line Number="569"><![CDATA[  #ifndef _DEBUG_POINTER_IMPL]]></Line>
      <Line Number="570"><![CDATA[   #define _DEBUG_POINTER_IMPL	_Debug_pointer]]></Line>
      <Line Number="571"><![CDATA[  #endif /* _DEBUG_POINTER_IMPL */]]></Line>
      <Line Number="572"><![CDATA[]]></Line>
      <Line Number="573"><![CDATA[  #define _DEBUG_POINTER(first)	\]]></Line>
      <Line Number="574"><![CDATA[	_DEBUG_POINTER_IMPL(first, _FILENAME, __LINE__)]]></Line>
      <Line Number="575"><![CDATA[  #define _DEBUG_POINTER2(first, file, line)	\]]></Line>
      <Line Number="576"><![CDATA[	_DEBUG_POINTER_IMPL(first, file, line)]]></Line>
      <Line Number="577"><![CDATA[]]></Line>
      <Line Number="578"><![CDATA[  #ifndef _DEBUG_RANGE_IMPL]]></Line>
      <Line Number="579"><![CDATA[   #define _DEBUG_RANGE_IMPL	_Debug_range]]></Line>
      <Line Number="580"><![CDATA[  #endif /* _DEBUG_RANGE_IMPL */]]></Line>
      <Line Number="581"><![CDATA[]]></Line>
      <Line Number="582"><![CDATA[  #define _DEBUG_RANGE(first, last)	\]]></Line>
      <Line Number="583"><![CDATA[	_DEBUG_RANGE_IMPL(first, last, _FILENAME, __LINE__)]]></Line>
      <Line Number="584"><![CDATA[  #define _DEBUG_RANGE2(first, last, file, line)	\]]></Line>
      <Line Number="585"><![CDATA[	_DEBUG_RANGE_IMPL(first, last, file, line)]]></Line>
      <Line Number="586"><![CDATA[]]></Line>
      <Line Number="587"><![CDATA[		// TEMPLATE FUNCTION _Debug_lt]]></Line>
      <Line Number="588"><![CDATA[template<class _Ty1, class _Ty2> inline]]></Line>
      <Line Number="589"><![CDATA[	bool _Debug_lt(const _Ty1& _Left, const _Ty2& _Right,]]></Line>
      <Line Number="590"><![CDATA[		_Dbfile_t _File, _Dbline_t _Line)]]></Line>
      <Line Number="591"><![CDATA[	{	// test if _Left < _Right and operator< is strict weak ordering]]></Line>
      <Line Number="592"><![CDATA[	if (!(_Left < _Right))]]></Line>
      <Line Number="593"><![CDATA[		return (false);]]></Line>
      <Line Number="594"><![CDATA[	else if (_Right < _Left)]]></Line>
      <Line Number="595"><![CDATA[		_DEBUG_ERROR2("invalid operator<", _File, _Line);]]></Line>
      <Line Number="596"><![CDATA[	return (true);]]></Line>
      <Line Number="597"><![CDATA[	}]]></Line>
      <Line Number="598"><![CDATA[]]></Line>
      <Line Number="599"><![CDATA[template<class _Ty1, class _Ty2> inline]]></Line>
      <Line Number="600"><![CDATA[	bool _Debug_lt(const _Ty1& _Left, _Ty2& _Right,]]></Line>
      <Line Number="601"><![CDATA[		_Dbfile_t _File, _Dbline_t _Line)]]></Line>
      <Line Number="602"><![CDATA[	{	// test if _Left < _Right and operator< is strict weak ordering]]></Line>
      <Line Number="603"><![CDATA[	if (!(_Left < _Right))]]></Line>
      <Line Number="604"><![CDATA[		return (false);]]></Line>
      <Line Number="605"><![CDATA[	else if (_Right < _Left)]]></Line>
      <Line Number="606"><![CDATA[		_DEBUG_ERROR2("invalid operator<", _File, _Line);]]></Line>
      <Line Number="607"><![CDATA[	return (true);]]></Line>
      <Line Number="608"><![CDATA[	}]]></Line>
      <Line Number="609"><![CDATA[]]></Line>
      <Line Number="610"><![CDATA[template<class _Ty1, class _Ty2> inline]]></Line>
      <Line Number="611"><![CDATA[	bool _Debug_lt(_Ty1& _Left, const _Ty2& _Right,]]></Line>
      <Line Number="612"><![CDATA[		_Dbfile_t _File, _Dbline_t _Line)]]></Line>
      <Line Number="613"><![CDATA[	{	// test if _Left < _Right and operator< is strict weak ordering]]></Line>
      <Line Number="614"><![CDATA[	if (!(_Left < _Right))]]></Line>
      <Line Number="615"><![CDATA[		return (false);]]></Line>
      <Line Number="616"><![CDATA[	else if (_Right < _Left)]]></Line>
      <Line Number="617"><![CDATA[		_DEBUG_ERROR2("invalid operator<", _File, _Line);]]></Line>
      <Line Number="618"><![CDATA[	return (true);]]></Line>
      <Line Number="619"><![CDATA[	}]]></Line>
      <Line Number="620"><![CDATA[]]></Line>
      <Line Number="621"><![CDATA[template<class _Ty1, class _Ty2> inline]]></Line>
      <Line Number="622"><![CDATA[	bool _Debug_lt(_Ty1& _Left, _Ty2& _Right,]]></Line>
      <Line Number="623"><![CDATA[		_Dbfile_t _File, _Dbline_t _Line)]]></Line>
      <Line Number="624"><![CDATA[	{	// test if _Left < _Right and operator< is strict weak ordering]]></Line>
      <Line Number="625"><![CDATA[	if (!(_Left < _Right))]]></Line>
      <Line Number="626"><![CDATA[		return (false);]]></Line>
      <Line Number="627"><![CDATA[	else if (_Right < _Left)]]></Line>
      <Line Number="628"><![CDATA[		_DEBUG_ERROR2("invalid operator<", _File, _Line);]]></Line>
      <Line Number="629"><![CDATA[	return (true);]]></Line>
      <Line Number="630"><![CDATA[	}]]></Line>
      <Line Number="631"><![CDATA[]]></Line>
      <Line Number="632"><![CDATA[		// TEMPLATE FUNCTION _Debug_lt_pred]]></Line>
      <Line Number="633"><![CDATA[template<class _Pr, class _Ty1, class _Ty2> inline]]></Line>
      <Line Number="634"><![CDATA[	bool _Debug_lt_pred(_Pr _Pred,]]></Line>
      <Line Number="635"><![CDATA[		const _Ty1& _Left, const _Ty2& _Right,]]></Line>
      <Line Number="636"><![CDATA[		_Dbfile_t _File, _Dbline_t _Line)]]></Line>
      <Line Number="637"><![CDATA[	{	// test if _Pred(_Left, _Right) and _Pred is strict weak ordering]]></Line>
      <Line Number="638"><![CDATA[	if (!_Pred(_Left, _Right))]]></Line>
      <Line Number="639"><![CDATA[		return (false);]]></Line>
      <Line Number="640"><![CDATA[	else if (_Pred(_Right, _Left))]]></Line>
      <Line Number="641"><![CDATA[		_DEBUG_ERROR2("invalid operator<", _File, _Line);]]></Line>
      <Line Number="642"><![CDATA[	return (true);]]></Line>
      <Line Number="643"><![CDATA[	}]]></Line>
      <Line Number="644"><![CDATA[]]></Line>
      <Line Number="645"><![CDATA[template<class _Pr, class _Ty1, class _Ty2> inline]]></Line>
      <Line Number="646"><![CDATA[	bool _Debug_lt_pred(_Pr _Pred,]]></Line>
      <Line Number="647"><![CDATA[		const _Ty1& _Left, _Ty2& _Right,]]></Line>
      <Line Number="648"><![CDATA[		_Dbfile_t _File, _Dbline_t _Line)]]></Line>
      <Line Number="649"><![CDATA[	{	// test if _Pred(_Left, _Right) and _Pred is strict weak ordering]]></Line>
      <Line Number="650"><![CDATA[	if (!_Pred(_Left, _Right))]]></Line>
      <Line Number="651"><![CDATA[		return (false);]]></Line>
      <Line Number="652"><![CDATA[	else if (_Pred(_Right, _Left))]]></Line>
      <Line Number="653"><![CDATA[		_DEBUG_ERROR2("invalid operator<", _File, _Line);]]></Line>
      <Line Number="654"><![CDATA[	return (true);]]></Line>
      <Line Number="655"><![CDATA[	}]]></Line>
      <Line Number="656"><![CDATA[]]></Line>
      <Line Number="657"><![CDATA[template<class _Pr, class _Ty1, class _Ty2> inline]]></Line>
      <Line Number="658"><![CDATA[	bool _Debug_lt_pred(_Pr _Pred,]]></Line>
      <Line Number="659"><![CDATA[		_Ty1& _Left, const _Ty2& _Right,]]></Line>
      <Line Number="660"><![CDATA[		_Dbfile_t _File, _Dbline_t _Line)]]></Line>
      <Line Number="661"><![CDATA[	{	// test if _Pred(_Left, _Right) and _Pred is strict weak ordering]]></Line>
      <Line Number="662"><![CDATA[	if (!_Pred(_Left, _Right))]]></Line>
      <Line Number="663"><![CDATA[		return (false);]]></Line>
      <Line Number="664"><![CDATA[	else if (_Pred(_Right, _Left))]]></Line>
      <Line Number="665"><![CDATA[		_DEBUG_ERROR2("invalid operator<", _File, _Line);]]></Line>
      <Line Number="666"><![CDATA[	return (true);]]></Line>
      <Line Number="667"><![CDATA[	}]]></Line>
      <Line Number="668"><![CDATA[]]></Line>
      <Line Number="669"><![CDATA[template<class _Pr, class _Ty1, class _Ty2> inline]]></Line>
      <Line Number="670"><![CDATA[	bool _Debug_lt_pred(_Pr _Pred,]]></Line>
      <Line Number="671"><![CDATA[		_Ty1& _Left, _Ty2& _Right,]]></Line>
      <Line Number="672"><![CDATA[		_Dbfile_t _File, _Dbline_t _Line)]]></Line>
      <Line Number="673"><![CDATA[	{	// test if _Pred(_Left, _Right) and _Pred is strict weak ordering]]></Line>
      <Line Number="674"><![CDATA[	if (!_Pred(_Left, _Right))]]></Line>
      <Line Number="675"><![CDATA[		return (false);]]></Line>
      <Line Number="676"><![CDATA[	else if (_Pred(_Right, _Left))]]></Line>
      <Line Number="677"><![CDATA[		_DEBUG_ERROR2("invalid operator<", _File, _Line);]]></Line>
      <Line Number="678"><![CDATA[	return (true);]]></Line>
      <Line Number="679"><![CDATA[	}]]></Line>
      <Line Number="680"><![CDATA[]]></Line>
      <Line Number="681"><![CDATA[		// TEMPLATE FUNCTION _Debug_pointer]]></Line>
      <Line Number="682"><![CDATA[template<class _InIt> inline]]></Line>
      <Line Number="683"><![CDATA[	void _Debug_pointer(_InIt&, _Dbfile_t, _Dbline_t)]]></Line>
      <Line Number="684"><![CDATA[	{	// test pointer for non-singularity, arbitrary type]]></Line>
      <Line Number="685"><![CDATA[	}]]></Line>
      <Line Number="686"><![CDATA[]]></Line>
      <Line Number="687"><![CDATA[template<class _Ty> inline]]></Line>
      <Line Number="688"><![CDATA[	void _Debug_pointer(const _Ty *_First, _Dbfile_t _File, _Dbline_t _Line)]]></Line>
      <Line Number="689"><![CDATA[	{	// test iterator for non-singularity, const pointers]]></Line>
      <Line Number="690"><![CDATA[	if (_First == 0)]]></Line>
      <Line Number="691"><![CDATA[		_DEBUG_ERROR2("invalid null pointer", _File, _Line);]]></Line>
      <Line Number="692"><![CDATA[	}]]></Line>
      <Line Number="693"><![CDATA[]]></Line>
      <Line Number="694"><![CDATA[template<class _Ty> inline]]></Line>
      <Line Number="695"><![CDATA[	void _Debug_pointer(_Ty *_First, _Dbfile_t _File, _Dbline_t _Line)]]></Line>
      <Line Number="696"><![CDATA[	{	// test iterator for non-singularity, pointers]]></Line>
      <Line Number="697"><![CDATA[	if (_First == 0)]]></Line>
      <Line Number="698"><![CDATA[		_DEBUG_ERROR2("invalid null pointer", _File, _Line);]]></Line>
      <Line Number="699"><![CDATA[	}]]></Line>
      <Line Number="700"><![CDATA[]]></Line>
      <Line Number="701"><![CDATA[		// TEMPLATE FUNCTION _Debug_range]]></Line>
      <Line Number="702"><![CDATA[template<class _InIt> inline]]></Line>
      <Line Number="703"><![CDATA[	void _Debug_range2(_InIt _First, _InIt _Last, _Dbfile_t, _Dbline_t,]]></Line>
      <Line Number="704"><![CDATA[		input_iterator_tag)]]></Line>
      <Line Number="705"><![CDATA[	{	// test iterator pair for valid range, arbitrary iterators]]></Line>
      <Line Number="706"><![CDATA[	bool _Ans = _First == _Last;	// make sure they're comparable]]></Line>
      <Line Number="707"><![CDATA[	_Ans = _Ans;	// to quiet diagnostics]]></Line>
      <Line Number="708"><![CDATA[	}]]></Line>
      <Line Number="709"><![CDATA[]]></Line>
      <Line Number="710"><![CDATA[template<class _RanIt> inline]]></Line>
      <Line Number="711"><![CDATA[	void _Debug_range2(_RanIt _First, _RanIt _Last,]]></Line>
      <Line Number="712"><![CDATA[		_Dbfile_t _File, _Dbline_t _Line,]]></Line>
      <Line Number="713"><![CDATA[		random_access_iterator_tag)]]></Line>
      <Line Number="714"><![CDATA[	{	// test iterator pair for valid range, random-access iterators]]></Line>
      <Line Number="715"><![CDATA[	if (_First != _Last)]]></Line>
      <Line Number="716"><![CDATA[		{	// check for non-null pointers, valid range]]></Line>
      <Line Number="717"><![CDATA[		_DEBUG_POINTER2(_First, _File, _Line);]]></Line>
      <Line Number="718"><![CDATA[		_DEBUG_POINTER2(_Last, _File, _Line);]]></Line>
      <Line Number="719"><![CDATA[		if (_Last < _First)]]></Line>
      <Line Number="720"><![CDATA[			_DEBUG_ERROR2("invalid iterator range", _File, _Line);]]></Line>
      <Line Number="721"><![CDATA[		}]]></Line>
      <Line Number="722"><![CDATA[	}]]></Line>
      <Line Number="723"><![CDATA[]]></Line>
      <Line Number="724"><![CDATA[template<class _InIt> inline]]></Line>
      <Line Number="725"><![CDATA[	void _Debug_range(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="726"><![CDATA[		_Dbfile_t _File, _Dbline_t _Line)]]></Line>
      <Line Number="727"><![CDATA[	{	// test iterator pair for valid range]]></Line>
      <Line Number="728"><![CDATA[	_Debug_range2(_First, _Last, _File, _Line, _Iter_cat(_First));]]></Line>
      <Line Number="729"><![CDATA[	}]]></Line>
      <Line Number="730"><![CDATA[]]></Line>
      <Line Number="731"><![CDATA[		// TEMPLATE FUNCTION _Debug_order]]></Line>
      <Line Number="732"><![CDATA[template<class _InIt> inline]]></Line>
      <Line Number="733"><![CDATA[	void _Debug_order2(_InIt, _InIt,]]></Line>
      <Line Number="734"><![CDATA[		_Dbfile_t, _Dbline_t, input_iterator_tag)]]></Line>
      <Line Number="735"><![CDATA[	{	// test if range is ordered by operator<, input iterators]]></Line>
      <Line Number="736"><![CDATA[	}]]></Line>
      <Line Number="737"><![CDATA[]]></Line>
      <Line Number="738"><![CDATA[template<class _FwdIt> inline]]></Line>
      <Line Number="739"><![CDATA[	void _Debug_order2(_FwdIt _First, _FwdIt _Last,]]></Line>
      <Line Number="740"><![CDATA[		_Dbfile_t _File, _Dbline_t _Line, forward_iterator_tag)]]></Line>
      <Line Number="741"><![CDATA[	{	// test if range is ordered by operator<, forward iterators]]></Line>
      <Line Number="742"><![CDATA[	for (_FwdIt _Next = _First; _First != _Last && ++_Next != _Last; ++_First)]]></Line>
      <Line Number="743"><![CDATA[		if (_DEBUG_LT(*_Next, *_First))]]></Line>
      <Line Number="744"><![CDATA[			_DEBUG_ERROR2("sequence not ordered", _File, _Line);]]></Line>
      <Line Number="745"><![CDATA[	}]]></Line>
      <Line Number="746"><![CDATA[]]></Line>
      <Line Number="747"><![CDATA[template<class _InIt> inline]]></Line>
      <Line Number="748"><![CDATA[	void _Debug_order(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="749"><![CDATA[		_Dbfile_t _File, _Dbline_t _Line)]]></Line>
      <Line Number="750"><![CDATA[	{	// test is range is ordered by operator<]]></Line>
      <Line Number="751"><![CDATA[	_DEBUG_RANGE2(_First, _Last, _File, _Line);]]></Line>
      <Line Number="752"><![CDATA[	_Debug_order2(_First, _Last, _File, _Line, _Iter_cat(_First));]]></Line>
      <Line Number="753"><![CDATA[	}]]></Line>
      <Line Number="754"><![CDATA[]]></Line>
      <Line Number="755"><![CDATA[		// TEMPLATE FUNCTION _Debug_order_pred]]></Line>
      <Line Number="756"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="757"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="758"><![CDATA[	void _Debug_order2(_InIt, _InIt, _Pr,]]></Line>
      <Line Number="759"><![CDATA[		_Dbfile_t, _Dbline_t, input_iterator_tag)]]></Line>
      <Line Number="760"><![CDATA[	{	// test if range is ordered by predicate, input iterators]]></Line>
      <Line Number="761"><![CDATA[	}]]></Line>
      <Line Number="762"><![CDATA[]]></Line>
      <Line Number="763"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="764"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="765"><![CDATA[	void _Debug_order2(_FwdIt _First, _FwdIt _Last, _Pr _Pred,]]></Line>
      <Line Number="766"><![CDATA[		_Dbfile_t _File, _Dbline_t _Line, forward_iterator_tag)]]></Line>
      <Line Number="767"><![CDATA[	{	// test if range is ordered by predicate, forward iterators]]></Line>
      <Line Number="768"><![CDATA[	for (_FwdIt _Next = _First; _First != _Last && ++_Next != _Last; ++_First)]]></Line>
      <Line Number="769"><![CDATA[		if (_DEBUG_LT_PRED(_Pred, *_Next, *_First))]]></Line>
      <Line Number="770"><![CDATA[			_DEBUG_ERROR2("sequence not ordered", _File, _Line);]]></Line>
      <Line Number="771"><![CDATA[	}]]></Line>
      <Line Number="772"><![CDATA[]]></Line>
      <Line Number="773"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="774"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="775"><![CDATA[	void _Debug_order(_InIt _First, _InIt _Last, _Pr _Pred,]]></Line>
      <Line Number="776"><![CDATA[		_Dbfile_t _File, _Dbline_t _Line)]]></Line>
      <Line Number="777"><![CDATA[	{	// test if range is ordered by predicate]]></Line>
      <Line Number="778"><![CDATA[	_DEBUG_RANGE2(_First, _Last, _File, _Line);]]></Line>
      <Line Number="779"><![CDATA[	_DEBUG_POINTER2(_Pred, _File, _Line);]]></Line>
      <Line Number="780"><![CDATA[	_Debug_order2(_First, _Last, _Pred, _File, _Line, _Iter_cat(_First));]]></Line>
      <Line Number="781"><![CDATA[	}]]></Line>
      <Line Number="782"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL < 2 */]]></Line>
      <Line Number="783"><![CDATA[]]></Line>
      <Line Number="784"><![CDATA[		// MORE ITERATOR STUFF (from <iterator>]]></Line>
      <Line Number="785"><![CDATA[		// TEMPLATE FUNCTION _Val_type]]></Line>
      <Line Number="786"><![CDATA[]]></Line>
      <Line Number="787"><![CDATA[template<class _Iter> inline]]></Line>
      <Line Number="788"><![CDATA[	typename iterator_traits<_Iter>::value_type *_Val_type(_Iter)]]></Line>
      <Line Number="789"><![CDATA[	{	// return value type from arbitrary argument]]></Line>
      <Line Number="790"><![CDATA[	return (0);]]></Line>
      <Line Number="791"><![CDATA[	}]]></Line>
      <Line Number="792"><![CDATA[]]></Line>
      <Line Number="793"><![CDATA[		// TEMPLATE FUNCTION advance]]></Line>
      <Line Number="794"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="795"><![CDATA[	class _Diff> inline]]></Line>
      <Line Number="796"><![CDATA[	void advance(_InIt& _Where, _Diff _Off)]]></Line>
      <Line Number="797"><![CDATA[	{	// increment iterator by offset, arbitrary iterators]]></Line>
      <Line Number="798"><![CDATA[	_Advance(_Where, _Off, _Iter_cat(_Where));]]></Line>
      <Line Number="799"><![CDATA[	}]]></Line>
      <Line Number="800"><![CDATA[]]></Line>
      <Line Number="801"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="802"><![CDATA[	class _Diff> inline]]></Line>
      <Line Number="803"><![CDATA[	void _Advance(_InIt& _Where, _Diff _Off, input_iterator_tag)]]></Line>
      <Line Number="804"><![CDATA[	{	// increment iterator by offset, input iterators]]></Line>
      <Line Number="805"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 2]]></Line>
      <Line Number="806"><![CDATA[//	if (_Off < 0)]]></Line>
      <Line Number="807"><![CDATA[//		_DEBUG_ERROR("negative offset in advance");]]></Line>
      <Line Number="808"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL == 2 */]]></Line>
      <Line Number="809"><![CDATA[]]></Line>
      <Line Number="810"><![CDATA[	for (; 0 < _Off; --_Off)]]></Line>
      <Line Number="811"><![CDATA[		++_Where;]]></Line>
      <Line Number="812"><![CDATA[	}]]></Line>
      <Line Number="813"><![CDATA[]]></Line>
      <Line Number="814"><![CDATA[template<class _FI,]]></Line>
      <Line Number="815"><![CDATA[	class _Diff> inline]]></Line>
      <Line Number="816"><![CDATA[	void _Advance(_FI& _Where, _Diff _Off, forward_iterator_tag)]]></Line>
      <Line Number="817"><![CDATA[	{	// increment iterator by offset, forward iterators]]></Line>
      <Line Number="818"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 2]]></Line>
      <Line Number="819"><![CDATA[//	if (_Off < 0)]]></Line>
      <Line Number="820"><![CDATA[//		_DEBUG_ERROR("negative offset in advance");]]></Line>
      <Line Number="821"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL == 2 */]]></Line>
      <Line Number="822"><![CDATA[]]></Line>
      <Line Number="823"><![CDATA[	for (; 0 < _Off; --_Off)]]></Line>
      <Line Number="824"><![CDATA[		++_Where;]]></Line>
      <Line Number="825"><![CDATA[	}]]></Line>
      <Line Number="826"><![CDATA[]]></Line>
      <Line Number="827"><![CDATA[template<class _BI,]]></Line>
      <Line Number="828"><![CDATA[	class _Diff> inline]]></Line>
      <Line Number="829"><![CDATA[	void _Advance(_BI& _Where, _Diff _Off, bidirectional_iterator_tag)]]></Line>
      <Line Number="830"><![CDATA[	{	// increment iterator by offset, bidirectional iterators]]></Line>
      <Line Number="831"><![CDATA[	for (; 0 < _Off; --_Off)]]></Line>
      <Line Number="832"><![CDATA[		++_Where;]]></Line>
      <Line Number="833"><![CDATA[	for (; _Off < 0; ++_Off)]]></Line>
      <Line Number="834"><![CDATA[		--_Where;]]></Line>
      <Line Number="835"><![CDATA[	}]]></Line>
      <Line Number="836"><![CDATA[]]></Line>
      <Line Number="837"><![CDATA[template<class _RI,]]></Line>
      <Line Number="838"><![CDATA[	class _Diff> inline]]></Line>
      <Line Number="839"><![CDATA[	void _Advance(_RI& _Where, _Diff _Off, random_access_iterator_tag)]]></Line>
      <Line Number="840"><![CDATA[	{	// increment iterator by offset, random-access iterators]]></Line>
      <Line Number="841"><![CDATA[	_Where += _Off;]]></Line>
      <Line Number="842"><![CDATA[	}]]></Line>
      <Line Number="843"><![CDATA[]]></Line>
      <Line Number="844"><![CDATA[		// TEMPLATE FUNCTION _Dist_type]]></Line>
      <Line Number="845"><![CDATA[]]></Line>
      <Line Number="846"><![CDATA[template<class _Iter> inline]]></Line>
      <Line Number="847"><![CDATA[	typename iterator_traits<_Iter>::difference_type]]></Line>
      <Line Number="848"><![CDATA[		*_Dist_type(_Iter)]]></Line>
      <Line Number="849"><![CDATA[	{	// return distance type from arbitrary argument]]></Line>
      <Line Number="850"><![CDATA[	return (0);]]></Line>
      <Line Number="851"><![CDATA[	}]]></Line>
      <Line Number="852"><![CDATA[]]></Line>
      <Line Number="853"><![CDATA[		// TEMPLATE FUNCTIONS distance and _Distance]]></Line>
      <Line Number="854"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="855"><![CDATA[	class _Diff> inline]]></Line>
      <Line Number="856"><![CDATA[		void _Distance2(_InIt _First, _InIt _Last, _Diff& _Off,]]></Line>
      <Line Number="857"><![CDATA[			input_iterator_tag)]]></Line>
      <Line Number="858"><![CDATA[	{	// add to _Off distance between input iterators]]></Line>
      <Line Number="859"><![CDATA[	for (; _First != _Last; ++_First)]]></Line>
      <Line Number="860"><![CDATA[		++_Off;]]></Line>
      <Line Number="861"><![CDATA[	}]]></Line>
      <Line Number="862"><![CDATA[]]></Line>
      <Line Number="863"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="864"><![CDATA[	class _Diff> inline]]></Line>
      <Line Number="865"><![CDATA[		void _Distance2(_FwdIt _First, _FwdIt _Last, _Diff& _Off,]]></Line>
      <Line Number="866"><![CDATA[			forward_iterator_tag)]]></Line>
      <Line Number="867"><![CDATA[	{	// add to _Off distance between forward iterators (redundant)]]></Line>
      <Line Number="868"><![CDATA[	for (; _First != _Last; ++_First)]]></Line>
      <Line Number="869"><![CDATA[		++_Off;]]></Line>
      <Line Number="870"><![CDATA[	}]]></Line>
      <Line Number="871"><![CDATA[]]></Line>
      <Line Number="872"><![CDATA[template<class _BidIt,]]></Line>
      <Line Number="873"><![CDATA[	class _Diff> inline]]></Line>
      <Line Number="874"><![CDATA[		void _Distance2(_BidIt _First, _BidIt _Last, _Diff& _Off,]]></Line>
      <Line Number="875"><![CDATA[			bidirectional_iterator_tag)]]></Line>
      <Line Number="876"><![CDATA[	{	// add to _Off distance between bidirectional iterators (redundant)]]></Line>
      <Line Number="877"><![CDATA[	for (; _First != _Last; ++_First)]]></Line>
      <Line Number="878"><![CDATA[		++_Off;]]></Line>
      <Line Number="879"><![CDATA[	}]]></Line>
      <Line Number="880"><![CDATA[]]></Line>
      <Line Number="881"><![CDATA[template<class _RanIt,]]></Line>
      <Line Number="882"><![CDATA[	class _Diff> inline]]></Line>
      <Line Number="883"><![CDATA[		void _Distance2(_RanIt _First, _RanIt _Last, _Diff& _Off,]]></Line>
      <Line Number="884"><![CDATA[			random_access_iterator_tag)]]></Line>
      <Line Number="885"><![CDATA[	{	// add to _Off distance between random-access iterators]]></Line>
      <Line Number="886"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 2]]></Line>
      <Line Number="887"><![CDATA[	if (_First != _Last)]]></Line>
      <Line Number="888"><![CDATA[		{	// check for null pointers]]></Line>
      <Line Number="889"><![CDATA[		_DEBUG_POINTER(_First);]]></Line>
      <Line Number="890"><![CDATA[		_DEBUG_POINTER(_Last);]]></Line>
      <Line Number="891"><![CDATA[		}]]></Line>
      <Line Number="892"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL == 2 */]]></Line>
      <Line Number="893"><![CDATA[]]></Line>
      <Line Number="894"><![CDATA[	_Off += _Last - _First;]]></Line>
      <Line Number="895"><![CDATA[	}]]></Line>
      <Line Number="896"><![CDATA[]]></Line>
      <Line Number="897"><![CDATA[template<class _InIt> inline]]></Line>
      <Line Number="898"><![CDATA[	typename iterator_traits<_InIt>::difference_type]]></Line>
      <Line Number="899"><![CDATA[		distance(_InIt _First, _InIt _Last)]]></Line>
      <Line Number="900"><![CDATA[	{	// return distance between iterators]]></Line>
      <Line Number="901"><![CDATA[	typename iterator_traits<_InIt>::difference_type _Off = 0;]]></Line>
      <Line Number="902"><![CDATA[	_Distance2(_First, _Last, _Off, _Iter_cat(_First));]]></Line>
      <Line Number="903"><![CDATA[	return (_Off);]]></Line>
      <Line Number="904"><![CDATA[	}]]></Line>
      <Line Number="905"><![CDATA[]]></Line>
      <Line Number="906"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="907"><![CDATA[	class _Diff> inline]]></Line>
      <Line Number="908"><![CDATA[		void _Distance(_InIt _First, _InIt _Last, _Diff& _Off)]]></Line>
      <Line Number="909"><![CDATA[	{	// add to _Off distance between iterators]]></Line>
      <Line Number="910"><![CDATA[	_Distance2(_First, _Last, _Off, _Iter_cat(_First));]]></Line>
      <Line Number="911"><![CDATA[	}]]></Line>
      <Line Number="912"><![CDATA[]]></Line>
      <Line Number="913"><![CDATA[ #if _HAS_CPP0X]]></Line>
      <Line Number="914"><![CDATA[		// TEMPLATE FUNCTIONS next and prev]]></Line>
      <Line Number="915"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="916"><![CDATA[	class _Diff> inline]]></Line>
      <Line Number="917"><![CDATA[		_InIt _Increment(_InIt _First, _Diff _Off,]]></Line>
      <Line Number="918"><![CDATA[			input_iterator_tag)]]></Line>
      <Line Number="919"><![CDATA[	{	// add _Off to input iterator]]></Line>
      <Line Number="920"><![CDATA[	for (; 0 < _Off; --_Off)]]></Line>
      <Line Number="921"><![CDATA[		++_First;]]></Line>
      <Line Number="922"><![CDATA[	return (_First);]]></Line>
      <Line Number="923"><![CDATA[	}]]></Line>
      <Line Number="924"><![CDATA[]]></Line>
      <Line Number="925"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="926"><![CDATA[	class _Diff> inline]]></Line>
      <Line Number="927"><![CDATA[		_FwdIt _Increment(_FwdIt _First, _Diff _Off,]]></Line>
      <Line Number="928"><![CDATA[			forward_iterator_tag)]]></Line>
      <Line Number="929"><![CDATA[	{	// add _Off to forward iterator]]></Line>
      <Line Number="930"><![CDATA[	for (; 0 < _Off; --_Off)]]></Line>
      <Line Number="931"><![CDATA[		++_First;]]></Line>
      <Line Number="932"><![CDATA[	return (_First);]]></Line>
      <Line Number="933"><![CDATA[	}]]></Line>
      <Line Number="934"><![CDATA[]]></Line>
      <Line Number="935"><![CDATA[template<class _BidIt,]]></Line>
      <Line Number="936"><![CDATA[	class _Diff> inline]]></Line>
      <Line Number="937"><![CDATA[		_BidIt _Increment(_BidIt _First, _Diff _Off,]]></Line>
      <Line Number="938"><![CDATA[			bidirectional_iterator_tag)]]></Line>
      <Line Number="939"><![CDATA[	{	// add _Off to bidirectional iterator]]></Line>
      <Line Number="940"><![CDATA[	for (; _Off < 0; ++_Off)]]></Line>
      <Line Number="941"><![CDATA[		--_First;]]></Line>
      <Line Number="942"><![CDATA[	for (; 0 < _Off; --_Off)]]></Line>
      <Line Number="943"><![CDATA[		++_First;]]></Line>
      <Line Number="944"><![CDATA[	return (_First);]]></Line>
      <Line Number="945"><![CDATA[	}]]></Line>
      <Line Number="946"><![CDATA[]]></Line>
      <Line Number="947"><![CDATA[template<class _RanIt,]]></Line>
      <Line Number="948"><![CDATA[	class _Diff> inline]]></Line>
      <Line Number="949"><![CDATA[		_RanIt _Increment(_RanIt _First, _Diff _Off,]]></Line>
      <Line Number="950"><![CDATA[			random_access_iterator_tag)]]></Line>
      <Line Number="951"><![CDATA[	{	// add _Off to random-access iterator]]></Line>
      <Line Number="952"><![CDATA[	return (_First + _Off);]]></Line>
      <Line Number="953"><![CDATA[	}]]></Line>
      <Line Number="954"><![CDATA[]]></Line>
      <Line Number="955"><![CDATA[template<class _InIt> inline]]></Line>
      <Line Number="956"><![CDATA[	_InIt next(_InIt _First,]]></Line>
      <Line Number="957"><![CDATA[		typename iterator_traits<_InIt>::difference_type _Off = 1)]]></Line>
      <Line Number="958"><![CDATA[	{	// increment iterator]]></Line>
      <Line Number="959"><![CDATA[	return (_Increment(_First, _Off, _Iter_cat(_First)));]]></Line>
      <Line Number="960"><![CDATA[	}]]></Line>
      <Line Number="961"><![CDATA[]]></Line>
      <Line Number="962"><![CDATA[template<class _InIt> inline]]></Line>
      <Line Number="963"><![CDATA[	_InIt prev(_InIt _First,]]></Line>
      <Line Number="964"><![CDATA[		typename iterator_traits<_InIt>::difference_type _Off = 1)]]></Line>
      <Line Number="965"><![CDATA[	{	// decrement iterator]]></Line>
      <Line Number="966"><![CDATA[	return (_Increment(_First, -_Off, _Iter_cat(_First)));]]></Line>
      <Line Number="967"><![CDATA[	}]]></Line>
      <Line Number="968"><![CDATA[]]></Line>
      <Line Number="969"><![CDATA[template<class _Container> inline]]></Line>
      <Line Number="970"><![CDATA[	typename _Container::iterator begin(_Container& _Cont)]]></Line>
      <Line Number="971"><![CDATA[	{	// get beginning of sequence]]></Line>
      <Line Number="972"><![CDATA[	return (_Cont.begin());]]></Line>
      <Line Number="973"><![CDATA[	}]]></Line>
      <Line Number="974"><![CDATA[]]></Line>
      <Line Number="975"><![CDATA[template<class _Container> inline]]></Line>
      <Line Number="976"><![CDATA[	typename _Container::const_iterator begin(const _Container& _Cont)]]></Line>
      <Line Number="977"><![CDATA[	{	// get beginning of sequence]]></Line>
      <Line Number="978"><![CDATA[	return (_Cont.begin());]]></Line>
      <Line Number="979"><![CDATA[	}]]></Line>
      <Line Number="980"><![CDATA[]]></Line>
      <Line Number="981"><![CDATA[template<class _Container> inline]]></Line>
      <Line Number="982"><![CDATA[	typename _Container::iterator end(_Container& _Cont)]]></Line>
      <Line Number="983"><![CDATA[	{	// get end of sequence]]></Line>
      <Line Number="984"><![CDATA[	return (_Cont.end());]]></Line>
      <Line Number="985"><![CDATA[	}]]></Line>
      <Line Number="986"><![CDATA[]]></Line>
      <Line Number="987"><![CDATA[template<class _Container> inline]]></Line>
      <Line Number="988"><![CDATA[	typename _Container::const_iterator end(const _Container& _Cont)]]></Line>
      <Line Number="989"><![CDATA[	{	// get end of sequence]]></Line>
      <Line Number="990"><![CDATA[	return (_Cont.end());]]></Line>
      <Line Number="991"><![CDATA[	}]]></Line>
      <Line Number="992"><![CDATA[]]></Line>
      <Line Number="993"><![CDATA[template<class _Ty,]]></Line>
      <Line Number="994"><![CDATA[	size_t _Size> inline]]></Line>
      <Line Number="995"><![CDATA[	_Ty *begin(_Ty (&_Array)[_Size])]]></Line>
      <Line Number="996"><![CDATA[	{	// get beginning of array]]></Line>
      <Line Number="997"><![CDATA[	return (&_Array[0]);]]></Line>
      <Line Number="998"><![CDATA[	}]]></Line>
      <Line Number="999"><![CDATA[]]></Line>
      <Line Number="1000"><![CDATA[template<class _Ty,]]></Line>
      <Line Number="1001"><![CDATA[	size_t _Size> inline]]></Line>
      <Line Number="1002"><![CDATA[	_Ty *end(_Ty (&_Array)[_Size])]]></Line>
      <Line Number="1003"><![CDATA[	{	// get end of array]]></Line>
      <Line Number="1004"><![CDATA[	return (&_Array[0] + _Size);]]></Line>
      <Line Number="1005"><![CDATA[	}]]></Line>
      <Line Number="1006"><![CDATA[ #endif /* _HAS_CPP0X */]]></Line>
      <Line Number="1007"><![CDATA[]]></Line>
      <Line Number="1008"><![CDATA[		// TEMPLATE CLASS _Revranit]]></Line>
      <Line Number="1009"><![CDATA[template<class _RanIt,]]></Line>
      <Line Number="1010"><![CDATA[	class _Base>]]></Line>
      <Line Number="1011"><![CDATA[	class _Revranit]]></Line>
      <Line Number="1012"><![CDATA[		: public _Base]]></Line>
      <Line Number="1013"><![CDATA[	{	// wrap iterator to run it backwards]]></Line>
      <Line Number="1014"><![CDATA[public:]]></Line>
      <Line Number="1015"><![CDATA[	typedef _Revranit<_RanIt, _Base> _Myt;]]></Line>
      <Line Number="1016"><![CDATA[ 	typedef typename _Base::difference_type difference_type;]]></Line>
      <Line Number="1017"><![CDATA[	typedef typename _Base::pointer pointer;]]></Line>
      <Line Number="1018"><![CDATA[	typedef typename _Base::reference reference;]]></Line>
      <Line Number="1019"><![CDATA[	typedef _RanIt iterator_type;]]></Line>
      <Line Number="1020"><![CDATA[]]></Line>
      <Line Number="1021"><![CDATA[	_Revranit()]]></Line>
      <Line Number="1022"><![CDATA[		{	// construct with default wrapped iterator]]></Line>
      <Line Number="1023"><![CDATA[		}]]></Line>
      <Line Number="1024"><![CDATA[]]></Line>
      <Line Number="1025"><![CDATA[	explicit _Revranit(_RanIt _Right)]]></Line>
      <Line Number="1026"><![CDATA[		: current(_Right)]]></Line>
      <Line Number="1027"><![CDATA[		{	// construct wrapped iterator from _Right]]></Line>
      <Line Number="1028"><![CDATA[		}]]></Line>
      <Line Number="1029"><![CDATA[]]></Line>
      <Line Number="1030"><![CDATA[	template<class _RanIt2,]]></Line>
      <Line Number="1031"><![CDATA[		class _Base2>]]></Line>
      <Line Number="1032"><![CDATA[		_Revranit(const _Revranit<_RanIt2, _Base2>& _Right)]]></Line>
      <Line Number="1033"><![CDATA[		: current(_Right.base())]]></Line>
      <Line Number="1034"><![CDATA[		{	// initialize with compatible base]]></Line>
      <Line Number="1035"><![CDATA[		}]]></Line>
      <Line Number="1036"><![CDATA[]]></Line>
      <Line Number="1037"><![CDATA[	_RanIt base() const]]></Line>
      <Line Number="1038"><![CDATA[		{	// return wrapped iterator]]></Line>
      <Line Number="1039"><![CDATA[		return (current);]]></Line>
      <Line Number="1040"><![CDATA[		}]]></Line>
      <Line Number="1041"><![CDATA[]]></Line>
      <Line Number="1042"><![CDATA[	reference operator*() const]]></Line>
      <Line Number="1043"><![CDATA[		{	// return designated value]]></Line>
      <Line Number="1044"><![CDATA[		_RanIt _Tmp = current;]]></Line>
      <Line Number="1045"><![CDATA[		return (*--_Tmp);]]></Line>
      <Line Number="1046"><![CDATA[		}]]></Line>
      <Line Number="1047"><![CDATA[]]></Line>
      <Line Number="1048"><![CDATA[	pointer operator->() const]]></Line>
      <Line Number="1049"><![CDATA[		{	// return pointer to class object]]></Line>
      <Line Number="1050"><![CDATA[		return (&**this);]]></Line>
      <Line Number="1051"><![CDATA[		}]]></Line>
      <Line Number="1052"><![CDATA[]]></Line>
      <Line Number="1053"><![CDATA[	_Myt& operator++()]]></Line>
      <Line Number="1054"><![CDATA[		{	// preincrement]]></Line>
      <Line Number="1055"><![CDATA[		--current;]]></Line>
      <Line Number="1056"><![CDATA[		return (*this);]]></Line>
      <Line Number="1057"><![CDATA[		}]]></Line>
      <Line Number="1058"><![CDATA[]]></Line>
      <Line Number="1059"><![CDATA[	_Myt operator++(int)]]></Line>
      <Line Number="1060"><![CDATA[		{	// postincrement]]></Line>
      <Line Number="1061"><![CDATA[		_Myt _Tmp = *this;]]></Line>
      <Line Number="1062"><![CDATA[		--current;]]></Line>
      <Line Number="1063"><![CDATA[		return (_Tmp);]]></Line>
      <Line Number="1064"><![CDATA[		}]]></Line>
      <Line Number="1065"><![CDATA[]]></Line>
      <Line Number="1066"><![CDATA[	_Myt& operator--()]]></Line>
      <Line Number="1067"><![CDATA[		{	// predecrement]]></Line>
      <Line Number="1068"><![CDATA[		++current;]]></Line>
      <Line Number="1069"><![CDATA[		return (*this);]]></Line>
      <Line Number="1070"><![CDATA[		}]]></Line>
      <Line Number="1071"><![CDATA[]]></Line>
      <Line Number="1072"><![CDATA[	_Myt operator--(int)]]></Line>
      <Line Number="1073"><![CDATA[		{	// postdecrement]]></Line>
      <Line Number="1074"><![CDATA[		_Myt _Tmp = *this;]]></Line>
      <Line Number="1075"><![CDATA[		++current;]]></Line>
      <Line Number="1076"><![CDATA[		return (_Tmp);]]></Line>
      <Line Number="1077"><![CDATA[		}]]></Line>
      <Line Number="1078"><![CDATA[]]></Line>
      <Line Number="1079"><![CDATA[	template<class _RanIt2,]]></Line>
      <Line Number="1080"><![CDATA[		class _Base2>]]></Line>
      <Line Number="1081"><![CDATA[		bool _Equal(const _Revranit<_RanIt2, _Base2>& _Right) const]]></Line>
      <Line Number="1082"><![CDATA[		{	// test for iterator equality]]></Line>
      <Line Number="1083"><![CDATA[		return (current == _Right.base());]]></Line>
      <Line Number="1084"><![CDATA[		}]]></Line>
      <Line Number="1085"><![CDATA[]]></Line>
      <Line Number="1086"><![CDATA[// N.B. functions valid for random-access iterators only beyond this point]]></Line>
      <Line Number="1087"><![CDATA[]]></Line>
      <Line Number="1088"><![CDATA[	_Myt& operator+=(difference_type _Off)]]></Line>
      <Line Number="1089"><![CDATA[		{	// increment by integer]]></Line>
      <Line Number="1090"><![CDATA[		current -= _Off;]]></Line>
      <Line Number="1091"><![CDATA[		return (*this);]]></Line>
      <Line Number="1092"><![CDATA[		}]]></Line>
      <Line Number="1093"><![CDATA[]]></Line>
      <Line Number="1094"><![CDATA[	_Myt operator+(difference_type _Off) const]]></Line>
      <Line Number="1095"><![CDATA[		{	// return this + integer]]></Line>
      <Line Number="1096"><![CDATA[		return (_Myt(current - _Off));]]></Line>
      <Line Number="1097"><![CDATA[		}]]></Line>
      <Line Number="1098"><![CDATA[]]></Line>
      <Line Number="1099"><![CDATA[	_Myt& operator-=(difference_type _Off)]]></Line>
      <Line Number="1100"><![CDATA[		{	// decrement by integer]]></Line>
      <Line Number="1101"><![CDATA[		current += _Off;]]></Line>
      <Line Number="1102"><![CDATA[		return (*this);]]></Line>
      <Line Number="1103"><![CDATA[		}]]></Line>
      <Line Number="1104"><![CDATA[]]></Line>
      <Line Number="1105"><![CDATA[	_Myt operator-(difference_type _Off) const]]></Line>
      <Line Number="1106"><![CDATA[		{	// return this - integer]]></Line>
      <Line Number="1107"><![CDATA[		return (_Myt(current + _Off));]]></Line>
      <Line Number="1108"><![CDATA[		}]]></Line>
      <Line Number="1109"><![CDATA[]]></Line>
      <Line Number="1110"><![CDATA[	reference operator[](difference_type _Off) const]]></Line>
      <Line Number="1111"><![CDATA[		{	// subscript]]></Line>
      <Line Number="1112"><![CDATA[		return (*(*this + _Off));]]></Line>
      <Line Number="1113"><![CDATA[		}]]></Line>
      <Line Number="1114"><![CDATA[]]></Line>
      <Line Number="1115"><![CDATA[	template<class _RanIt2,]]></Line>
      <Line Number="1116"><![CDATA[		class _Base2>]]></Line>
      <Line Number="1117"><![CDATA[		bool _Less(const _Revranit<_RanIt2, _Base2>& _Right) const]]></Line>
      <Line Number="1118"><![CDATA[		{	// test if this < _Right]]></Line>
      <Line Number="1119"><![CDATA[		return (_Right.base() < current);]]></Line>
      <Line Number="1120"><![CDATA[		}]]></Line>
      <Line Number="1121"><![CDATA[]]></Line>
      <Line Number="1122"><![CDATA[	difference_type operator-(const _Myt& _Right) const]]></Line>
      <Line Number="1123"><![CDATA[		{	// return difference of iterators]]></Line>
      <Line Number="1124"><![CDATA[		return (_Right.base() - current);]]></Line>
      <Line Number="1125"><![CDATA[		}]]></Line>
      <Line Number="1126"><![CDATA[]]></Line>
      <Line Number="1127"><![CDATA[protected:]]></Line>
      <Line Number="1128"><![CDATA[	_RanIt current;	// the wrapped iterator]]></Line>
      <Line Number="1129"><![CDATA[	};]]></Line>
      <Line Number="1130"><![CDATA[]]></Line>
      <Line Number="1131"><![CDATA[		// _Revranit TEMPLATE OPERATORS]]></Line>
      <Line Number="1132"><![CDATA[template<class _RanIt,]]></Line>
      <Line Number="1133"><![CDATA[	class _Base,]]></Line>
      <Line Number="1134"><![CDATA[	class _Diff> inline]]></Line>
      <Line Number="1135"><![CDATA[	_Revranit<_RanIt, _Base>]]></Line>
      <Line Number="1136"><![CDATA[		operator+(_Diff _Off,]]></Line>
      <Line Number="1137"><![CDATA[		const _Revranit<_RanIt, _Base>& _Right)]]></Line>
      <Line Number="1138"><![CDATA[	{	// return reverse_iterator + integer]]></Line>
      <Line Number="1139"><![CDATA[	return (_Right + _Off);]]></Line>
      <Line Number="1140"><![CDATA[	}]]></Line>
      <Line Number="1141"><![CDATA[]]></Line>
      <Line Number="1142"><![CDATA[template<class _RanIt1,]]></Line>
      <Line Number="1143"><![CDATA[	class _Base1,]]></Line>
      <Line Number="1144"><![CDATA[	class _RanIt2,]]></Line>
      <Line Number="1145"><![CDATA[	class _Base2> inline]]></Line>
      <Line Number="1146"><![CDATA[	typename _Base1::difference_type operator-(]]></Line>
      <Line Number="1147"><![CDATA[		const _Revranit<_RanIt1, _Base1>& _Left,]]></Line>
      <Line Number="1148"><![CDATA[		const _Revranit<_RanIt2, _Base2>& _Right)]]></Line>
      <Line Number="1149"><![CDATA[	{	// return difference of reverse_iterators]]></Line>
      <Line Number="1150"><![CDATA[	return (_Right.base() - _Left.base());]]></Line>
      <Line Number="1151"><![CDATA[	}]]></Line>
      <Line Number="1152"><![CDATA[]]></Line>
      <Line Number="1153"><![CDATA[template<class _RanIt1,]]></Line>
      <Line Number="1154"><![CDATA[	class _Base1,]]></Line>
      <Line Number="1155"><![CDATA[	class _RanIt2,]]></Line>
      <Line Number="1156"><![CDATA[	class _Base2> inline]]></Line>
      <Line Number="1157"><![CDATA[	bool operator==(]]></Line>
      <Line Number="1158"><![CDATA[		const _Revranit<_RanIt1, _Base1>& _Left,]]></Line>
      <Line Number="1159"><![CDATA[		const _Revranit<_RanIt2, _Base2>& _Right)]]></Line>
      <Line Number="1160"><![CDATA[	{	// test for reverse_iterator equality]]></Line>
      <Line Number="1161"><![CDATA[	return (_Left._Equal(_Right));]]></Line>
      <Line Number="1162"><![CDATA[	}]]></Line>
      <Line Number="1163"><![CDATA[]]></Line>
      <Line Number="1164"><![CDATA[template<class _RanIt1,]]></Line>
      <Line Number="1165"><![CDATA[	class _Base1,]]></Line>
      <Line Number="1166"><![CDATA[	class _RanIt2,]]></Line>
      <Line Number="1167"><![CDATA[	class _Base2> inline]]></Line>
      <Line Number="1168"><![CDATA[	bool operator!=(]]></Line>
      <Line Number="1169"><![CDATA[		const _Revranit<_RanIt1, _Base1>& _Left,]]></Line>
      <Line Number="1170"><![CDATA[		const _Revranit<_RanIt2, _Base2>& _Right)]]></Line>
      <Line Number="1171"><![CDATA[	{	// test for reverse_iterator inequality]]></Line>
      <Line Number="1172"><![CDATA[	return (!(_Left == _Right));]]></Line>
      <Line Number="1173"><![CDATA[	}]]></Line>
      <Line Number="1174"><![CDATA[]]></Line>
      <Line Number="1175"><![CDATA[template<class _RanIt1,]]></Line>
      <Line Number="1176"><![CDATA[	class _Base1,]]></Line>
      <Line Number="1177"><![CDATA[	class _RanIt2,]]></Line>
      <Line Number="1178"><![CDATA[	class _Base2> inline]]></Line>
      <Line Number="1179"><![CDATA[	bool operator<(]]></Line>
      <Line Number="1180"><![CDATA[		const _Revranit<_RanIt1, _Base1>& _Left,]]></Line>
      <Line Number="1181"><![CDATA[		const _Revranit<_RanIt2, _Base2>& _Right)]]></Line>
      <Line Number="1182"><![CDATA[	{	// test for reverse_iterator < reverse_iterator]]></Line>
      <Line Number="1183"><![CDATA[	return (_Left._Less(_Right));]]></Line>
      <Line Number="1184"><![CDATA[	}]]></Line>
      <Line Number="1185"><![CDATA[]]></Line>
      <Line Number="1186"><![CDATA[template<class _RanIt1,]]></Line>
      <Line Number="1187"><![CDATA[	class _Base1,]]></Line>
      <Line Number="1188"><![CDATA[	class _RanIt2,]]></Line>
      <Line Number="1189"><![CDATA[	class _Base2> inline]]></Line>
      <Line Number="1190"><![CDATA[	bool operator>(]]></Line>
      <Line Number="1191"><![CDATA[		const _Revranit<_RanIt1, _Base1>& _Left,]]></Line>
      <Line Number="1192"><![CDATA[		const _Revranit<_RanIt2, _Base2>& _Right)]]></Line>
      <Line Number="1193"><![CDATA[	{	// test for reverse_iterator > reverse_iterator]]></Line>
      <Line Number="1194"><![CDATA[	return (_Right < _Left);]]></Line>
      <Line Number="1195"><![CDATA[	}]]></Line>
      <Line Number="1196"><![CDATA[]]></Line>
      <Line Number="1197"><![CDATA[template<class _RanIt1,]]></Line>
      <Line Number="1198"><![CDATA[	class _Base1,]]></Line>
      <Line Number="1199"><![CDATA[	class _RanIt2,]]></Line>
      <Line Number="1200"><![CDATA[	class _Base2> inline]]></Line>
      <Line Number="1201"><![CDATA[	bool operator<=(]]></Line>
      <Line Number="1202"><![CDATA[		const _Revranit<_RanIt1, _Base1>& _Left,]]></Line>
      <Line Number="1203"><![CDATA[		const _Revranit<_RanIt2, _Base2>& _Right)]]></Line>
      <Line Number="1204"><![CDATA[	{	// test for reverse_iterator <= reverse_iterator]]></Line>
      <Line Number="1205"><![CDATA[	return (!(_Right < _Left));]]></Line>
      <Line Number="1206"><![CDATA[	}]]></Line>
      <Line Number="1207"><![CDATA[]]></Line>
      <Line Number="1208"><![CDATA[template<class _RanIt1,]]></Line>
      <Line Number="1209"><![CDATA[	class _Base1,]]></Line>
      <Line Number="1210"><![CDATA[	class _RanIt2,]]></Line>
      <Line Number="1211"><![CDATA[	class _Base2> inline]]></Line>
      <Line Number="1212"><![CDATA[	bool operator>=(]]></Line>
      <Line Number="1213"><![CDATA[		const _Revranit<_RanIt1, _Base1>& _Left,]]></Line>
      <Line Number="1214"><![CDATA[		const _Revranit<_RanIt2, _Base2>& _Right)]]></Line>
      <Line Number="1215"><![CDATA[	{	// test for reverse_iterator >= reverse_iterator]]></Line>
      <Line Number="1216"><![CDATA[	return (!(_Left < _Right));]]></Line>
      <Line Number="1217"><![CDATA[	}]]></Line>
      <Line Number="1218"><![CDATA[]]></Line>
      <Line Number="1219"><![CDATA[		// TEMPLATE CLASS reverse_iterator]]></Line>
      <Line Number="1220"><![CDATA[template<class _RanIt>]]></Line>
      <Line Number="1221"><![CDATA[	class reverse_iterator]]></Line>
      <Line Number="1222"><![CDATA[		: public _Revranit<_RanIt, iterator<]]></Line>
      <Line Number="1223"><![CDATA[			typename iterator_traits<_RanIt>::iterator_category,]]></Line>
      <Line Number="1224"><![CDATA[			typename iterator_traits<_RanIt>::value_type,]]></Line>
      <Line Number="1225"><![CDATA[			typename iterator_traits<_RanIt>::difference_type,]]></Line>
      <Line Number="1226"><![CDATA[			typename iterator_traits<_RanIt>::pointer,]]></Line>
      <Line Number="1227"><![CDATA[			typename iterator_traits<_RanIt>::reference> >]]></Line>
      <Line Number="1228"><![CDATA[	{	// wrap iterator to run it backwards]]></Line>
      <Line Number="1229"><![CDATA[	typedef reverse_iterator<_RanIt> _Myt;]]></Line>
      <Line Number="1230"><![CDATA[	typedef _Revranit<_RanIt, iterator<]]></Line>
      <Line Number="1231"><![CDATA[		typename iterator_traits<_RanIt>::iterator_category,]]></Line>
      <Line Number="1232"><![CDATA[		typename iterator_traits<_RanIt>::value_type,]]></Line>
      <Line Number="1233"><![CDATA[		typename iterator_traits<_RanIt>::difference_type,]]></Line>
      <Line Number="1234"><![CDATA[		typename iterator_traits<_RanIt>::pointer,]]></Line>
      <Line Number="1235"><![CDATA[		typename iterator_traits<_RanIt>::reference> > _Mybase;]]></Line>
      <Line Number="1236"><![CDATA[]]></Line>
      <Line Number="1237"><![CDATA[public:]]></Line>
      <Line Number="1238"><![CDATA[ 	typedef typename iterator_traits<_RanIt>::difference_type difference_type;]]></Line>
      <Line Number="1239"><![CDATA[	typedef typename iterator_traits<_RanIt>::pointer pointer;]]></Line>
      <Line Number="1240"><![CDATA[	typedef typename iterator_traits<_RanIt>::reference reference;]]></Line>
      <Line Number="1241"><![CDATA[	typedef _RanIt iterator_type;]]></Line>
      <Line Number="1242"><![CDATA[]]></Line>
      <Line Number="1243"><![CDATA[	reverse_iterator()]]></Line>
      <Line Number="1244"><![CDATA[		{	// construct with default wrapped iterator]]></Line>
      <Line Number="1245"><![CDATA[		}]]></Line>
      <Line Number="1246"><![CDATA[]]></Line>
      <Line Number="1247"><![CDATA[	explicit reverse_iterator(_RanIt _Right)]]></Line>
      <Line Number="1248"><![CDATA[		: _Mybase(_Right)]]></Line>
      <Line Number="1249"><![CDATA[		{	// construct wrapped iterator from _Right]]></Line>
      <Line Number="1250"><![CDATA[		}]]></Line>
      <Line Number="1251"><![CDATA[]]></Line>
      <Line Number="1252"><![CDATA[	template<class _Other>]]></Line>
      <Line Number="1253"><![CDATA[		reverse_iterator(const reverse_iterator<_Other>& _Right)]]></Line>
      <Line Number="1254"><![CDATA[		: _Mybase(_Right.base())]]></Line>
      <Line Number="1255"><![CDATA[		{	// initialize with compatible base]]></Line>
      <Line Number="1256"><![CDATA[		}]]></Line>
      <Line Number="1257"><![CDATA[]]></Line>
      <Line Number="1258"><![CDATA[	reverse_iterator(_Mybase _Right)]]></Line>
      <Line Number="1259"><![CDATA[		: _Mybase(_Right)]]></Line>
      <Line Number="1260"><![CDATA[		{	// construct wrapped iterator from base object]]></Line>
      <Line Number="1261"><![CDATA[		}]]></Line>
      <Line Number="1262"><![CDATA[]]></Line>
      <Line Number="1263"><![CDATA[	_Myt& operator++()]]></Line>
      <Line Number="1264"><![CDATA[		{	// preincrement]]></Line>
      <Line Number="1265"><![CDATA[		++*((_Mybase *)this);]]></Line>
      <Line Number="1266"><![CDATA[		return (*this);]]></Line>
      <Line Number="1267"><![CDATA[		}]]></Line>
      <Line Number="1268"><![CDATA[]]></Line>
      <Line Number="1269"><![CDATA[	_Myt operator++(int)]]></Line>
      <Line Number="1270"><![CDATA[		{	// postincrement]]></Line>
      <Line Number="1271"><![CDATA[		_Myt _Tmp = *this;]]></Line>
      <Line Number="1272"><![CDATA[		++*this;]]></Line>
      <Line Number="1273"><![CDATA[		return (_Tmp);]]></Line>
      <Line Number="1274"><![CDATA[		}]]></Line>
      <Line Number="1275"><![CDATA[]]></Line>
      <Line Number="1276"><![CDATA[	_Myt& operator--()]]></Line>
      <Line Number="1277"><![CDATA[		{	// predecrement]]></Line>
      <Line Number="1278"><![CDATA[		--*((_Mybase *)this);]]></Line>
      <Line Number="1279"><![CDATA[		return (*this);]]></Line>
      <Line Number="1280"><![CDATA[		}]]></Line>
      <Line Number="1281"><![CDATA[]]></Line>
      <Line Number="1282"><![CDATA[	_Myt operator--(int)]]></Line>
      <Line Number="1283"><![CDATA[		{	// postdecrement]]></Line>
      <Line Number="1284"><![CDATA[		_Myt _Tmp = *this;]]></Line>
      <Line Number="1285"><![CDATA[		--*this;]]></Line>
      <Line Number="1286"><![CDATA[		return (_Tmp);]]></Line>
      <Line Number="1287"><![CDATA[		}]]></Line>
      <Line Number="1288"><![CDATA[]]></Line>
      <Line Number="1289"><![CDATA[	_Myt& operator+=(difference_type _Off)]]></Line>
      <Line Number="1290"><![CDATA[		{	// increment by integer]]></Line>
      <Line Number="1291"><![CDATA[		*((_Mybase *)this) += _Off;]]></Line>
      <Line Number="1292"><![CDATA[		return (*this);]]></Line>
      <Line Number="1293"><![CDATA[		}]]></Line>
      <Line Number="1294"><![CDATA[]]></Line>
      <Line Number="1295"><![CDATA[	_Myt operator+(difference_type _Off) const]]></Line>
      <Line Number="1296"><![CDATA[		{	// return this + integer]]></Line>
      <Line Number="1297"><![CDATA[		_Myt _Tmp = *this;]]></Line>
      <Line Number="1298"><![CDATA[		return (_Tmp += _Off);]]></Line>
      <Line Number="1299"><![CDATA[		}]]></Line>
      <Line Number="1300"><![CDATA[]]></Line>
      <Line Number="1301"><![CDATA[	_Myt& operator-=(difference_type _Off)]]></Line>
      <Line Number="1302"><![CDATA[		{	// decrement by integer]]></Line>
      <Line Number="1303"><![CDATA[		*((_Mybase *)this) -= _Off;]]></Line>
      <Line Number="1304"><![CDATA[		return (*this);]]></Line>
      <Line Number="1305"><![CDATA[		}]]></Line>
      <Line Number="1306"><![CDATA[]]></Line>
      <Line Number="1307"><![CDATA[	_Myt operator-(difference_type _Off) const]]></Line>
      <Line Number="1308"><![CDATA[		{	// return this - integer]]></Line>
      <Line Number="1309"><![CDATA[		_Myt _Tmp = *this;]]></Line>
      <Line Number="1310"><![CDATA[		return (_Tmp -= _Off);]]></Line>
      <Line Number="1311"><![CDATA[		}]]></Line>
      <Line Number="1312"><![CDATA[	};]]></Line>
      <Line Number="1313"><![CDATA[]]></Line>
      <Line Number="1314"><![CDATA[template<class _RanIt>]]></Line>
      <Line Number="1315"><![CDATA[	struct _Is_checked_helper<reverse_iterator<_RanIt> >]]></Line>
      <Line Number="1316"><![CDATA[	: public _Is_checked_helper<_RanIt>]]></Line>
      <Line Number="1317"><![CDATA[	{	// mark reverse_iterator as checked if its underlying iterator is checked]]></Line>
      <Line Number="1318"><![CDATA[	};]]></Line>
      <Line Number="1319"><![CDATA[]]></Line>
      <Line Number="1320"><![CDATA[		// reverse_iterator TEMPLATE OPERATORS]]></Line>
      <Line Number="1321"><![CDATA[template<class _RanIt,]]></Line>
      <Line Number="1322"><![CDATA[	class _Diff> inline]]></Line>
      <Line Number="1323"><![CDATA[	reverse_iterator<_RanIt> operator+(_Diff _Off,]]></Line>
      <Line Number="1324"><![CDATA[		const reverse_iterator<_RanIt>& _Right)]]></Line>
      <Line Number="1325"><![CDATA[	{	// return reverse_iterator + integer]]></Line>
      <Line Number="1326"><![CDATA[	return (_Right + _Off);]]></Line>
      <Line Number="1327"><![CDATA[	}]]></Line>
      <Line Number="1328"><![CDATA[]]></Line>
      <Line Number="1329"><![CDATA[template<class _RanIt1,]]></Line>
      <Line Number="1330"><![CDATA[	class _RanIt2> inline]]></Line>
      <Line Number="1331"><![CDATA[	typename reverse_iterator<_RanIt1>::difference_type]]></Line>
      <Line Number="1332"><![CDATA[		operator-(const reverse_iterator<_RanIt1>& _Left,]]></Line>
      <Line Number="1333"><![CDATA[			const reverse_iterator<_RanIt2>& _Right)]]></Line>
      <Line Number="1334"><![CDATA[	{	// return difference of reverse_iterators]]></Line>
      <Line Number="1335"><![CDATA[	return (_Right.base() - _Left.base());]]></Line>
      <Line Number="1336"><![CDATA[	}]]></Line>
      <Line Number="1337"><![CDATA[]]></Line>
      <Line Number="1338"><![CDATA[template<class _RanIt1,]]></Line>
      <Line Number="1339"><![CDATA[	class _RanIt2> inline]]></Line>
      <Line Number="1340"><![CDATA[	bool operator==(const reverse_iterator<_RanIt1>& _Left,]]></Line>
      <Line Number="1341"><![CDATA[		const reverse_iterator<_RanIt2>& _Right)]]></Line>
      <Line Number="1342"><![CDATA[	{	// test for reverse_iterator equality]]></Line>
      <Line Number="1343"><![CDATA[	return (_Left._Equal(_Right));]]></Line>
      <Line Number="1344"><![CDATA[	}]]></Line>
      <Line Number="1345"><![CDATA[]]></Line>
      <Line Number="1346"><![CDATA[template<class _RanIt1,]]></Line>
      <Line Number="1347"><![CDATA[	class _RanIt2> inline]]></Line>
      <Line Number="1348"><![CDATA[	bool operator!=(const reverse_iterator<_RanIt1>& _Left,]]></Line>
      <Line Number="1349"><![CDATA[		const reverse_iterator<_RanIt2>& _Right)]]></Line>
      <Line Number="1350"><![CDATA[	{	// test for reverse_iterator inequality]]></Line>
      <Line Number="1351"><![CDATA[	return (!(_Left == _Right));]]></Line>
      <Line Number="1352"><![CDATA[	}]]></Line>
      <Line Number="1353"><![CDATA[]]></Line>
      <Line Number="1354"><![CDATA[template<class _RanIt1,]]></Line>
      <Line Number="1355"><![CDATA[	class _RanIt2> inline]]></Line>
      <Line Number="1356"><![CDATA[	bool operator<(const reverse_iterator<_RanIt1>& _Left,]]></Line>
      <Line Number="1357"><![CDATA[		const reverse_iterator<_RanIt2>& _Right)]]></Line>
      <Line Number="1358"><![CDATA[	{	// test for reverse_iterator < reverse_iterator]]></Line>
      <Line Number="1359"><![CDATA[	return (_Left._Less(_Right));]]></Line>
      <Line Number="1360"><![CDATA[	}]]></Line>
      <Line Number="1361"><![CDATA[]]></Line>
      <Line Number="1362"><![CDATA[template<class _RanIt1,]]></Line>
      <Line Number="1363"><![CDATA[	class _RanIt2> inline]]></Line>
      <Line Number="1364"><![CDATA[	bool operator>(const reverse_iterator<_RanIt1>& _Left,]]></Line>
      <Line Number="1365"><![CDATA[		const reverse_iterator<_RanIt2>& _Right)]]></Line>
      <Line Number="1366"><![CDATA[	{	// test for reverse_iterator > reverse_iterator]]></Line>
      <Line Number="1367"><![CDATA[	return (_Right < _Left);]]></Line>
      <Line Number="1368"><![CDATA[	}]]></Line>
      <Line Number="1369"><![CDATA[]]></Line>
      <Line Number="1370"><![CDATA[template<class _RanIt1,]]></Line>
      <Line Number="1371"><![CDATA[	class _RanIt2> inline]]></Line>
      <Line Number="1372"><![CDATA[	bool operator<=(const reverse_iterator<_RanIt1>& _Left,]]></Line>
      <Line Number="1373"><![CDATA[		const reverse_iterator<_RanIt2>& _Right)]]></Line>
      <Line Number="1374"><![CDATA[	{	// test for reverse_iterator <= reverse_iterator]]></Line>
      <Line Number="1375"><![CDATA[	return (!(_Right < _Left));]]></Line>
      <Line Number="1376"><![CDATA[	}]]></Line>
      <Line Number="1377"><![CDATA[]]></Line>
      <Line Number="1378"><![CDATA[template<class _RanIt1,]]></Line>
      <Line Number="1379"><![CDATA[	class _RanIt2> inline]]></Line>
      <Line Number="1380"><![CDATA[	bool operator>=(const reverse_iterator<_RanIt1>& _Left,]]></Line>
      <Line Number="1381"><![CDATA[		const reverse_iterator<_RanIt2>& _Right)]]></Line>
      <Line Number="1382"><![CDATA[	{	// test for reverse_iterator >= reverse_iterator]]></Line>
      <Line Number="1383"><![CDATA[	return (!(_Left < _Right));]]></Line>
      <Line Number="1384"><![CDATA[	}]]></Line>
      <Line Number="1385"><![CDATA[]]></Line>
      <Line Number="1386"><![CDATA[		// TEMPLATE CLASS reverse_bidirectional_iterator (retained)]]></Line>
      <Line Number="1387"><![CDATA[template<class _BidIt,]]></Line>
      <Line Number="1388"><![CDATA[	class _Ty,]]></Line>
      <Line Number="1389"><![CDATA[	class _Reference = _Ty&,]]></Line>
      <Line Number="1390"><![CDATA[	class _Pointer = _Ty *,]]></Line>
      <Line Number="1391"><![CDATA[	class _Diff = ptrdiff_t>]]></Line>
      <Line Number="1392"><![CDATA[	class reverse_bidirectional_iterator]]></Line>
      <Line Number="1393"><![CDATA[		: public iterator<bidirectional_iterator_tag, _Ty, _Diff,]]></Line>
      <Line Number="1394"><![CDATA[			_Pointer, _Reference>]]></Line>
      <Line Number="1395"><![CDATA[	{	// wrap bidirectional iterator to run it backwards]]></Line>
      <Line Number="1396"><![CDATA[public:]]></Line>
      <Line Number="1397"><![CDATA[	typedef reverse_bidirectional_iterator<_BidIt, _Ty, _Reference,]]></Line>
      <Line Number="1398"><![CDATA[		_Pointer, _Diff> _Myt;]]></Line>
      <Line Number="1399"><![CDATA[	typedef _BidIt iterator_type;]]></Line>
      <Line Number="1400"><![CDATA[]]></Line>
      <Line Number="1401"><![CDATA[	reverse_bidirectional_iterator()]]></Line>
      <Line Number="1402"><![CDATA[		{	// construct with default wrapped iterator]]></Line>
      <Line Number="1403"><![CDATA[		}]]></Line>
      <Line Number="1404"><![CDATA[]]></Line>
      <Line Number="1405"><![CDATA[	explicit reverse_bidirectional_iterator(_BidIt _Right)]]></Line>
      <Line Number="1406"><![CDATA[		: current(_Right)]]></Line>
      <Line Number="1407"><![CDATA[		{	// construct wrapped iterator from _Right]]></Line>
      <Line Number="1408"><![CDATA[		}]]></Line>
      <Line Number="1409"><![CDATA[]]></Line>
      <Line Number="1410"><![CDATA[	_BidIt base() const]]></Line>
      <Line Number="1411"><![CDATA[		{	// return wrapped iterator]]></Line>
      <Line Number="1412"><![CDATA[		return (current);]]></Line>
      <Line Number="1413"><![CDATA[		}]]></Line>
      <Line Number="1414"><![CDATA[]]></Line>
      <Line Number="1415"><![CDATA[	_Reference operator*() const]]></Line>
      <Line Number="1416"><![CDATA[		{	// return designated value]]></Line>
      <Line Number="1417"><![CDATA[		_BidIt _Tmp = current;]]></Line>
      <Line Number="1418"><![CDATA[		return (*--_Tmp);]]></Line>
      <Line Number="1419"><![CDATA[		}]]></Line>
      <Line Number="1420"><![CDATA[]]></Line>
      <Line Number="1421"><![CDATA[	_Pointer operator->() const]]></Line>
      <Line Number="1422"><![CDATA[		{	// return pointer to class object]]></Line>
      <Line Number="1423"><![CDATA[		_Reference _Tmp = **this;]]></Line>
      <Line Number="1424"><![CDATA[		return (&_Tmp);]]></Line>
      <Line Number="1425"><![CDATA[		}]]></Line>
      <Line Number="1426"><![CDATA[]]></Line>
      <Line Number="1427"><![CDATA[	_Myt& operator++()]]></Line>
      <Line Number="1428"><![CDATA[		{	// preincrement]]></Line>
      <Line Number="1429"><![CDATA[		--current;]]></Line>
      <Line Number="1430"><![CDATA[		return (*this);]]></Line>
      <Line Number="1431"><![CDATA[		}]]></Line>
      <Line Number="1432"><![CDATA[]]></Line>
      <Line Number="1433"><![CDATA[	_Myt operator++(int)]]></Line>
      <Line Number="1434"><![CDATA[		{	// postincrement]]></Line>
      <Line Number="1435"><![CDATA[		_Myt _Tmp = *this;]]></Line>
      <Line Number="1436"><![CDATA[		--current;]]></Line>
      <Line Number="1437"><![CDATA[		return (_Tmp);]]></Line>
      <Line Number="1438"><![CDATA[		}]]></Line>
      <Line Number="1439"><![CDATA[]]></Line>
      <Line Number="1440"><![CDATA[	_Myt& operator--()]]></Line>
      <Line Number="1441"><![CDATA[		{	// predecrement]]></Line>
      <Line Number="1442"><![CDATA[		++current;]]></Line>
      <Line Number="1443"><![CDATA[		return (*this);]]></Line>
      <Line Number="1444"><![CDATA[		}]]></Line>
      <Line Number="1445"><![CDATA[]]></Line>
      <Line Number="1446"><![CDATA[	_Myt operator--(int)]]></Line>
      <Line Number="1447"><![CDATA[		{	// postdecrement]]></Line>
      <Line Number="1448"><![CDATA[		_Myt _Tmp = *this;]]></Line>
      <Line Number="1449"><![CDATA[		++current;]]></Line>
      <Line Number="1450"><![CDATA[		return (_Tmp);]]></Line>
      <Line Number="1451"><![CDATA[		}]]></Line>
      <Line Number="1452"><![CDATA[]]></Line>
      <Line Number="1453"><![CDATA[	bool operator==(const _Myt& _Right) const]]></Line>
      <Line Number="1454"><![CDATA[		{	// test for iterator equality]]></Line>
      <Line Number="1455"><![CDATA[		return (current == _Right.current);]]></Line>
      <Line Number="1456"><![CDATA[		}]]></Line>
      <Line Number="1457"><![CDATA[]]></Line>
      <Line Number="1458"><![CDATA[	bool operator!=(const _Myt& _Right) const]]></Line>
      <Line Number="1459"><![CDATA[		{	// test for iterator inequality]]></Line>
      <Line Number="1460"><![CDATA[		return (!(*this == _Right));]]></Line>
      <Line Number="1461"><![CDATA[		}]]></Line>
      <Line Number="1462"><![CDATA[]]></Line>
      <Line Number="1463"><![CDATA[protected:]]></Line>
      <Line Number="1464"><![CDATA[	_BidIt current;	// the wrapped iterator]]></Line>
      <Line Number="1465"><![CDATA[	};]]></Line>
      <Line Number="1466"><![CDATA[]]></Line>
      <Line Number="1467"><![CDATA[		// TEMPLATE CLASS _Revbidit]]></Line>
      <Line Number="1468"><![CDATA[template<class _BidIt,]]></Line>
      <Line Number="1469"><![CDATA[	class _BidIt2 = _BidIt>]]></Line>
      <Line Number="1470"><![CDATA[	class _Revbidit]]></Line>
      <Line Number="1471"><![CDATA[		: public iterator<]]></Line>
      <Line Number="1472"><![CDATA[			typename iterator_traits<_BidIt>::iterator_category,]]></Line>
      <Line Number="1473"><![CDATA[			typename iterator_traits<_BidIt>::value_type,]]></Line>
      <Line Number="1474"><![CDATA[			typename iterator_traits<_BidIt>::difference_type,]]></Line>
      <Line Number="1475"><![CDATA[			typename iterator_traits<_BidIt>::pointer,]]></Line>
      <Line Number="1476"><![CDATA[			typename iterator_traits<_BidIt>::reference>]]></Line>
      <Line Number="1477"><![CDATA[	{	// wrap bidirectional iterator to run it backwards]]></Line>
      <Line Number="1478"><![CDATA[public:]]></Line>
      <Line Number="1479"><![CDATA[	typedef _Revbidit<_BidIt, _BidIt2> _Myt;]]></Line>
      <Line Number="1480"><![CDATA[	typedef typename iterator_traits<_BidIt>::difference_type _Diff;]]></Line>
      <Line Number="1481"><![CDATA[	typedef typename iterator_traits<_BidIt>::pointer _Pointer;]]></Line>
      <Line Number="1482"><![CDATA[	typedef typename iterator_traits<_BidIt>::reference _Reference;]]></Line>
      <Line Number="1483"><![CDATA[	typedef _BidIt iterator_type;]]></Line>
      <Line Number="1484"><![CDATA[]]></Line>
      <Line Number="1485"><![CDATA[	_Revbidit()]]></Line>
      <Line Number="1486"><![CDATA[		{	// construct with default wrapped iterator]]></Line>
      <Line Number="1487"><![CDATA[		}]]></Line>
      <Line Number="1488"><![CDATA[]]></Line>
      <Line Number="1489"><![CDATA[	explicit _Revbidit(_BidIt _Right)]]></Line>
      <Line Number="1490"><![CDATA[		: current(_Right)]]></Line>
      <Line Number="1491"><![CDATA[		{	// construct wrapped iterator from _Right]]></Line>
      <Line Number="1492"><![CDATA[		}]]></Line>
      <Line Number="1493"><![CDATA[]]></Line>
      <Line Number="1494"><![CDATA[	_Revbidit(const _Revbidit<_BidIt2>& _Other)]]></Line>
      <Line Number="1495"><![CDATA[		: current (_Other.base())]]></Line>
      <Line Number="1496"><![CDATA[		{	// const converter or copy constructor]]></Line>
      <Line Number="1497"><![CDATA[		}]]></Line>
      <Line Number="1498"><![CDATA[]]></Line>
      <Line Number="1499"><![CDATA[	_BidIt base() const]]></Line>
      <Line Number="1500"><![CDATA[		{	// return wrapped iterator]]></Line>
      <Line Number="1501"><![CDATA[		return (current);]]></Line>
      <Line Number="1502"><![CDATA[		}]]></Line>
      <Line Number="1503"><![CDATA[]]></Line>
      <Line Number="1504"><![CDATA[	_Reference operator*() const]]></Line>
      <Line Number="1505"><![CDATA[		{	// return designated value]]></Line>
      <Line Number="1506"><![CDATA[		_BidIt _Tmp = current;]]></Line>
      <Line Number="1507"><![CDATA[		return (*--_Tmp);]]></Line>
      <Line Number="1508"><![CDATA[		}]]></Line>
      <Line Number="1509"><![CDATA[]]></Line>
      <Line Number="1510"><![CDATA[	_Pointer operator->() const]]></Line>
      <Line Number="1511"><![CDATA[		{	// return pointer to class object]]></Line>
      <Line Number="1512"><![CDATA[		_Reference _Tmp = **this;]]></Line>
      <Line Number="1513"><![CDATA[		return (&_Tmp);]]></Line>
      <Line Number="1514"><![CDATA[		}]]></Line>
      <Line Number="1515"><![CDATA[]]></Line>
      <Line Number="1516"><![CDATA[	_Myt& operator++()]]></Line>
      <Line Number="1517"><![CDATA[		{	// preincrement]]></Line>
      <Line Number="1518"><![CDATA[		--current;]]></Line>
      <Line Number="1519"><![CDATA[		return (*this);]]></Line>
      <Line Number="1520"><![CDATA[		}]]></Line>
      <Line Number="1521"><![CDATA[]]></Line>
      <Line Number="1522"><![CDATA[	_Myt operator++(int)]]></Line>
      <Line Number="1523"><![CDATA[		{	// postincrement]]></Line>
      <Line Number="1524"><![CDATA[		_Myt _Tmp = *this;]]></Line>
      <Line Number="1525"><![CDATA[		--current;]]></Line>
      <Line Number="1526"><![CDATA[		return (_Tmp);]]></Line>
      <Line Number="1527"><![CDATA[		}]]></Line>
      <Line Number="1528"><![CDATA[]]></Line>
      <Line Number="1529"><![CDATA[	_Myt& operator--()]]></Line>
      <Line Number="1530"><![CDATA[		{	// predecrement]]></Line>
      <Line Number="1531"><![CDATA[		++current;]]></Line>
      <Line Number="1532"><![CDATA[		return (*this);]]></Line>
      <Line Number="1533"><![CDATA[		}]]></Line>
      <Line Number="1534"><![CDATA[]]></Line>
      <Line Number="1535"><![CDATA[	_Myt operator--(int)]]></Line>
      <Line Number="1536"><![CDATA[		{	// postdecrement]]></Line>
      <Line Number="1537"><![CDATA[		_Myt _Tmp = *this;]]></Line>
      <Line Number="1538"><![CDATA[		++current;]]></Line>
      <Line Number="1539"><![CDATA[		return (_Tmp);]]></Line>
      <Line Number="1540"><![CDATA[		}]]></Line>
      <Line Number="1541"><![CDATA[]]></Line>
      <Line Number="1542"><![CDATA[	bool operator==(const _Myt& _Right) const]]></Line>
      <Line Number="1543"><![CDATA[		{	// test for iterator equality]]></Line>
      <Line Number="1544"><![CDATA[		return (current == _Right.current);]]></Line>
      <Line Number="1545"><![CDATA[		}]]></Line>
      <Line Number="1546"><![CDATA[]]></Line>
      <Line Number="1547"><![CDATA[	bool operator!=(const _Myt& _Right) const]]></Line>
      <Line Number="1548"><![CDATA[		{	// test for iterator inequality]]></Line>
      <Line Number="1549"><![CDATA[		return (!(*this == _Right));]]></Line>
      <Line Number="1550"><![CDATA[		}]]></Line>
      <Line Number="1551"><![CDATA[]]></Line>
      <Line Number="1552"><![CDATA[protected:]]></Line>
      <Line Number="1553"><![CDATA[	_BidIt current;]]></Line>
      <Line Number="1554"><![CDATA[	};]]></Line>
      <Line Number="1555"><![CDATA[]]></Line>
      <Line Number="1556"><![CDATA[		// TEMPLATE CLASS _Array_const_iterator]]></Line>
      <Line Number="1557"><![CDATA[template<class _Ty,]]></Line>
      <Line Number="1558"><![CDATA[	size_t _Size>]]></Line>
      <Line Number="1559"><![CDATA[	class _Array_const_iterator]]></Line>
      <Line Number="1560"><![CDATA[		: public _Iterator012<random_access_iterator_tag,]]></Line>
      <Line Number="1561"><![CDATA[			_Ty,]]></Line>
      <Line Number="1562"><![CDATA[			ptrdiff_t,]]></Line>
      <Line Number="1563"><![CDATA[			const _Ty *,]]></Line>
      <Line Number="1564"><![CDATA[			const _Ty&,]]></Line>
      <Line Number="1565"><![CDATA[			_Iterator_base>]]></Line>
      <Line Number="1566"><![CDATA[	{	// iterator for nonmutable array]]></Line>
      <Line Number="1567"><![CDATA[public:]]></Line>
      <Line Number="1568"><![CDATA[	typedef _Array_const_iterator<_Ty, _Size> _Myiter;]]></Line>
      <Line Number="1569"><![CDATA[	typedef random_access_iterator_tag iterator_category;]]></Line>
      <Line Number="1570"><![CDATA[]]></Line>
      <Line Number="1571"><![CDATA[	typedef _Ty value_type;]]></Line>
      <Line Number="1572"><![CDATA[	typedef size_t size_type;]]></Line>
      <Line Number="1573"><![CDATA[	typedef ptrdiff_t difference_type;]]></Line>
      <Line Number="1574"><![CDATA[	typedef const _Ty *pointer;]]></Line>
      <Line Number="1575"><![CDATA[	typedef const _Ty& reference;]]></Line>
      <Line Number="1576"><![CDATA[	enum {_EEN_SIZE = _Size};	// helper for expression evaluator]]></Line>
      <Line Number="1577"><![CDATA[	enum {_EEN_IDL =]]></Line>
      <Line Number="1578"><![CDATA[		_ITERATOR_DEBUG_LEVEL};	// helper for expression evaluator]]></Line>
      <Line Number="1579"><![CDATA[]]></Line>
      <Line Number="1580"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 0]]></Line>
      <Line Number="1581"><![CDATA[	_Array_const_iterator()]]></Line>
      <Line Number="1582"><![CDATA[		{	// construct with null pointer]]></Line>
      <Line Number="1583"><![CDATA[		_Ptr = 0;]]></Line>
      <Line Number="1584"><![CDATA[		}]]></Line>
      <Line Number="1585"><![CDATA[]]></Line>
      <Line Number="1586"><![CDATA[	explicit _Array_const_iterator(pointer _Parg, size_t _Off = 0)]]></Line>
      <Line Number="1587"><![CDATA[		{	// construct with pointer and offset]]></Line>
      <Line Number="1588"><![CDATA[		_Ptr = _Parg + _Off;]]></Line>
      <Line Number="1589"><![CDATA[		}]]></Line>
      <Line Number="1590"><![CDATA[]]></Line>
      <Line Number="1591"><![CDATA[	typedef pointer _Unchecked_type;]]></Line>
      <Line Number="1592"><![CDATA[]]></Line>
      <Line Number="1593"><![CDATA[	_Myiter& _Rechecked(_Unchecked_type _Right)]]></Line>
      <Line Number="1594"><![CDATA[		{	// reset from unchecked iterator]]></Line>
      <Line Number="1595"><![CDATA[		_Ptr = _Right;]]></Line>
      <Line Number="1596"><![CDATA[		return (*this);]]></Line>
      <Line Number="1597"><![CDATA[		}]]></Line>
      <Line Number="1598"><![CDATA[]]></Line>
      <Line Number="1599"><![CDATA[	_Unchecked_type _Unchecked() const]]></Line>
      <Line Number="1600"><![CDATA[		{	// make an unchecked iterator]]></Line>
      <Line Number="1601"><![CDATA[		return (_Ptr);]]></Line>
      <Line Number="1602"><![CDATA[		}]]></Line>
      <Line Number="1603"><![CDATA[]]></Line>
      <Line Number="1604"><![CDATA[	reference operator*() const]]></Line>
      <Line Number="1605"><![CDATA[		{	// return designated object]]></Line>
      <Line Number="1606"><![CDATA[		return (*_Ptr);]]></Line>
      <Line Number="1607"><![CDATA[		}]]></Line>
      <Line Number="1608"><![CDATA[]]></Line>
      <Line Number="1609"><![CDATA[	pointer operator->() const]]></Line>
      <Line Number="1610"><![CDATA[		{	// return pointer to class object]]></Line>
      <Line Number="1611"><![CDATA[		return (&**this);]]></Line>
      <Line Number="1612"><![CDATA[		}]]></Line>
      <Line Number="1613"><![CDATA[]]></Line>
      <Line Number="1614"><![CDATA[	_Myiter& operator++()]]></Line>
      <Line Number="1615"><![CDATA[		{	// preincrement]]></Line>
      <Line Number="1616"><![CDATA[		++_Ptr;]]></Line>
      <Line Number="1617"><![CDATA[		return (*this);]]></Line>
      <Line Number="1618"><![CDATA[		}]]></Line>
      <Line Number="1619"><![CDATA[]]></Line>
      <Line Number="1620"><![CDATA[	_Myiter operator++(int)]]></Line>
      <Line Number="1621"><![CDATA[		{	// postincrement]]></Line>
      <Line Number="1622"><![CDATA[		_Myiter _Tmp = *this;]]></Line>
      <Line Number="1623"><![CDATA[		++*this;]]></Line>
      <Line Number="1624"><![CDATA[		return (_Tmp);]]></Line>
      <Line Number="1625"><![CDATA[		}]]></Line>
      <Line Number="1626"><![CDATA[]]></Line>
      <Line Number="1627"><![CDATA[	_Myiter& operator--()]]></Line>
      <Line Number="1628"><![CDATA[		{	// predecrement]]></Line>
      <Line Number="1629"><![CDATA[		--_Ptr;]]></Line>
      <Line Number="1630"><![CDATA[		return (*this);]]></Line>
      <Line Number="1631"><![CDATA[		}]]></Line>
      <Line Number="1632"><![CDATA[]]></Line>
      <Line Number="1633"><![CDATA[	_Myiter operator--(int)]]></Line>
      <Line Number="1634"><![CDATA[		{	// postdecrement]]></Line>
      <Line Number="1635"><![CDATA[		_Myiter _Tmp = *this;]]></Line>
      <Line Number="1636"><![CDATA[		--*this;]]></Line>
      <Line Number="1637"><![CDATA[		return (_Tmp);]]></Line>
      <Line Number="1638"><![CDATA[		}]]></Line>
      <Line Number="1639"><![CDATA[]]></Line>
      <Line Number="1640"><![CDATA[	_Myiter& operator+=(difference_type _Off)]]></Line>
      <Line Number="1641"><![CDATA[		{	// increment by integer]]></Line>
      <Line Number="1642"><![CDATA[		_Ptr += _Off;]]></Line>
      <Line Number="1643"><![CDATA[		return (*this);]]></Line>
      <Line Number="1644"><![CDATA[		}]]></Line>
      <Line Number="1645"><![CDATA[]]></Line>
      <Line Number="1646"><![CDATA[	_Myiter operator+(difference_type _Off) const]]></Line>
      <Line Number="1647"><![CDATA[		{	// return this + integer]]></Line>
      <Line Number="1648"><![CDATA[		_Myiter _Tmp = *this;]]></Line>
      <Line Number="1649"><![CDATA[		return (_Tmp += _Off);]]></Line>
      <Line Number="1650"><![CDATA[		}]]></Line>
      <Line Number="1651"><![CDATA[]]></Line>
      <Line Number="1652"><![CDATA[	_Myiter& operator-=(difference_type _Off)]]></Line>
      <Line Number="1653"><![CDATA[		{	// decrement by integer]]></Line>
      <Line Number="1654"><![CDATA[		return (*this += -_Off);]]></Line>
      <Line Number="1655"><![CDATA[		}]]></Line>
      <Line Number="1656"><![CDATA[]]></Line>
      <Line Number="1657"><![CDATA[	_Myiter operator-(difference_type _Off) const]]></Line>
      <Line Number="1658"><![CDATA[		{	// return this - integer]]></Line>
      <Line Number="1659"><![CDATA[		_Myiter _Tmp = *this;]]></Line>
      <Line Number="1660"><![CDATA[		return (_Tmp -= _Off);]]></Line>
      <Line Number="1661"><![CDATA[		}]]></Line>
      <Line Number="1662"><![CDATA[]]></Line>
      <Line Number="1663"><![CDATA[	difference_type operator-(const _Myiter& _Right) const]]></Line>
      <Line Number="1664"><![CDATA[		{	// return difference of iterators]]></Line>
      <Line Number="1665"><![CDATA[		return (_Ptr - _Right._Ptr);]]></Line>
      <Line Number="1666"><![CDATA[		}]]></Line>
      <Line Number="1667"><![CDATA[]]></Line>
      <Line Number="1668"><![CDATA[	reference operator[](difference_type _Off) const]]></Line>
      <Line Number="1669"><![CDATA[		{	// subscript]]></Line>
      <Line Number="1670"><![CDATA[		return (*(*this + _Off));]]></Line>
      <Line Number="1671"><![CDATA[		}]]></Line>
      <Line Number="1672"><![CDATA[]]></Line>
      <Line Number="1673"><![CDATA[	bool operator==(const _Myiter& _Right) const]]></Line>
      <Line Number="1674"><![CDATA[		{	// test for iterator equality]]></Line>
      <Line Number="1675"><![CDATA[		return (_Ptr == _Right._Ptr);]]></Line>
      <Line Number="1676"><![CDATA[		}]]></Line>
      <Line Number="1677"><![CDATA[]]></Line>
      <Line Number="1678"><![CDATA[	bool operator!=(const _Myiter& _Right) const]]></Line>
      <Line Number="1679"><![CDATA[		{	// test for iterator inequality]]></Line>
      <Line Number="1680"><![CDATA[		return (!(*this == _Right));]]></Line>
      <Line Number="1681"><![CDATA[		}]]></Line>
      <Line Number="1682"><![CDATA[]]></Line>
      <Line Number="1683"><![CDATA[	bool operator<(const _Myiter& _Right) const]]></Line>
      <Line Number="1684"><![CDATA[		{	// test if this < _Right]]></Line>
      <Line Number="1685"><![CDATA[		return (_Ptr < _Right._Ptr);]]></Line>
      <Line Number="1686"><![CDATA[		}]]></Line>
      <Line Number="1687"><![CDATA[]]></Line>
      <Line Number="1688"><![CDATA[	bool operator>(const _Myiter& _Right) const]]></Line>
      <Line Number="1689"><![CDATA[		{	// test if this > _Right]]></Line>
      <Line Number="1690"><![CDATA[		return (_Right < *this);]]></Line>
      <Line Number="1691"><![CDATA[		}]]></Line>
      <Line Number="1692"><![CDATA[]]></Line>
      <Line Number="1693"><![CDATA[	bool operator<=(const _Myiter& _Right) const]]></Line>
      <Line Number="1694"><![CDATA[		{	// test if this <= _Right]]></Line>
      <Line Number="1695"><![CDATA[		return (!(_Right < *this));]]></Line>
      <Line Number="1696"><![CDATA[		}]]></Line>
      <Line Number="1697"><![CDATA[]]></Line>
      <Line Number="1698"><![CDATA[	bool operator>=(const _Myiter& _Right) const]]></Line>
      <Line Number="1699"><![CDATA[		{	// test if this >= _Right]]></Line>
      <Line Number="1700"><![CDATA[		return (!(*this < _Right));]]></Line>
      <Line Number="1701"><![CDATA[		}]]></Line>
      <Line Number="1702"><![CDATA[]]></Line>
      <Line Number="1703"><![CDATA[	pointer _Ptr;	// beginning of array]]></Line>
      <Line Number="1704"><![CDATA[]]></Line>
      <Line Number="1705"><![CDATA[ #else /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="1706"><![CDATA[	_Array_const_iterator()]]></Line>
      <Line Number="1707"><![CDATA[		{	// construct with null pointer]]></Line>
      <Line Number="1708"><![CDATA[		_Ptr = 0;]]></Line>
      <Line Number="1709"><![CDATA[		_Idx = 0;]]></Line>
      <Line Number="1710"><![CDATA[		}]]></Line>
      <Line Number="1711"><![CDATA[]]></Line>
      <Line Number="1712"><![CDATA[	explicit _Array_const_iterator(pointer _Parg, size_t _Off = 0)]]></Line>
      <Line Number="1713"><![CDATA[		{	// construct with pointer and offset]]></Line>
      <Line Number="1714"><![CDATA[		_Ptr = _Parg;]]></Line>
      <Line Number="1715"><![CDATA[		_Idx = _Off;]]></Line>
      <Line Number="1716"><![CDATA[		}]]></Line>
      <Line Number="1717"><![CDATA[]]></Line>
      <Line Number="1718"><![CDATA[	typedef pointer _Unchecked_type;]]></Line>
      <Line Number="1719"><![CDATA[]]></Line>
      <Line Number="1720"><![CDATA[	_Myiter& _Rechecked(_Unchecked_type _Right)]]></Line>
      <Line Number="1721"><![CDATA[		{	// reset from unchecked iterator]]></Line>
      <Line Number="1722"><![CDATA[		_Idx = _Right - _Ptr;]]></Line>
      <Line Number="1723"><![CDATA[		return (*this);]]></Line>
      <Line Number="1724"><![CDATA[		}]]></Line>
      <Line Number="1725"><![CDATA[]]></Line>
      <Line Number="1726"><![CDATA[	_Unchecked_type _Unchecked() const]]></Line>
      <Line Number="1727"><![CDATA[		{	// make an unchecked iterator]]></Line>
      <Line Number="1728"><![CDATA[		return (_Ptr + _Idx);]]></Line>
      <Line Number="1729"><![CDATA[		}]]></Line>
      <Line Number="1730"><![CDATA[]]></Line>
      <Line Number="1731"><![CDATA[	reference operator*() const]]></Line>
      <Line Number="1732"><![CDATA[		{	// return designated object]]></Line>
      <Line Number="1733"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 2]]></Line>
      <Line Number="1734"><![CDATA[		if (_Ptr == 0]]></Line>
      <Line Number="1735"><![CDATA[			|| _Size <= _Idx)]]></Line>
      <Line Number="1736"><![CDATA[			{	// report error]]></Line>
      <Line Number="1737"><![CDATA[			_DEBUG_ERROR("array iterator not dereferencable");]]></Line>
      <Line Number="1738"><![CDATA[			_SCL_SECURE_OUT_OF_RANGE;]]></Line>
      <Line Number="1739"><![CDATA[			}]]></Line>
      <Line Number="1740"><![CDATA[]]></Line>
      <Line Number="1741"><![CDATA[ #elif _ITERATOR_DEBUG_LEVEL == 1]]></Line>
      <Line Number="1742"><![CDATA[		_SCL_SECURE_VALIDATE(_Ptr != 0);]]></Line>
      <Line Number="1743"><![CDATA[		_SCL_SECURE_VALIDATE_RANGE(_Idx < _Size);]]></Line>
      <Line Number="1744"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL */]]></Line>
      <Line Number="1745"><![CDATA[]]></Line>
      <Line Number="1746"><![CDATA[		__analysis_assume(_Ptr != 0);]]></Line>
      <Line Number="1747"><![CDATA[]]></Line>
      <Line Number="1748"><![CDATA[		return (_Ptr[_Idx]);]]></Line>
      <Line Number="1749"><![CDATA[		}]]></Line>
      <Line Number="1750"><![CDATA[]]></Line>
      <Line Number="1751"><![CDATA[	pointer operator->() const]]></Line>
      <Line Number="1752"><![CDATA[		{	// return pointer to class object]]></Line>
      <Line Number="1753"><![CDATA[		return (&**this);]]></Line>
      <Line Number="1754"><![CDATA[		}]]></Line>
      <Line Number="1755"><![CDATA[]]></Line>
      <Line Number="1756"><![CDATA[	_Myiter& operator++()]]></Line>
      <Line Number="1757"><![CDATA[		{	// preincrement]]></Line>
      <Line Number="1758"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 2]]></Line>
      <Line Number="1759"><![CDATA[		if (_Ptr == 0]]></Line>
      <Line Number="1760"><![CDATA[			|| _Size <= _Idx)]]></Line>
      <Line Number="1761"><![CDATA[			{	// report error]]></Line>
      <Line Number="1762"><![CDATA[			_DEBUG_ERROR("array iterator not incrementable");]]></Line>
      <Line Number="1763"><![CDATA[			_SCL_SECURE_OUT_OF_RANGE;]]></Line>
      <Line Number="1764"><![CDATA[			}]]></Line>
      <Line Number="1765"><![CDATA[]]></Line>
      <Line Number="1766"><![CDATA[ #elif _ITERATOR_DEBUG_LEVEL == 1]]></Line>
      <Line Number="1767"><![CDATA[		_SCL_SECURE_VALIDATE(_Ptr != 0);]]></Line>
      <Line Number="1768"><![CDATA[		_SCL_SECURE_VALIDATE_RANGE(_Idx < _Size);]]></Line>
      <Line Number="1769"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL */]]></Line>
      <Line Number="1770"><![CDATA[]]></Line>
      <Line Number="1771"><![CDATA[		++_Idx;]]></Line>
      <Line Number="1772"><![CDATA[		return (*this);]]></Line>
      <Line Number="1773"><![CDATA[		}]]></Line>
      <Line Number="1774"><![CDATA[]]></Line>
      <Line Number="1775"><![CDATA[	_Myiter operator++(int)]]></Line>
      <Line Number="1776"><![CDATA[		{	// postincrement]]></Line>
      <Line Number="1777"><![CDATA[		_Myiter _Tmp = *this;]]></Line>
      <Line Number="1778"><![CDATA[		++*this;]]></Line>
      <Line Number="1779"><![CDATA[		return (_Tmp);]]></Line>
      <Line Number="1780"><![CDATA[		}]]></Line>
      <Line Number="1781"><![CDATA[]]></Line>
      <Line Number="1782"><![CDATA[	_Myiter& operator--()]]></Line>
      <Line Number="1783"><![CDATA[		{	// predecrement]]></Line>
      <Line Number="1784"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 2]]></Line>
      <Line Number="1785"><![CDATA[		if (_Ptr == 0]]></Line>
      <Line Number="1786"><![CDATA[			|| _Idx <= 0)]]></Line>
      <Line Number="1787"><![CDATA[			{	// report error]]></Line>
      <Line Number="1788"><![CDATA[			_DEBUG_ERROR("array iterator not decrementable");]]></Line>
      <Line Number="1789"><![CDATA[			_SCL_SECURE_OUT_OF_RANGE;]]></Line>
      <Line Number="1790"><![CDATA[			}]]></Line>
      <Line Number="1791"><![CDATA[]]></Line>
      <Line Number="1792"><![CDATA[ #elif _ITERATOR_DEBUG_LEVEL == 1]]></Line>
      <Line Number="1793"><![CDATA[		_SCL_SECURE_VALIDATE(_Ptr != 0);]]></Line>
      <Line Number="1794"><![CDATA[		_SCL_SECURE_VALIDATE_RANGE(0 < _Idx);]]></Line>
      <Line Number="1795"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL */]]></Line>
      <Line Number="1796"><![CDATA[]]></Line>
      <Line Number="1797"><![CDATA[		--_Idx;]]></Line>
      <Line Number="1798"><![CDATA[		return (*this);]]></Line>
      <Line Number="1799"><![CDATA[		}]]></Line>
      <Line Number="1800"><![CDATA[]]></Line>
      <Line Number="1801"><![CDATA[	_Myiter operator--(int)]]></Line>
      <Line Number="1802"><![CDATA[		{	// postdecrement]]></Line>
      <Line Number="1803"><![CDATA[		_Myiter _Tmp = *this;]]></Line>
      <Line Number="1804"><![CDATA[		--*this;]]></Line>
      <Line Number="1805"><![CDATA[		return (_Tmp);]]></Line>
      <Line Number="1806"><![CDATA[		}]]></Line>
      <Line Number="1807"><![CDATA[]]></Line>
      <Line Number="1808"><![CDATA[	_Myiter& operator+=(difference_type _Off)]]></Line>
      <Line Number="1809"><![CDATA[		{	// increment by integer]]></Line>
      <Line Number="1810"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 2]]></Line>
      <Line Number="1811"><![CDATA[		if (_Size < _Idx + _Off)]]></Line>
      <Line Number="1812"><![CDATA[			{	// report error]]></Line>
      <Line Number="1813"><![CDATA[			_DEBUG_ERROR("array iterator + offset out of range");]]></Line>
      <Line Number="1814"><![CDATA[			_SCL_SECURE_OUT_OF_RANGE;]]></Line>
      <Line Number="1815"><![CDATA[			}]]></Line>
      <Line Number="1816"><![CDATA[]]></Line>
      <Line Number="1817"><![CDATA[ #elif _ITERATOR_DEBUG_LEVEL == 1]]></Line>
      <Line Number="1818"><![CDATA[		_SCL_SECURE_VALIDATE_RANGE(_Idx + _Off <= _Size);]]></Line>
      <Line Number="1819"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL */]]></Line>
      <Line Number="1820"><![CDATA[]]></Line>
      <Line Number="1821"><![CDATA[		_Idx += _Off;]]></Line>
      <Line Number="1822"><![CDATA[		return (*this);]]></Line>
      <Line Number="1823"><![CDATA[		}]]></Line>
      <Line Number="1824"><![CDATA[]]></Line>
      <Line Number="1825"><![CDATA[	_Myiter operator+(difference_type _Off) const]]></Line>
      <Line Number="1826"><![CDATA[		{	// return this + integer]]></Line>
      <Line Number="1827"><![CDATA[		_Myiter _Tmp = *this;]]></Line>
      <Line Number="1828"><![CDATA[		return (_Tmp += _Off);]]></Line>
      <Line Number="1829"><![CDATA[		}]]></Line>
      <Line Number="1830"><![CDATA[]]></Line>
      <Line Number="1831"><![CDATA[	_Myiter& operator-=(difference_type _Off)]]></Line>
      <Line Number="1832"><![CDATA[		{	// decrement by integer]]></Line>
      <Line Number="1833"><![CDATA[		return (*this += -_Off);]]></Line>
      <Line Number="1834"><![CDATA[		}]]></Line>
      <Line Number="1835"><![CDATA[]]></Line>
      <Line Number="1836"><![CDATA[	_Myiter operator-(difference_type _Off) const]]></Line>
      <Line Number="1837"><![CDATA[		{	// return this - integer]]></Line>
      <Line Number="1838"><![CDATA[		_Myiter _Tmp = *this;]]></Line>
      <Line Number="1839"><![CDATA[		return (_Tmp -= _Off);]]></Line>
      <Line Number="1840"><![CDATA[		}]]></Line>
      <Line Number="1841"><![CDATA[]]></Line>
      <Line Number="1842"><![CDATA[	difference_type operator-(const _Myiter& _Right) const]]></Line>
      <Line Number="1843"><![CDATA[		{	// return difference of iterators]]></Line>
      <Line Number="1844"><![CDATA[		_Compat(_Right);]]></Line>
      <Line Number="1845"><![CDATA[		return (_Idx < _Right._Idx]]></Line>
      <Line Number="1846"><![CDATA[			? -(difference_type)(_Right._Idx - _Idx)]]></Line>
      <Line Number="1847"><![CDATA[			: (difference_type)_Idx - _Right._Idx);]]></Line>
      <Line Number="1848"><![CDATA[		}]]></Line>
      <Line Number="1849"><![CDATA[]]></Line>
      <Line Number="1850"><![CDATA[	reference operator[](difference_type _Off) const]]></Line>
      <Line Number="1851"><![CDATA[		{	// subscript]]></Line>
      <Line Number="1852"><![CDATA[		return (*(*this + _Off));]]></Line>
      <Line Number="1853"><![CDATA[		}]]></Line>
      <Line Number="1854"><![CDATA[]]></Line>
      <Line Number="1855"><![CDATA[	bool operator==(const _Myiter& _Right) const]]></Line>
      <Line Number="1856"><![CDATA[		{	// test for iterator equality]]></Line>
      <Line Number="1857"><![CDATA[		_Compat(_Right);]]></Line>
      <Line Number="1858"><![CDATA[		return (_Idx == _Right._Idx);]]></Line>
      <Line Number="1859"><![CDATA[		}]]></Line>
      <Line Number="1860"><![CDATA[]]></Line>
      <Line Number="1861"><![CDATA[	bool operator!=(const _Myiter& _Right) const]]></Line>
      <Line Number="1862"><![CDATA[		{	// test for iterator inequality]]></Line>
      <Line Number="1863"><![CDATA[		return (!(*this == _Right));]]></Line>
      <Line Number="1864"><![CDATA[		}]]></Line>
      <Line Number="1865"><![CDATA[]]></Line>
      <Line Number="1866"><![CDATA[	bool operator<(const _Myiter& _Right) const]]></Line>
      <Line Number="1867"><![CDATA[		{	// test if this < _Right]]></Line>
      <Line Number="1868"><![CDATA[		_Compat(_Right);]]></Line>
      <Line Number="1869"><![CDATA[		return (_Idx < _Right._Idx);]]></Line>
      <Line Number="1870"><![CDATA[		}]]></Line>
      <Line Number="1871"><![CDATA[]]></Line>
      <Line Number="1872"><![CDATA[	bool operator>(const _Myiter& _Right) const]]></Line>
      <Line Number="1873"><![CDATA[		{	// test if this > _Right]]></Line>
      <Line Number="1874"><![CDATA[		return (_Right < *this);]]></Line>
      <Line Number="1875"><![CDATA[		}]]></Line>
      <Line Number="1876"><![CDATA[]]></Line>
      <Line Number="1877"><![CDATA[	bool operator<=(const _Myiter& _Right) const]]></Line>
      <Line Number="1878"><![CDATA[		{	// test if this <= _Right]]></Line>
      <Line Number="1879"><![CDATA[		return (!(_Right < *this));]]></Line>
      <Line Number="1880"><![CDATA[		}]]></Line>
      <Line Number="1881"><![CDATA[]]></Line>
      <Line Number="1882"><![CDATA[	bool operator>=(const _Myiter& _Right) const]]></Line>
      <Line Number="1883"><![CDATA[		{	// test if this >= _Right]]></Line>
      <Line Number="1884"><![CDATA[		return (!(*this < _Right));]]></Line>
      <Line Number="1885"><![CDATA[		}]]></Line>
      <Line Number="1886"><![CDATA[]]></Line>
      <Line Number="1887"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 2]]></Line>
      <Line Number="1888"><![CDATA[	void _Compat(const _Myiter& _Right) const]]></Line>
      <Line Number="1889"><![CDATA[		{	// test for compatible iterator pair]]></Line>
      <Line Number="1890"><![CDATA[		if (_Ptr != _Right._Ptr)]]></Line>
      <Line Number="1891"><![CDATA[			{	// report error]]></Line>
      <Line Number="1892"><![CDATA[			_DEBUG_ERROR("array iterators incompatible");]]></Line>
      <Line Number="1893"><![CDATA[			_SCL_SECURE_INVALID_ARGUMENT;]]></Line>
      <Line Number="1894"><![CDATA[			}]]></Line>
      <Line Number="1895"><![CDATA[		}]]></Line>
      <Line Number="1896"><![CDATA[]]></Line>
      <Line Number="1897"><![CDATA[ #elif _ITERATOR_DEBUG_LEVEL == 1]]></Line>
      <Line Number="1898"><![CDATA[	void _Compat(const _Myiter& _Right) const]]></Line>
      <Line Number="1899"><![CDATA[		{	// test for compatible iterator pair]]></Line>
      <Line Number="1900"><![CDATA[		_SCL_SECURE_VALIDATE_RANGE(_Ptr == _Right._Ptr);]]></Line>
      <Line Number="1901"><![CDATA[		}]]></Line>
      <Line Number="1902"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL */]]></Line>
      <Line Number="1903"><![CDATA[]]></Line>
      <Line Number="1904"><![CDATA[	pointer _Ptr;	// beginning of array]]></Line>
      <Line Number="1905"><![CDATA[	size_t _Idx;	// offset into array]]></Line>
      <Line Number="1906"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="1907"><![CDATA[	};]]></Line>
      <Line Number="1908"><![CDATA[]]></Line>
      <Line Number="1909"><![CDATA[template<class _Ty,]]></Line>
      <Line Number="1910"><![CDATA[	size_t _Size> inline]]></Line>
      <Line Number="1911"><![CDATA[	typename _Array_const_iterator<_Ty, _Size>::_Unchecked_type]]></Line>
      <Line Number="1912"><![CDATA[		_Unchecked(_Array_const_iterator<_Ty, _Size> _Iter)]]></Line>
      <Line Number="1913"><![CDATA[	{	// convert to unchecked]]></Line>
      <Line Number="1914"><![CDATA[	return (_Iter._Unchecked());]]></Line>
      <Line Number="1915"><![CDATA[	}]]></Line>
      <Line Number="1916"><![CDATA[]]></Line>
      <Line Number="1917"><![CDATA[template<class _Ty,]]></Line>
      <Line Number="1918"><![CDATA[	size_t _Size> inline]]></Line>
      <Line Number="1919"><![CDATA[	_Array_const_iterator<_Ty, _Size>&]]></Line>
      <Line Number="1920"><![CDATA[		_Rechecked(_Array_const_iterator<_Ty, _Size>& _Iter,]]></Line>
      <Line Number="1921"><![CDATA[			typename _Array_const_iterator<_Ty, _Size>]]></Line>
      <Line Number="1922"><![CDATA[				::_Unchecked_type _Right)]]></Line>
      <Line Number="1923"><![CDATA[	{	// convert to checked]]></Line>
      <Line Number="1924"><![CDATA[	return (_Iter._Rechecked(_Right));]]></Line>
      <Line Number="1925"><![CDATA[	}]]></Line>
      <Line Number="1926"><![CDATA[]]></Line>
      <Line Number="1927"><![CDATA[template<class _Ty,]]></Line>
      <Line Number="1928"><![CDATA[	size_t _Size> inline]]></Line>
      <Line Number="1929"><![CDATA[	_Array_const_iterator<_Ty, _Size> operator+(]]></Line>
      <Line Number="1930"><![CDATA[		typename _Array_const_iterator<_Ty, _Size>::difference_type _Off,]]></Line>
      <Line Number="1931"><![CDATA[		_Array_const_iterator<_Ty, _Size> _Next)]]></Line>
      <Line Number="1932"><![CDATA[	{	// add offset to iterator]]></Line>
      <Line Number="1933"><![CDATA[	return (_Next += _Off);]]></Line>
      <Line Number="1934"><![CDATA[	}]]></Line>
      <Line Number="1935"><![CDATA[]]></Line>
      <Line Number="1936"><![CDATA[		// TEMPLATE CLASS _Array_iterator]]></Line>
      <Line Number="1937"><![CDATA[template<class _Ty,]]></Line>
      <Line Number="1938"><![CDATA[	size_t _Size>]]></Line>
      <Line Number="1939"><![CDATA[	class _Array_iterator]]></Line>
      <Line Number="1940"><![CDATA[		: public _Array_const_iterator<_Ty, _Size>]]></Line>
      <Line Number="1941"><![CDATA[	{	// iterator for mutable array]]></Line>
      <Line Number="1942"><![CDATA[public:]]></Line>
      <Line Number="1943"><![CDATA[	typedef _Array_iterator<_Ty, _Size> _Myiter;]]></Line>
      <Line Number="1944"><![CDATA[	typedef _Array_const_iterator<_Ty, _Size> _Mybase;]]></Line>
      <Line Number="1945"><![CDATA[	typedef random_access_iterator_tag iterator_category;]]></Line>
      <Line Number="1946"><![CDATA[]]></Line>
      <Line Number="1947"><![CDATA[	typedef _Ty value_type;]]></Line>
      <Line Number="1948"><![CDATA[	typedef size_t size_type;]]></Line>
      <Line Number="1949"><![CDATA[	typedef ptrdiff_t difference_type;]]></Line>
      <Line Number="1950"><![CDATA[	typedef _Ty *pointer;]]></Line>
      <Line Number="1951"><![CDATA[	typedef _Ty& reference;]]></Line>
      <Line Number="1952"><![CDATA[]]></Line>
      <Line Number="1953"><![CDATA[	_Array_iterator()]]></Line>
      <Line Number="1954"><![CDATA[		{	// construct with null pointer]]></Line>
      <Line Number="1955"><![CDATA[		}]]></Line>
      <Line Number="1956"><![CDATA[]]></Line>
      <Line Number="1957"><![CDATA[	explicit _Array_iterator(pointer _Parg, size_t _Off = 0)]]></Line>
      <Line Number="1958"><![CDATA[		: _Mybase(_Parg, _Off)]]></Line>
      <Line Number="1959"><![CDATA[		{	// construct with pointer and offset]]></Line>
      <Line Number="1960"><![CDATA[		}]]></Line>
      <Line Number="1961"><![CDATA[	enum {_EEN_SIZE = _Size};	// helper for expression evaluator]]></Line>
      <Line Number="1962"><![CDATA[	enum {_EEN_IDL =]]></Line>
      <Line Number="1963"><![CDATA[		_ITERATOR_DEBUG_LEVEL};	// helper for expression evaluator]]></Line>
      <Line Number="1964"><![CDATA[]]></Line>
      <Line Number="1965"><![CDATA[	typedef pointer _Unchecked_type;]]></Line>
      <Line Number="1966"><![CDATA[]]></Line>
      <Line Number="1967"><![CDATA[	_Myiter& _Rechecked(_Unchecked_type _Right)]]></Line>
      <Line Number="1968"><![CDATA[		{	// reset from unchecked iterator]]></Line>
      <Line Number="1969"><![CDATA[		((_Mybase *)this)->_Rechecked(_Right);]]></Line>
      <Line Number="1970"><![CDATA[		return (*this);]]></Line>
      <Line Number="1971"><![CDATA[		}]]></Line>
      <Line Number="1972"><![CDATA[]]></Line>
      <Line Number="1973"><![CDATA[	_Unchecked_type _Unchecked() const]]></Line>
      <Line Number="1974"><![CDATA[		{	// make an unchecked iterator]]></Line>
      <Line Number="1975"><![CDATA[		return ((pointer)((_Mybase *)this)->_Unchecked());]]></Line>
      <Line Number="1976"><![CDATA[		}]]></Line>
      <Line Number="1977"><![CDATA[]]></Line>
      <Line Number="1978"><![CDATA[	reference operator*() const]]></Line>
      <Line Number="1979"><![CDATA[		{	// return designated object]]></Line>
      <Line Number="1980"><![CDATA[		return ((reference)**(_Mybase *)this);]]></Line>
      <Line Number="1981"><![CDATA[		}]]></Line>
      <Line Number="1982"><![CDATA[]]></Line>
      <Line Number="1983"><![CDATA[	pointer operator->() const]]></Line>
      <Line Number="1984"><![CDATA[		{	// return pointer to class object]]></Line>
      <Line Number="1985"><![CDATA[		return (&**this);]]></Line>
      <Line Number="1986"><![CDATA[		}]]></Line>
      <Line Number="1987"><![CDATA[]]></Line>
      <Line Number="1988"><![CDATA[	_Myiter& operator++()]]></Line>
      <Line Number="1989"><![CDATA[		{	// preincrement]]></Line>
      <Line Number="1990"><![CDATA[		++*(_Mybase *)this;]]></Line>
      <Line Number="1991"><![CDATA[		return (*this);]]></Line>
      <Line Number="1992"><![CDATA[		}]]></Line>
      <Line Number="1993"><![CDATA[]]></Line>
      <Line Number="1994"><![CDATA[	_Myiter operator++(int)]]></Line>
      <Line Number="1995"><![CDATA[		{	// postincrement]]></Line>
      <Line Number="1996"><![CDATA[		_Myiter _Tmp = *this;]]></Line>
      <Line Number="1997"><![CDATA[		++*this;]]></Line>
      <Line Number="1998"><![CDATA[		return (_Tmp);]]></Line>
      <Line Number="1999"><![CDATA[		}]]></Line>
      <Line Number="2000"><![CDATA[]]></Line>
      <Line Number="2001"><![CDATA[	_Myiter& operator--()]]></Line>
      <Line Number="2002"><![CDATA[		{	// predecrement]]></Line>
      <Line Number="2003"><![CDATA[		--*(_Mybase *)this;]]></Line>
      <Line Number="2004"><![CDATA[		return (*this);]]></Line>
      <Line Number="2005"><![CDATA[		}]]></Line>
      <Line Number="2006"><![CDATA[]]></Line>
      <Line Number="2007"><![CDATA[	_Myiter operator--(int)]]></Line>
      <Line Number="2008"><![CDATA[		{	// postdecrement]]></Line>
      <Line Number="2009"><![CDATA[		_Myiter _Tmp = *this;]]></Line>
      <Line Number="2010"><![CDATA[		--*this;]]></Line>
      <Line Number="2011"><![CDATA[		return (_Tmp);]]></Line>
      <Line Number="2012"><![CDATA[		}]]></Line>
      <Line Number="2013"><![CDATA[]]></Line>
      <Line Number="2014"><![CDATA[	_Myiter& operator+=(difference_type _Off)]]></Line>
      <Line Number="2015"><![CDATA[		{	// increment by integer]]></Line>
      <Line Number="2016"><![CDATA[		*(_Mybase *)this += _Off;]]></Line>
      <Line Number="2017"><![CDATA[		return (*this);]]></Line>
      <Line Number="2018"><![CDATA[		}]]></Line>
      <Line Number="2019"><![CDATA[]]></Line>
      <Line Number="2020"><![CDATA[	_Myiter operator+(difference_type _Off) const]]></Line>
      <Line Number="2021"><![CDATA[		{	// return this + integer]]></Line>
      <Line Number="2022"><![CDATA[		_Myiter _Tmp = *this;]]></Line>
      <Line Number="2023"><![CDATA[		return (_Tmp += _Off);]]></Line>
      <Line Number="2024"><![CDATA[		}]]></Line>
      <Line Number="2025"><![CDATA[]]></Line>
      <Line Number="2026"><![CDATA[	_Myiter& operator-=(difference_type _Off)]]></Line>
      <Line Number="2027"><![CDATA[		{	// decrement by integer]]></Line>
      <Line Number="2028"><![CDATA[		return (*this += -_Off);]]></Line>
      <Line Number="2029"><![CDATA[		}]]></Line>
      <Line Number="2030"><![CDATA[]]></Line>
      <Line Number="2031"><![CDATA[	_Myiter operator-(difference_type _Off) const]]></Line>
      <Line Number="2032"><![CDATA[		{	// return this - integer]]></Line>
      <Line Number="2033"><![CDATA[		_Myiter _Tmp = *this;]]></Line>
      <Line Number="2034"><![CDATA[		return (_Tmp -= _Off);]]></Line>
      <Line Number="2035"><![CDATA[		}]]></Line>
      <Line Number="2036"><![CDATA[]]></Line>
      <Line Number="2037"><![CDATA[	difference_type operator-(const _Mybase& _Right) const]]></Line>
      <Line Number="2038"><![CDATA[		{	// return difference of iterators]]></Line>
      <Line Number="2039"><![CDATA[		return (*(_Mybase *)this - _Right);]]></Line>
      <Line Number="2040"><![CDATA[		}]]></Line>
      <Line Number="2041"><![CDATA[]]></Line>
      <Line Number="2042"><![CDATA[	reference operator[](difference_type _Off) const]]></Line>
      <Line Number="2043"><![CDATA[		{	// subscript]]></Line>
      <Line Number="2044"><![CDATA[		return (*(*this + _Off));]]></Line>
      <Line Number="2045"><![CDATA[		}]]></Line>
      <Line Number="2046"><![CDATA[	};]]></Line>
      <Line Number="2047"><![CDATA[]]></Line>
      <Line Number="2048"><![CDATA[template<class _Ty,]]></Line>
      <Line Number="2049"><![CDATA[	size_t _Size> inline]]></Line>
      <Line Number="2050"><![CDATA[	typename _Array_iterator<_Ty, _Size>::_Unchecked_type]]></Line>
      <Line Number="2051"><![CDATA[		_Unchecked(_Array_iterator<_Ty, _Size> _Iter)]]></Line>
      <Line Number="2052"><![CDATA[	{	// convert to unchecked]]></Line>
      <Line Number="2053"><![CDATA[	return (_Iter._Unchecked());]]></Line>
      <Line Number="2054"><![CDATA[	}]]></Line>
      <Line Number="2055"><![CDATA[]]></Line>
      <Line Number="2056"><![CDATA[template<class _Ty,]]></Line>
      <Line Number="2057"><![CDATA[	size_t _Size> inline]]></Line>
      <Line Number="2058"><![CDATA[	_Array_iterator<_Ty, _Size>&]]></Line>
      <Line Number="2059"><![CDATA[		_Rechecked(_Array_iterator<_Ty, _Size>& _Iter,]]></Line>
      <Line Number="2060"><![CDATA[			typename _Array_iterator<_Ty, _Size>]]></Line>
      <Line Number="2061"><![CDATA[				::_Unchecked_type _Right)]]></Line>
      <Line Number="2062"><![CDATA[	{	// convert to checked]]></Line>
      <Line Number="2063"><![CDATA[	return (_Iter._Rechecked(_Right));]]></Line>
      <Line Number="2064"><![CDATA[	}]]></Line>
      <Line Number="2065"><![CDATA[]]></Line>
      <Line Number="2066"><![CDATA[template<class _Ty,]]></Line>
      <Line Number="2067"><![CDATA[	size_t _Size> inline]]></Line>
      <Line Number="2068"><![CDATA[	_Array_iterator<_Ty, _Size> operator+(]]></Line>
      <Line Number="2069"><![CDATA[		typename _Array_iterator<_Ty, _Size>::difference_type _Off,]]></Line>
      <Line Number="2070"><![CDATA[		_Array_iterator<_Ty, _Size> _Next)]]></Line>
      <Line Number="2071"><![CDATA[	{	// add offset to iterator]]></Line>
      <Line Number="2072"><![CDATA[	return (_Next += _Off);]]></Line>
      <Line Number="2073"><![CDATA[	}]]></Line>
      <Line Number="2074"><![CDATA[]]></Line>
      <Line Number="2075"><![CDATA[		//	ALGORITHM STUFF (from <algorithm>)]]></Line>
      <Line Number="2076"><![CDATA[		// TEMPLATE FUNCTION max]]></Line>
      <Line Number="2077"><![CDATA[template<class _Ty> inline]]></Line>
      <Line Number="2078"><![CDATA[	const _Ty& (max)(const _Ty& _Left, const _Ty& _Right)]]></Line>
      <Line Number="2079"><![CDATA[	{	// return larger of _Left and _Right]]></Line>
      <Line Number="2080"><![CDATA[	return (_DEBUG_LT(_Left, _Right) ? _Right : _Left);]]></Line>
      <Line Number="2081"><![CDATA[	}]]></Line>
      <Line Number="2082"><![CDATA[]]></Line>
      <Line Number="2083"><![CDATA[		// TEMPLATE FUNCTION max WITH PRED]]></Line>
      <Line Number="2084"><![CDATA[template<class _Ty,]]></Line>
      <Line Number="2085"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="2086"><![CDATA[	const _Ty& (max)(const _Ty& _Left, const _Ty& _Right, _Pr _Pred)]]></Line>
      <Line Number="2087"><![CDATA[	{	// return larger of _Left and _Right using _Pred]]></Line>
      <Line Number="2088"><![CDATA[	return (_DEBUG_LT_PRED(_Pred, _Left, _Right) ? _Right : _Left);]]></Line>
      <Line Number="2089"><![CDATA[	}]]></Line>
      <Line Number="2090"><![CDATA[]]></Line>
      <Line Number="2091"><![CDATA[		// TEMPLATE FUNCTION min]]></Line>
      <Line Number="2092"><![CDATA[template<class _Ty> inline]]></Line>
      <Line Number="2093"><![CDATA[	const _Ty& (min)(const _Ty& _Left, const _Ty& _Right)]]></Line>
      <Line Number="2094"><![CDATA[	{	// return smaller of _Left and _Right]]></Line>
      <Line Number="2095"><![CDATA[	return (_DEBUG_LT(_Right, _Left) ? _Right : _Left);]]></Line>
      <Line Number="2096"><![CDATA[	}]]></Line>
      <Line Number="2097"><![CDATA[]]></Line>
      <Line Number="2098"><![CDATA[		// TEMPLATE FUNCTION min WITH PRED]]></Line>
      <Line Number="2099"><![CDATA[template<class _Ty,]]></Line>
      <Line Number="2100"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="2101"><![CDATA[	const _Ty& (min)(const _Ty& _Left, const _Ty& _Right, _Pr _Pred)]]></Line>
      <Line Number="2102"><![CDATA[	{	// return smaller of _Left and _Right using _Pred]]></Line>
      <Line Number="2103"><![CDATA[	return (_DEBUG_LT_PRED(_Pred, _Right, _Left) ? _Right : _Left);]]></Line>
      <Line Number="2104"><![CDATA[	}]]></Line>
      <Line Number="2105"><![CDATA[]]></Line>
      <Line Number="2106"><![CDATA[		// TEMPLATE FUNCTION minmax]]></Line>
      <Line Number="2107"><![CDATA[  #define _MINMAX_PAIR(ty)	pair<const ty, const ty>]]></Line>
      <Line Number="2108"><![CDATA[]]></Line>
      <Line Number="2109"><![CDATA[template<class _Ty> inline]]></Line>
      <Line Number="2110"><![CDATA[	_MINMAX_PAIR(_Ty)]]></Line>
      <Line Number="2111"><![CDATA[		minmax(const _Ty& _Left, const _Ty& _Right)]]></Line>
      <Line Number="2112"><![CDATA[	{	// return pair(leftmost/smaller, rightmost/larger) of _Left and _Right]]></Line>
      <Line Number="2113"><![CDATA[	return (_Right < _Left]]></Line>
      <Line Number="2114"><![CDATA[		? _MINMAX_PAIR(_Ty)(_Right, _Left)]]></Line>
      <Line Number="2115"><![CDATA[		: _MINMAX_PAIR(_Ty)(_Left, _Right));]]></Line>
      <Line Number="2116"><![CDATA[	}]]></Line>
      <Line Number="2117"><![CDATA[]]></Line>
      <Line Number="2118"><![CDATA[		// TEMPLATE FUNCTION minmax WITH PRED]]></Line>
      <Line Number="2119"><![CDATA[template<class _Ty,]]></Line>
      <Line Number="2120"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="2121"><![CDATA[	_MINMAX_PAIR(_Ty)]]></Line>
      <Line Number="2122"><![CDATA[		minmax(const _Ty& _Left, const _Ty& _Right, _Pr _Pred)]]></Line>
      <Line Number="2123"><![CDATA[	{	// return pair(leftmost/smaller, rightmost/larger) of _Left and _Right]]></Line>
      <Line Number="2124"><![CDATA[	return (_Pred(_Right, _Left)]]></Line>
      <Line Number="2125"><![CDATA[		? _MINMAX_PAIR(_Ty)(_Right, _Left)]]></Line>
      <Line Number="2126"><![CDATA[		: _MINMAX_PAIR(_Ty)(_Left, _Right));]]></Line>
      <Line Number="2127"><![CDATA[	}]]></Line>
      <Line Number="2128"><![CDATA[]]></Line>
      <Line Number="2129"><![CDATA[		// TEMPLATE FUNCTION iter_swap]]></Line>
      <Line Number="2130"><![CDATA[template<class _FwdIt1,]]></Line>
      <Line Number="2131"><![CDATA[	class _FwdIt2> inline]]></Line>
      <Line Number="2132"><![CDATA[	void iter_swap(_FwdIt1 _Left, _FwdIt2 _Right)]]></Line>
      <Line Number="2133"><![CDATA[	{	// swap *_Left and *_Right]]></Line>
      <Line Number="2134"><![CDATA[	swap(*_Left, *_Right);]]></Line>
      <Line Number="2135"><![CDATA[	}]]></Line>
      <Line Number="2136"><![CDATA[]]></Line>
      <Line Number="2137"><![CDATA[		// TEMPLATE FUNCTION copy]]></Line>
      <Line Number="2138"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="2139"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="2140"><![CDATA[	_OutIt _Copy_impl(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="2141"><![CDATA[		_OutIt _Dest, _Nonscalar_ptr_iterator_tag)]]></Line>
      <Line Number="2142"><![CDATA[	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators]]></Line>
      <Line Number="2143"><![CDATA[	for (; _First != _Last; ++_Dest, ++_First)]]></Line>
      <Line Number="2144"><![CDATA[		*_Dest = *_First;]]></Line>
      <Line Number="2145"><![CDATA[	return (_Dest);]]></Line>
      <Line Number="2146"><![CDATA[	}]]></Line>
      <Line Number="2147"><![CDATA[]]></Line>
      <Line Number="2148"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="2149"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="2150"><![CDATA[	_OutIt _Copy_impl(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="2151"><![CDATA[		_OutIt _Dest, _Scalar_ptr_iterator_tag)]]></Line>
      <Line Number="2152"><![CDATA[	{	// copy [_First, _Last) to [_Dest, ...), pointers to scalars]]></Line>
      <Line Number="2153"><![CDATA[	ptrdiff_t _Count = _Last - _First;]]></Line>
      <Line Number="2154"><![CDATA[	_CSTD memmove(&*_Dest, &*_First,]]></Line>
      <Line Number="2155"><![CDATA[		_Count * sizeof (*_First));]]></Line>
      <Line Number="2156"><![CDATA[	return (_Dest + _Count);]]></Line>
      <Line Number="2157"><![CDATA[	}]]></Line>
      <Line Number="2158"><![CDATA[]]></Line>
      <Line Number="2159"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="2160"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="2161"><![CDATA[	_OutIt _Copy_impl(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="2162"><![CDATA[		_OutIt _Dest)]]></Line>
      <Line Number="2163"><![CDATA[	{	// copy [_First, _Last) to [_Dest, ...)]]></Line>
      <Line Number="2164"><![CDATA[	return (_Copy_impl(_First, _Last,]]></Line>
      <Line Number="2165"><![CDATA[		_Dest, _Ptr_cat(_First, _Dest)));]]></Line>
      <Line Number="2166"><![CDATA[	}]]></Line>
      <Line Number="2167"><![CDATA[]]></Line>
      <Line Number="2168"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 0]]></Line>
      <Line Number="2169"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="2170"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="2171"><![CDATA[	_OutIt copy(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="2172"><![CDATA[		_OutIt _Dest)]]></Line>
      <Line Number="2173"><![CDATA[	{	// copy [_First, _Last) to [_Dest, ...)]]></Line>
      <Line Number="2174"><![CDATA[	return (_Rechecked(_Dest,]]></Line>
      <Line Number="2175"><![CDATA[		_Copy_impl(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="2176"><![CDATA[			_Unchecked(_Dest))));]]></Line>
      <Line Number="2177"><![CDATA[	}]]></Line>
      <Line Number="2178"><![CDATA[]]></Line>
      <Line Number="2179"><![CDATA[ #else /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="2180"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="2181"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="2182"><![CDATA[	_OutIt _Copy_impl(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="2183"><![CDATA[		_OutIt _Dest, input_iterator_tag, output_iterator_tag)]]></Line>
      <Line Number="2184"><![CDATA[	{	// copy [_First, _Last) to [_Dest, ...), arbitrary iterators]]></Line>
      <Line Number="2185"><![CDATA[	return (_Copy_impl(_First, _Last,]]></Line>
      <Line Number="2186"><![CDATA[		_Dest));]]></Line>
      <Line Number="2187"><![CDATA[	}]]></Line>
      <Line Number="2188"><![CDATA[]]></Line>
      <Line Number="2189"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="2190"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="2191"><![CDATA[	_OutIt _Copy_impl(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="2192"><![CDATA[		_OutIt _Dest, random_access_iterator_tag, random_access_iterator_tag)]]></Line>
      <Line Number="2193"><![CDATA[	{	// copy [_First, _Last) to [_Dest, ...), random-access iterators]]></Line>
      <Line Number="2194"><![CDATA[	_OutIt _Ans = _Dest + (_Last - _First);	// also checks range]]></Line>
      <Line Number="2195"><![CDATA[	_Copy_impl(_First, _Last,]]></Line>
      <Line Number="2196"><![CDATA[		_Unchecked(_Dest));]]></Line>
      <Line Number="2197"><![CDATA[	return (_Ans);]]></Line>
      <Line Number="2198"><![CDATA[	}]]></Line>
      <Line Number="2199"><![CDATA[]]></Line>
      <Line Number="2200"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="2201"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="2202"><![CDATA[	_OutIt _Copy_impl(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="2203"><![CDATA[		_OutIt _Dest, _STD tr1::true_type)]]></Line>
      <Line Number="2204"><![CDATA[	{	// copy [_First, _Last) to [_Dest, ...), checked dest]]></Line>
      <Line Number="2205"><![CDATA[	return (_Copy_impl(_First, _Last,]]></Line>
      <Line Number="2206"><![CDATA[		_Dest, _Iter_cat(_First), _Iter_cat(_Dest)));]]></Line>
      <Line Number="2207"><![CDATA[	}]]></Line>
      <Line Number="2208"><![CDATA[]]></Line>
      <Line Number="2209"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="2210"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="2211"><![CDATA[_SCL_INSECURE_DEPRECATE]]></Line>
      <Line Number="2212"><![CDATA[	_OutIt _Copy_impl(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="2213"><![CDATA[		_OutIt _Dest, _STD tr1::false_type)]]></Line>
      <Line Number="2214"><![CDATA[	{	// copy [_First, _Last) to [_Dest, ...), unchecked dest]]></Line>
      <Line Number="2215"><![CDATA[	return (_Copy_impl(_First, _Last,]]></Line>
      <Line Number="2216"><![CDATA[		_Dest, _Iter_cat(_First), _Iter_cat(_Dest)));]]></Line>
      <Line Number="2217"><![CDATA[	}]]></Line>
      <Line Number="2218"><![CDATA[]]></Line>
      <Line Number="2219"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="2220"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="2221"><![CDATA[	_OutIt copy(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="2222"><![CDATA[		_OutIt _Dest)]]></Line>
      <Line Number="2223"><![CDATA[	{	// copy [_First, _Last) to [_Dest, ...)]]></Line>
      <Line Number="2224"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="2225"><![CDATA[	_DEBUG_POINTER(_Dest);]]></Line>
      <Line Number="2226"><![CDATA[	return (_Copy_impl(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="2227"><![CDATA[		_Dest, _Is_checked(_Dest)));]]></Line>
      <Line Number="2228"><![CDATA[	}]]></Line>
      <Line Number="2229"><![CDATA[]]></Line>
      <Line Number="2230"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="2231"><![CDATA[	class _OutTy,]]></Line>
      <Line Number="2232"><![CDATA[	size_t _OutSize> inline]]></Line>
      <Line Number="2233"><![CDATA[	_OutTy *copy(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="2234"><![CDATA[		_OutTy (&_Dest)[_OutSize])]]></Line>
      <Line Number="2235"><![CDATA[	{	// copy [_First, _Last) to [_Dest, ...)]]></Line>
      <Line Number="2236"><![CDATA[	return (_Unchecked(]]></Line>
      <Line Number="2237"><![CDATA[		_STD copy(_First, _Last,]]></Line>
      <Line Number="2238"><![CDATA[			_Array_iterator<_OutTy, _OutSize>(_Dest))));]]></Line>
      <Line Number="2239"><![CDATA[	}]]></Line>
      <Line Number="2240"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="2241"><![CDATA[]]></Line>
      <Line Number="2242"><![CDATA[ #if _HAS_CPP0X]]></Line>
      <Line Number="2243"><![CDATA[		// TEMPLATE FUNCTION copy_n]]></Line>
      <Line Number="2244"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="2245"><![CDATA[	class _Diff,]]></Line>
      <Line Number="2246"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="2247"><![CDATA[	_OutIt _Copy_n(_InIt _First, _Diff _Count,]]></Line>
      <Line Number="2248"><![CDATA[		_OutIt _Dest, input_iterator_tag)]]></Line>
      <Line Number="2249"><![CDATA[	{	// copy [_First, _First + _Count) to [_Dest, ...), arbitrary input]]></Line>
      <Line Number="2250"><![CDATA[	*_Dest = *_First;	// 0 < _Count has been guaranteed]]></Line>
      <Line Number="2251"><![CDATA[	while (0 < --_Count)]]></Line>
      <Line Number="2252"><![CDATA[		*++_Dest = *++_First;]]></Line>
      <Line Number="2253"><![CDATA[	return (++_Dest);]]></Line>
      <Line Number="2254"><![CDATA[	}]]></Line>
      <Line Number="2255"><![CDATA[]]></Line>
      <Line Number="2256"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="2257"><![CDATA[	class _Diff,]]></Line>
      <Line Number="2258"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="2259"><![CDATA[	_OutIt _Copy_n(_InIt _First, _Diff _Count,]]></Line>
      <Line Number="2260"><![CDATA[		_OutIt _Dest, forward_iterator_tag)]]></Line>
      <Line Number="2261"><![CDATA[	{	// copy [_First, _First + _Count) to [_Dest, ...), forward input]]></Line>
      <Line Number="2262"><![CDATA[	for (; 0 < _Count; --_Count, ++_Dest, ++_First)]]></Line>
      <Line Number="2263"><![CDATA[		*_Dest = *_First;]]></Line>
      <Line Number="2264"><![CDATA[	return (_Dest);]]></Line>
      <Line Number="2265"><![CDATA[	}]]></Line>
      <Line Number="2266"><![CDATA[]]></Line>
      <Line Number="2267"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="2268"><![CDATA[	class _Diff,]]></Line>
      <Line Number="2269"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="2270"><![CDATA[	_OutIt _Copy_n(_InIt _First, _Diff _Count,]]></Line>
      <Line Number="2271"><![CDATA[		_OutIt _Dest, _Nonscalar_ptr_iterator_tag)]]></Line>
      <Line Number="2272"><![CDATA[	{	// copy [_First, _First + _Count) to [_Dest, ...), arbitrary iterators]]></Line>
      <Line Number="2273"><![CDATA[	return (_Copy_n(_First, _Count,]]></Line>
      <Line Number="2274"><![CDATA[		_Dest, _Iter_cat(_First)));]]></Line>
      <Line Number="2275"><![CDATA[	}]]></Line>
      <Line Number="2276"><![CDATA[]]></Line>
      <Line Number="2277"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="2278"><![CDATA[	class _Diff,]]></Line>
      <Line Number="2279"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="2280"><![CDATA[	_OutIt _Copy_n(_InIt _First, _Diff _Count,]]></Line>
      <Line Number="2281"><![CDATA[		_OutIt _Dest, _Scalar_ptr_iterator_tag)]]></Line>
      <Line Number="2282"><![CDATA[	{	// copy [_First, _First + _Count) to [_Dest, ...), pointers to scalars]]></Line>
      <Line Number="2283"><![CDATA[	_CSTD memmove(&*_Dest, &*_First,]]></Line>
      <Line Number="2284"><![CDATA[		_Count * sizeof (*_First));]]></Line>
      <Line Number="2285"><![CDATA[	return (_Dest + _Count);]]></Line>
      <Line Number="2286"><![CDATA[	}]]></Line>
      <Line Number="2287"><![CDATA[]]></Line>
      <Line Number="2288"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="2289"><![CDATA[	class _Diff,]]></Line>
      <Line Number="2290"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="2291"><![CDATA[	_OutIt _Copy_n(_InIt _First, _Diff _Count,]]></Line>
      <Line Number="2292"><![CDATA[		_OutIt _Dest)]]></Line>
      <Line Number="2293"><![CDATA[	{	// copy [_First, _First + _Count) to [_Dest, ...), unchecked]]></Line>
      <Line Number="2294"><![CDATA[	return (_Copy_n(_First, _Count,]]></Line>
      <Line Number="2295"><![CDATA[		_Dest, _Ptr_cat(_First, _Dest)));]]></Line>
      <Line Number="2296"><![CDATA[	}]]></Line>
      <Line Number="2297"><![CDATA[]]></Line>
      <Line Number="2298"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 0]]></Line>
      <Line Number="2299"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="2300"><![CDATA[	class _Diff,]]></Line>
      <Line Number="2301"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="2302"><![CDATA[	_OutIt copy_n(_InIt _First, _Diff _Count,]]></Line>
      <Line Number="2303"><![CDATA[		_OutIt _Dest)]]></Line>
      <Line Number="2304"><![CDATA[	{	// copy [_First, _First + _Count) to [_Dest, ...)]]></Line>
      <Line Number="2305"><![CDATA[	if (_Count <= 0)]]></Line>
      <Line Number="2306"><![CDATA[		return (_Dest);]]></Line>
      <Line Number="2307"><![CDATA[	else]]></Line>
      <Line Number="2308"><![CDATA[		return (_Rechecked(_Dest,]]></Line>
      <Line Number="2309"><![CDATA[			_Copy_n(_Unchecked(_First), _Count,]]></Line>
      <Line Number="2310"><![CDATA[				_Unchecked(_Dest))));]]></Line>
      <Line Number="2311"><![CDATA[	}]]></Line>
      <Line Number="2312"><![CDATA[]]></Line>
      <Line Number="2313"><![CDATA[ #else /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="2314"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="2315"><![CDATA[	class _Diff,]]></Line>
      <Line Number="2316"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="2317"><![CDATA[	_OutIt _Copy_n2(_InIt _First, _Diff _Count,]]></Line>
      <Line Number="2318"><![CDATA[		_OutIt _Dest, output_iterator_tag)]]></Line>
      <Line Number="2319"><![CDATA[	{	// copy [_First, _First + _Count) to [_Dest, ...), arbitrary dest]]></Line>
      <Line Number="2320"><![CDATA[	return (_Copy_n(_First, _Count,]]></Line>
      <Line Number="2321"><![CDATA[		_Dest));]]></Line>
      <Line Number="2322"><![CDATA[	}]]></Line>
      <Line Number="2323"><![CDATA[]]></Line>
      <Line Number="2324"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="2325"><![CDATA[	class _Diff,]]></Line>
      <Line Number="2326"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="2327"><![CDATA[	_OutIt _Copy_n2(_InIt _First, _Diff _Count,]]></Line>
      <Line Number="2328"><![CDATA[		_OutIt _Dest, random_access_iterator_tag)]]></Line>
      <Line Number="2329"><![CDATA[	{	// copy [_First, _First + _Count) to [_Dest, ...), random-access dest]]></Line>
      <Line Number="2330"><![CDATA[	_OutIt _Ans = _Dest + _Count;	// also checks range]]></Line>
      <Line Number="2331"><![CDATA[	_Copy_n(_First, _Count,]]></Line>
      <Line Number="2332"><![CDATA[		_Unchecked(_Dest));]]></Line>
      <Line Number="2333"><![CDATA[	return (_Ans);]]></Line>
      <Line Number="2334"><![CDATA[	}]]></Line>
      <Line Number="2335"><![CDATA[]]></Line>
      <Line Number="2336"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="2337"><![CDATA[	class _Diff,]]></Line>
      <Line Number="2338"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="2339"><![CDATA[	_OutIt _Copy_n1(_InIt _First, _Diff _Count,]]></Line>
      <Line Number="2340"><![CDATA[		_OutIt _Dest, input_iterator_tag)]]></Line>
      <Line Number="2341"><![CDATA[	{	// copy [_First, _First + _Count) to [_Dest, ...), arbitrary input]]></Line>
      <Line Number="2342"><![CDATA[	return (_Copy_n2(_First, _Count,]]></Line>
      <Line Number="2343"><![CDATA[		_Dest, _Iter_cat(_Dest)));]]></Line>
      <Line Number="2344"><![CDATA[	}]]></Line>
      <Line Number="2345"><![CDATA[]]></Line>
      <Line Number="2346"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="2347"><![CDATA[	class _Diff,]]></Line>
      <Line Number="2348"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="2349"><![CDATA[	_OutIt _Copy_n1(_InIt _First, _Diff _Count,]]></Line>
      <Line Number="2350"><![CDATA[		_OutIt _Dest, random_access_iterator_tag)]]></Line>
      <Line Number="2351"><![CDATA[	{	// copy [_First, _First + _Count) to [_Dest, ...), random-access input]]></Line>
      <Line Number="2352"><![CDATA[	_InIt _Last = _First + _Count;	// also checks range]]></Line>
      <Line Number="2353"><![CDATA[	_Last = _Last;	// to quiet diagnostics]]></Line>
      <Line Number="2354"><![CDATA[	return (_Copy_n2(_Unchecked(_First), _Count,]]></Line>
      <Line Number="2355"><![CDATA[		_Dest, _Iter_cat(_Dest)));]]></Line>
      <Line Number="2356"><![CDATA[	}]]></Line>
      <Line Number="2357"><![CDATA[]]></Line>
      <Line Number="2358"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="2359"><![CDATA[	class _Diff,]]></Line>
      <Line Number="2360"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="2361"><![CDATA[	_OutIt _Copy_n(_InIt _First, _Diff _Count,]]></Line>
      <Line Number="2362"><![CDATA[		_OutIt _Dest, _STD tr1::true_type)]]></Line>
      <Line Number="2363"><![CDATA[	{	// copy [_First, _First + _Count) to [_Dest, ...), checked dest]]></Line>
      <Line Number="2364"><![CDATA[	return (_Copy_n1(_First, _Count,]]></Line>
      <Line Number="2365"><![CDATA[		_Dest, _Iter_cat(_First)));]]></Line>
      <Line Number="2366"><![CDATA[	}]]></Line>
      <Line Number="2367"><![CDATA[]]></Line>
      <Line Number="2368"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="2369"><![CDATA[	class _Diff,]]></Line>
      <Line Number="2370"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="2371"><![CDATA[_SCL_INSECURE_DEPRECATE]]></Line>
      <Line Number="2372"><![CDATA[	_OutIt _Copy_n(_InIt _First, _Diff _Count,]]></Line>
      <Line Number="2373"><![CDATA[		_OutIt _Dest, _STD tr1::false_type)]]></Line>
      <Line Number="2374"><![CDATA[	{	// copy [_First, _First + _Count) to [_Dest, ...), unchecked dest]]></Line>
      <Line Number="2375"><![CDATA[	return (_Copy_n1(_First, _Count,]]></Line>
      <Line Number="2376"><![CDATA[		_Dest, _Iter_cat(_First)));]]></Line>
      <Line Number="2377"><![CDATA[	}]]></Line>
      <Line Number="2378"><![CDATA[]]></Line>
      <Line Number="2379"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="2380"><![CDATA[	class _Diff,]]></Line>
      <Line Number="2381"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="2382"><![CDATA[	_OutIt copy_n(_InIt _First, _Diff _Count,]]></Line>
      <Line Number="2383"><![CDATA[		_OutIt _Dest)]]></Line>
      <Line Number="2384"><![CDATA[	{	// copy [_First, _First + _Count) to [_Dest, ...)]]></Line>
      <Line Number="2385"><![CDATA[	_DEBUG_POINTER(_First);]]></Line>
      <Line Number="2386"><![CDATA[	_DEBUG_POINTER(_Dest);]]></Line>
      <Line Number="2387"><![CDATA[	if (_Count <= 0)]]></Line>
      <Line Number="2388"><![CDATA[		return (_Dest);]]></Line>
      <Line Number="2389"><![CDATA[	else]]></Line>
      <Line Number="2390"><![CDATA[		return (_Copy_n(_First, _Count,]]></Line>
      <Line Number="2391"><![CDATA[			_Dest, _Is_checked(_Dest)));]]></Line>
      <Line Number="2392"><![CDATA[	}]]></Line>
      <Line Number="2393"><![CDATA[]]></Line>
      <Line Number="2394"><![CDATA[template<class _InTy,]]></Line>
      <Line Number="2395"><![CDATA[	size_t _InSize,]]></Line>
      <Line Number="2396"><![CDATA[	class _Diff,]]></Line>
      <Line Number="2397"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="2398"><![CDATA[	_OutIt copy_n(_InTy (&_First)[_InSize], _Diff _Count,]]></Line>
      <Line Number="2399"><![CDATA[		_OutIt _Dest)]]></Line>
      <Line Number="2400"><![CDATA[	{	// copy [_First, _First + _Count) to [_Dest, ...), array input]]></Line>
      <Line Number="2401"><![CDATA[	return (_STD copy_n(_Array_iterator<_InTy, _InSize>(_First), _Count,]]></Line>
      <Line Number="2402"><![CDATA[		_Dest));]]></Line>
      <Line Number="2403"><![CDATA[	}]]></Line>
      <Line Number="2404"><![CDATA[]]></Line>
      <Line Number="2405"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="2406"><![CDATA[	class _Diff,]]></Line>
      <Line Number="2407"><![CDATA[	class _OutTy,]]></Line>
      <Line Number="2408"><![CDATA[	size_t _OutSize> inline]]></Line>
      <Line Number="2409"><![CDATA[	_OutTy *copy_n(_InIt _First, _Diff _Count,]]></Line>
      <Line Number="2410"><![CDATA[		_OutTy (&_Dest)[_OutSize])]]></Line>
      <Line Number="2411"><![CDATA[	{	// copy [_First, _First + _Count) to [_Dest, ...), array dest]]></Line>
      <Line Number="2412"><![CDATA[	return (_Unchecked(]]></Line>
      <Line Number="2413"><![CDATA[		_STD copy_n(_First, _Count,]]></Line>
      <Line Number="2414"><![CDATA[			_Array_iterator<_OutTy, _OutSize>(_Dest))));]]></Line>
      <Line Number="2415"><![CDATA[	}]]></Line>
      <Line Number="2416"><![CDATA[]]></Line>
      <Line Number="2417"><![CDATA[template<class _InTy,]]></Line>
      <Line Number="2418"><![CDATA[	size_t _InSize,]]></Line>
      <Line Number="2419"><![CDATA[	class _Diff,]]></Line>
      <Line Number="2420"><![CDATA[	class _OutTy,]]></Line>
      <Line Number="2421"><![CDATA[	size_t _OutSize> inline]]></Line>
      <Line Number="2422"><![CDATA[	_OutTy *copy_n(_InTy (&_First)[_InSize], _Diff _Count,]]></Line>
      <Line Number="2423"><![CDATA[		_OutTy (&_Dest)[_OutSize])]]></Line>
      <Line Number="2424"><![CDATA[	{	// copy [_First, _First + _Count) to [_Dest, ...), array input/dest]]></Line>
      <Line Number="2425"><![CDATA[	return (_Unchecked(]]></Line>
      <Line Number="2426"><![CDATA[		_STD copy_n(_Array_iterator<_InTy, _InSize>(_First), _Count,]]></Line>
      <Line Number="2427"><![CDATA[			_Array_iterator<_OutTy, _OutSize>(_Dest))));]]></Line>
      <Line Number="2428"><![CDATA[	}]]></Line>
      <Line Number="2429"><![CDATA[]]></Line>
      <Line Number="2430"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="2431"><![CDATA[ #endif /* _HAS_CPP0X */]]></Line>
      <Line Number="2432"><![CDATA[]]></Line>
      <Line Number="2433"><![CDATA[		// TEMPLATE FUNCTION copy_backward]]></Line>
      <Line Number="2434"><![CDATA[template<class _BidIt1,]]></Line>
      <Line Number="2435"><![CDATA[	class _BidIt2> inline]]></Line>
      <Line Number="2436"><![CDATA[	_BidIt2 _Copy_backward(_BidIt1 _First, _BidIt1 _Last,]]></Line>
      <Line Number="2437"><![CDATA[		_BidIt2 _Dest, _Nonscalar_ptr_iterator_tag)]]></Line>
      <Line Number="2438"><![CDATA[	{	// copy [_First, _Last) backwards to [..., _Dest), arbitrary iterators]]></Line>
      <Line Number="2439"><![CDATA[	while (_First != _Last)]]></Line>
      <Line Number="2440"><![CDATA[		*--_Dest = *--_Last;]]></Line>
      <Line Number="2441"><![CDATA[	return (_Dest);]]></Line>
      <Line Number="2442"><![CDATA[	}]]></Line>
      <Line Number="2443"><![CDATA[]]></Line>
      <Line Number="2444"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="2445"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="2446"><![CDATA[	_OutIt _Copy_backward(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="2447"><![CDATA[		_OutIt _Dest, _Scalar_ptr_iterator_tag)]]></Line>
      <Line Number="2448"><![CDATA[	{	// copy [_First, _Last) backwards to [..., _Dest), pointers to scalars]]></Line>
      <Line Number="2449"><![CDATA[	ptrdiff_t _Count = _Last - _First;]]></Line>
      <Line Number="2450"><![CDATA[	_CSTD memmove(&*_Dest - _Count, &*_First,]]></Line>
      <Line Number="2451"><![CDATA[		_Count * sizeof (*_First));]]></Line>
      <Line Number="2452"><![CDATA[	return (_Dest - _Count);]]></Line>
      <Line Number="2453"><![CDATA[	}]]></Line>
      <Line Number="2454"><![CDATA[]]></Line>
      <Line Number="2455"><![CDATA[template<class _BidIt1,]]></Line>
      <Line Number="2456"><![CDATA[	class _BidIt2> inline]]></Line>
      <Line Number="2457"><![CDATA[	_BidIt2 _Copy_backward(_BidIt1 _First, _BidIt1 _Last,]]></Line>
      <Line Number="2458"><![CDATA[		_BidIt2 _Dest)]]></Line>
      <Line Number="2459"><![CDATA[	{	// copy [_First, _Last) backwards to [..., _Dest), unchecked]]></Line>
      <Line Number="2460"><![CDATA[	return (_Copy_backward(_First, _Last,]]></Line>
      <Line Number="2461"><![CDATA[		_Dest, _Ptr_cat(_First, _Dest)));]]></Line>
      <Line Number="2462"><![CDATA[	}]]></Line>
      <Line Number="2463"><![CDATA[]]></Line>
      <Line Number="2464"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 0]]></Line>
      <Line Number="2465"><![CDATA[template<class _BidIt1,]]></Line>
      <Line Number="2466"><![CDATA[	class _BidIt2> inline]]></Line>
      <Line Number="2467"><![CDATA[	_BidIt2 copy_backward(_BidIt1 _First, _BidIt1 _Last,]]></Line>
      <Line Number="2468"><![CDATA[		_BidIt2 _Dest)]]></Line>
      <Line Number="2469"><![CDATA[	{	// copy [_First, _Last) backwards to [..., _Dest)]]></Line>
      <Line Number="2470"><![CDATA[	return (_Rechecked(_Dest,]]></Line>
      <Line Number="2471"><![CDATA[		_Copy_backward(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="2472"><![CDATA[			_Unchecked(_Dest))));]]></Line>
      <Line Number="2473"><![CDATA[	}]]></Line>
      <Line Number="2474"><![CDATA[]]></Line>
      <Line Number="2475"><![CDATA[ #else /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="2476"><![CDATA[template<class _BidIt1,]]></Line>
      <Line Number="2477"><![CDATA[	class _BidIt2> inline]]></Line>
      <Line Number="2478"><![CDATA[	_BidIt2 _Copy_backward(_BidIt1 _First, _BidIt1 _Last,]]></Line>
      <Line Number="2479"><![CDATA[		_BidIt2 _Dest, _STD tr1::true_type)]]></Line>
      <Line Number="2480"><![CDATA[	{	// copy [_First, _Last) backwards to [..., _Dest), checked dest]]></Line>
      <Line Number="2481"><![CDATA[	return (_Copy_backward(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="2482"><![CDATA[		_Dest));]]></Line>
      <Line Number="2483"><![CDATA[	}]]></Line>
      <Line Number="2484"><![CDATA[]]></Line>
      <Line Number="2485"><![CDATA[template<class _BidIt1,]]></Line>
      <Line Number="2486"><![CDATA[	class _BidIt2> inline]]></Line>
      <Line Number="2487"><![CDATA[_SCL_INSECURE_DEPRECATE]]></Line>
      <Line Number="2488"><![CDATA[	_BidIt2 _Copy_backward(_BidIt1 _First, _BidIt1 _Last,]]></Line>
      <Line Number="2489"><![CDATA[		_BidIt2 _Dest, _STD tr1::false_type)]]></Line>
      <Line Number="2490"><![CDATA[	{	// copy [_First, _Last) backwards to [..., _Dest), unchecked dest]]></Line>
      <Line Number="2491"><![CDATA[	return (_Copy_backward(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="2492"><![CDATA[		_Dest));]]></Line>
      <Line Number="2493"><![CDATA[	}]]></Line>
      <Line Number="2494"><![CDATA[]]></Line>
      <Line Number="2495"><![CDATA[template<class _BidIt1,]]></Line>
      <Line Number="2496"><![CDATA[	class _BidIt2> inline]]></Line>
      <Line Number="2497"><![CDATA[	_BidIt2 copy_backward(_BidIt1 _First, _BidIt1 _Last,]]></Line>
      <Line Number="2498"><![CDATA[		_BidIt2 _Dest)]]></Line>
      <Line Number="2499"><![CDATA[	{	// copy [_First, _Last) backwards to [..., _Dest)]]></Line>
      <Line Number="2500"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="2501"><![CDATA[	_DEBUG_POINTER(_Dest);]]></Line>
      <Line Number="2502"><![CDATA[	return (_Copy_backward(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="2503"><![CDATA[		_Dest, _Is_checked(_Dest)));]]></Line>
      <Line Number="2504"><![CDATA[	}]]></Line>
      <Line Number="2505"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="2506"><![CDATA[]]></Line>
      <Line Number="2507"><![CDATA[		// TEMPLATE FUNCTION move]]></Line>
      <Line Number="2508"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="2509"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="2510"><![CDATA[	_OutIt _Move(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="2511"><![CDATA[		_OutIt _Dest, _Nonscalar_ptr_iterator_tag)]]></Line>
      <Line Number="2512"><![CDATA[	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators]]></Line>
      <Line Number="2513"><![CDATA[	for (; _First != _Last; ++_Dest, ++_First)]]></Line>
      <Line Number="2514"><![CDATA[		*_Dest = _STD move(*_First);]]></Line>
      <Line Number="2515"><![CDATA[	return (_Dest);]]></Line>
      <Line Number="2516"><![CDATA[	}]]></Line>
      <Line Number="2517"><![CDATA[]]></Line>
      <Line Number="2518"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="2519"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="2520"><![CDATA[	_OutIt _Move(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="2521"><![CDATA[		_OutIt _Dest, _Scalar_ptr_iterator_tag)]]></Line>
      <Line Number="2522"><![CDATA[	{	// move [_First, _Last) to [_Dest, ...), pointers to scalars]]></Line>
      <Line Number="2523"><![CDATA[	ptrdiff_t _Count = _Last - _First;]]></Line>
      <Line Number="2524"><![CDATA[	_CSTD memmove(&*_Dest, &*_First,]]></Line>
      <Line Number="2525"><![CDATA[		_Count * sizeof (*_First));]]></Line>
      <Line Number="2526"><![CDATA[	return (_Dest + _Count);]]></Line>
      <Line Number="2527"><![CDATA[	}]]></Line>
      <Line Number="2528"><![CDATA[]]></Line>
      <Line Number="2529"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="2530"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="2531"><![CDATA[	_OutIt _Move(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="2532"><![CDATA[		_OutIt _Dest)]]></Line>
      <Line Number="2533"><![CDATA[	{	// move [_First, _Last) to [_Dest, ...), unchecked]]></Line>
      <Line Number="2534"><![CDATA[	return (_Move(_First, _Last,]]></Line>
      <Line Number="2535"><![CDATA[		_Dest, _Ptr_cat(_First, _Dest)));]]></Line>
      <Line Number="2536"><![CDATA[	}]]></Line>
      <Line Number="2537"><![CDATA[]]></Line>
      <Line Number="2538"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 0]]></Line>
      <Line Number="2539"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="2540"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="2541"><![CDATA[	_OutIt move(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="2542"><![CDATA[		_OutIt _Dest)]]></Line>
      <Line Number="2543"><![CDATA[	{	// move [_First, _Last) to [_Dest, ...)]]></Line>
      <Line Number="2544"><![CDATA[	return (_Rechecked(_Dest,]]></Line>
      <Line Number="2545"><![CDATA[		_Move(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="2546"><![CDATA[			_Unchecked(_Dest))));]]></Line>
      <Line Number="2547"><![CDATA[	}]]></Line>
      <Line Number="2548"><![CDATA[]]></Line>
      <Line Number="2549"><![CDATA[ #else /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="2550"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="2551"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="2552"><![CDATA[	_OutIt _Move(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="2553"><![CDATA[		_OutIt _Dest, input_iterator_tag, output_iterator_tag)]]></Line>
      <Line Number="2554"><![CDATA[	{	// move [_First, _Last) to [_Dest, ...), arbitrary iterators]]></Line>
      <Line Number="2555"><![CDATA[	return (_Move(_First, _Last,]]></Line>
      <Line Number="2556"><![CDATA[		_Dest));]]></Line>
      <Line Number="2557"><![CDATA[	}]]></Line>
      <Line Number="2558"><![CDATA[]]></Line>
      <Line Number="2559"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="2560"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="2561"><![CDATA[	_OutIt _Move(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="2562"><![CDATA[		_OutIt _Dest, random_access_iterator_tag, random_access_iterator_tag)]]></Line>
      <Line Number="2563"><![CDATA[	{	// move [_First, _Last) to [_Dest, ...), random-access iterators]]></Line>
      <Line Number="2564"><![CDATA[	_OutIt _Ans = _Dest + (_Last - _First);	// also checks range]]></Line>
      <Line Number="2565"><![CDATA[	_Move(_First, _Last,]]></Line>
      <Line Number="2566"><![CDATA[		_Unchecked(_Dest));]]></Line>
      <Line Number="2567"><![CDATA[	return (_Ans);]]></Line>
      <Line Number="2568"><![CDATA[	}]]></Line>
      <Line Number="2569"><![CDATA[]]></Line>
      <Line Number="2570"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="2571"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="2572"><![CDATA[	_OutIt _Move(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="2573"><![CDATA[		_OutIt _Dest, _STD tr1::true_type)]]></Line>
      <Line Number="2574"><![CDATA[	{	// move [_First, _Last) to [_Dest, ...), checked dest]]></Line>
      <Line Number="2575"><![CDATA[	return (_Move(_First, _Last,]]></Line>
      <Line Number="2576"><![CDATA[		_Dest, _Iter_cat(_First), _Iter_cat(_Dest)));]]></Line>
      <Line Number="2577"><![CDATA[	}]]></Line>
      <Line Number="2578"><![CDATA[]]></Line>
      <Line Number="2579"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="2580"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="2581"><![CDATA[_SCL_INSECURE_DEPRECATE]]></Line>
      <Line Number="2582"><![CDATA[	_OutIt _Move(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="2583"><![CDATA[		_OutIt _Dest, _STD tr1::false_type)]]></Line>
      <Line Number="2584"><![CDATA[	{	// move [_First, _Last) to [_Dest, ...), unchecked dest]]></Line>
      <Line Number="2585"><![CDATA[	return (_Move(_First, _Last,]]></Line>
      <Line Number="2586"><![CDATA[		_Dest, _Iter_cat(_First), _Iter_cat(_Dest)));]]></Line>
      <Line Number="2587"><![CDATA[	}]]></Line>
      <Line Number="2588"><![CDATA[]]></Line>
      <Line Number="2589"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="2590"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="2591"><![CDATA[	_OutIt move(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="2592"><![CDATA[		_OutIt _Dest)]]></Line>
      <Line Number="2593"><![CDATA[	{	// move [_First, _Last) to [_Dest, ...)]]></Line>
      <Line Number="2594"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="2595"><![CDATA[	_DEBUG_POINTER(_Dest);]]></Line>
      <Line Number="2596"><![CDATA[	return (_Move(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="2597"><![CDATA[		_Dest, _Is_checked(_Dest)));]]></Line>
      <Line Number="2598"><![CDATA[	}]]></Line>
      <Line Number="2599"><![CDATA[]]></Line>
      <Line Number="2600"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="2601"><![CDATA[	class _OutTy,]]></Line>
      <Line Number="2602"><![CDATA[	size_t _OutSize> inline]]></Line>
      <Line Number="2603"><![CDATA[	_OutTy *move(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="2604"><![CDATA[		_OutTy (&_Dest)[_OutSize])]]></Line>
      <Line Number="2605"><![CDATA[	{	// move [_First, _Last) to [_Dest, ...)]]></Line>
      <Line Number="2606"><![CDATA[	return (_Unchecked(]]></Line>
      <Line Number="2607"><![CDATA[		_STD move(_First, _Last,]]></Line>
      <Line Number="2608"><![CDATA[			_Array_iterator<_OutTy, _OutSize>(_Dest))));]]></Line>
      <Line Number="2609"><![CDATA[	}]]></Line>
      <Line Number="2610"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="2611"><![CDATA[]]></Line>
      <Line Number="2612"><![CDATA[		// TEMPLATE FUNCTION move_backward]]></Line>
      <Line Number="2613"><![CDATA[template<class _BidIt1,]]></Line>
      <Line Number="2614"><![CDATA[	class _BidIt2> inline]]></Line>
      <Line Number="2615"><![CDATA[	_BidIt2 _Move_backward(_BidIt1 _First, _BidIt1 _Last,]]></Line>
      <Line Number="2616"><![CDATA[		_BidIt2 _Dest, _Nonscalar_ptr_iterator_tag)]]></Line>
      <Line Number="2617"><![CDATA[	{	// move [_First, _Last) backwards to [..., _Dest), arbitrary iterators]]></Line>
      <Line Number="2618"><![CDATA[	while (_First != _Last)]]></Line>
      <Line Number="2619"><![CDATA[		*--_Dest = _STD move(*--_Last);]]></Line>
      <Line Number="2620"><![CDATA[	return (_Dest);]]></Line>
      <Line Number="2621"><![CDATA[	}]]></Line>
      <Line Number="2622"><![CDATA[]]></Line>
      <Line Number="2623"><![CDATA[template<class _InIt,]]></Line>
      <Line Number="2624"><![CDATA[	class _OutIt> inline]]></Line>
      <Line Number="2625"><![CDATA[	_OutIt _Move_backward(_InIt _First, _InIt _Last,]]></Line>
      <Line Number="2626"><![CDATA[		_OutIt _Dest, _Scalar_ptr_iterator_tag)]]></Line>
      <Line Number="2627"><![CDATA[	{	// move [_First, _Last) backwards to [..., _Dest), pointers to scalars]]></Line>
      <Line Number="2628"><![CDATA[	ptrdiff_t _Count = _Last - _First;]]></Line>
      <Line Number="2629"><![CDATA[	_CSTD memmove(&*_Dest - _Count, &*_First,]]></Line>
      <Line Number="2630"><![CDATA[		_Count * sizeof (*_First));]]></Line>
      <Line Number="2631"><![CDATA[	return (_Dest - _Count);]]></Line>
      <Line Number="2632"><![CDATA[	}]]></Line>
      <Line Number="2633"><![CDATA[]]></Line>
      <Line Number="2634"><![CDATA[template<class _BidIt1,]]></Line>
      <Line Number="2635"><![CDATA[	class _BidIt2> inline]]></Line>
      <Line Number="2636"><![CDATA[	_BidIt2 _Move_backward(_BidIt1 _First, _BidIt1 _Last,]]></Line>
      <Line Number="2637"><![CDATA[		_BidIt2 _Dest)]]></Line>
      <Line Number="2638"><![CDATA[	{	// move [_First, _Last) backwards to [..., _Dest), unchecked]]></Line>
      <Line Number="2639"><![CDATA[	return (_Move_backward(_First, _Last,]]></Line>
      <Line Number="2640"><![CDATA[		_Dest, _Ptr_cat(_First, _Dest)));]]></Line>
      <Line Number="2641"><![CDATA[	}]]></Line>
      <Line Number="2642"><![CDATA[]]></Line>
      <Line Number="2643"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 0]]></Line>
      <Line Number="2644"><![CDATA[template<class _BidIt1,]]></Line>
      <Line Number="2645"><![CDATA[	class _BidIt2> inline]]></Line>
      <Line Number="2646"><![CDATA[	_BidIt2 move_backward(_BidIt1 _First, _BidIt1 _Last,]]></Line>
      <Line Number="2647"><![CDATA[		_BidIt2 _Dest)]]></Line>
      <Line Number="2648"><![CDATA[	{	// move [_First, _Last) backwards to [..., _Dest)]]></Line>
      <Line Number="2649"><![CDATA[	return (_Rechecked(_Dest,]]></Line>
      <Line Number="2650"><![CDATA[		_Move_backward(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="2651"><![CDATA[			_Unchecked(_Dest))));]]></Line>
      <Line Number="2652"><![CDATA[	}]]></Line>
      <Line Number="2653"><![CDATA[]]></Line>
      <Line Number="2654"><![CDATA[ #else /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="2655"><![CDATA[template<class _BidIt1,]]></Line>
      <Line Number="2656"><![CDATA[	class _BidIt2> inline]]></Line>
      <Line Number="2657"><![CDATA[	_BidIt2 _Move_backward(_BidIt1 _First, _BidIt1 _Last,]]></Line>
      <Line Number="2658"><![CDATA[		_BidIt2 _Dest, _STD tr1::true_type)]]></Line>
      <Line Number="2659"><![CDATA[	{	// move [_First, _Last) backwards to [..., _Dest), checked dest]]></Line>
      <Line Number="2660"><![CDATA[	return (_Move_backward(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="2661"><![CDATA[		_Dest));]]></Line>
      <Line Number="2662"><![CDATA[	}]]></Line>
      <Line Number="2663"><![CDATA[]]></Line>
      <Line Number="2664"><![CDATA[template<class _BidIt1,]]></Line>
      <Line Number="2665"><![CDATA[	class _BidIt2> inline]]></Line>
      <Line Number="2666"><![CDATA[_SCL_INSECURE_DEPRECATE]]></Line>
      <Line Number="2667"><![CDATA[	_BidIt2 _Move_backward(_BidIt1 _First, _BidIt1 _Last,]]></Line>
      <Line Number="2668"><![CDATA[		_BidIt2 _Dest, _STD tr1::false_type)]]></Line>
      <Line Number="2669"><![CDATA[	{	// move [_First, _Last) backwards to [..., _Dest), unchecked dest]]></Line>
      <Line Number="2670"><![CDATA[	return (_Move_backward(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="2671"><![CDATA[		_Dest));]]></Line>
      <Line Number="2672"><![CDATA[	}]]></Line>
      <Line Number="2673"><![CDATA[]]></Line>
      <Line Number="2674"><![CDATA[template<class _BidIt1,]]></Line>
      <Line Number="2675"><![CDATA[	class _BidIt2> inline]]></Line>
      <Line Number="2676"><![CDATA[	_BidIt2 move_backward(_BidIt1 _First, _BidIt1 _Last,]]></Line>
      <Line Number="2677"><![CDATA[		_BidIt2 _Dest)]]></Line>
      <Line Number="2678"><![CDATA[	{	// move [_First, _Last) backwards to [..., _Dest)]]></Line>
      <Line Number="2679"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="2680"><![CDATA[	_DEBUG_POINTER(_Dest);]]></Line>
      <Line Number="2681"><![CDATA[	return (_Move_backward(_Unchecked(_First), _Unchecked(_Last),]]></Line>
      <Line Number="2682"><![CDATA[		_Dest, _Is_checked(_Dest)));]]></Line>
      <Line Number="2683"><![CDATA[	}]]></Line>
      <Line Number="2684"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="2685"><![CDATA[]]></Line>
      <Line Number="2686"><![CDATA[		// TEMPLATE FUNCTION fill]]></Line>
      <Line Number="2687"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="2688"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="2689"><![CDATA[	void _Fill(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)]]></Line>
      <Line Number="2690"><![CDATA[	{	// copy _Val through [_First, _Last)]]></Line>
      <Line Number="2691"><![CDATA[	for (; _First != _Last; ++_First)]]></Line>
      <Line Number="2692"><![CDATA[		*_First = _Val;]]></Line>
      <Line Number="2693"><![CDATA[	}]]></Line>
      <Line Number="2694"><![CDATA[]]></Line>
      <Line Number="2695"><![CDATA[inline void _Fill(char *_First, char *_Last, int _Val)]]></Line>
      <Line Number="2696"><![CDATA[	{	// copy char _Val through [_First, _Last)]]></Line>
      <Line Number="2697"><![CDATA[	_CSTD memset(_First, _Val, _Last - _First);]]></Line>
      <Line Number="2698"><![CDATA[	}]]></Line>
      <Line Number="2699"><![CDATA[]]></Line>
      <Line Number="2700"><![CDATA[inline void _Fill(signed char *_First, signed char *_Last, int _Val)]]></Line>
      <Line Number="2701"><![CDATA[	{	// copy signed char _Val through [_First, _Last)]]></Line>
      <Line Number="2702"><![CDATA[	_CSTD memset(_First, _Val, _Last - _First);]]></Line>
      <Line Number="2703"><![CDATA[	}]]></Line>
      <Line Number="2704"><![CDATA[]]></Line>
      <Line Number="2705"><![CDATA[inline void _Fill(unsigned char *_First, unsigned char *_Last, int _Val)]]></Line>
      <Line Number="2706"><![CDATA[	{	// copy unsigned char _Val through [_First, _Last)]]></Line>
      <Line Number="2707"><![CDATA[	_CSTD memset(_First, _Val, _Last - _First);]]></Line>
      <Line Number="2708"><![CDATA[	}]]></Line>
      <Line Number="2709"><![CDATA[]]></Line>
      <Line Number="2710"><![CDATA[template<class _FwdIt,]]></Line>
      <Line Number="2711"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="2712"><![CDATA[	void fill(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)]]></Line>
      <Line Number="2713"><![CDATA[	{	// copy _Val through [_First, _Last)]]></Line>
      <Line Number="2714"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="2715"><![CDATA[	_Fill(_Unchecked(_First), _Unchecked(_Last), _Val);]]></Line>
      <Line Number="2716"><![CDATA[	}]]></Line>
      <Line Number="2717"><![CDATA[]]></Line>
      <Line Number="2718"><![CDATA[		// TEMPLATE FUNCTION fill_n]]></Line>
      <Line Number="2719"><![CDATA[template<class _OutIt,]]></Line>
      <Line Number="2720"><![CDATA[	class _Diff,]]></Line>
      <Line Number="2721"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="2722"><![CDATA[	void _Fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val)]]></Line>
      <Line Number="2723"><![CDATA[	{	// copy _Val _Count times through [_Dest, ...)]]></Line>
      <Line Number="2724"><![CDATA[	for (; 0 < _Count; --_Count, ++_Dest)]]></Line>
      <Line Number="2725"><![CDATA[		*_Dest = _Val;]]></Line>
      <Line Number="2726"><![CDATA[	}]]></Line>
      <Line Number="2727"><![CDATA[]]></Line>
      <Line Number="2728"><![CDATA[inline void _Fill_n(char *_Dest, size_t _Count, int _Val)]]></Line>
      <Line Number="2729"><![CDATA[	{	// copy char _Val _Count times through [_Dest, ...)]]></Line>
      <Line Number="2730"><![CDATA[	_CSTD memset(_Dest, _Val, _Count);]]></Line>
      <Line Number="2731"><![CDATA[	}]]></Line>
      <Line Number="2732"><![CDATA[]]></Line>
      <Line Number="2733"><![CDATA[inline void _Fill_n(signed char *_Dest, size_t _Count, int _Val)]]></Line>
      <Line Number="2734"><![CDATA[	{	// copy signed char _Val _Count times through [_Dest, ...)]]></Line>
      <Line Number="2735"><![CDATA[	_CSTD memset(_Dest, _Val, _Count);]]></Line>
      <Line Number="2736"><![CDATA[	}]]></Line>
      <Line Number="2737"><![CDATA[]]></Line>
      <Line Number="2738"><![CDATA[inline void _Fill_n(unsigned char *_Dest, size_t _Count, int _Val)]]></Line>
      <Line Number="2739"><![CDATA[	{	// copy unsigned char _Val _Count times through [_Dest, ...)]]></Line>
      <Line Number="2740"><![CDATA[	_CSTD memset(_Dest, _Val, _Count);]]></Line>
      <Line Number="2741"><![CDATA[	}]]></Line>
      <Line Number="2742"><![CDATA[]]></Line>
      <Line Number="2743"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 0]]></Line>
      <Line Number="2744"><![CDATA[template<class _OutIt,]]></Line>
      <Line Number="2745"><![CDATA[	class _Diff,]]></Line>
      <Line Number="2746"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="2747"><![CDATA[	void fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val)]]></Line>
      <Line Number="2748"><![CDATA[	{	// copy _Val _Count times through [_Dest, ...)]]></Line>
      <Line Number="2749"><![CDATA[	_Fill_n(_Unchecked(_Dest), _Count, _Val);]]></Line>
      <Line Number="2750"><![CDATA[	}]]></Line>
      <Line Number="2751"><![CDATA[]]></Line>
      <Line Number="2752"><![CDATA[ #else /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="2753"><![CDATA[template<class _OutIt,]]></Line>
      <Line Number="2754"><![CDATA[	class _Diff,]]></Line>
      <Line Number="2755"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="2756"><![CDATA[	void _Fill_n1(_OutIt _Dest, _Diff _Count, const _Ty& _Val,]]></Line>
      <Line Number="2757"><![CDATA[		output_iterator_tag)]]></Line>
      <Line Number="2758"><![CDATA[	{	// copy _Val _Count times through [_Dest, ...), arbitrary iterator]]></Line>
      <Line Number="2759"><![CDATA[	_Fill_n(_Dest, _Count, _Val);]]></Line>
      <Line Number="2760"><![CDATA[	}]]></Line>
      <Line Number="2761"><![CDATA[]]></Line>
      <Line Number="2762"><![CDATA[template<class _OutIt,]]></Line>
      <Line Number="2763"><![CDATA[	class _Diff,]]></Line>
      <Line Number="2764"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="2765"><![CDATA[	void _Fill_n1(_OutIt _Dest, _Diff _Count, const _Ty& _Val,]]></Line>
      <Line Number="2766"><![CDATA[		random_access_iterator_tag)]]></Line>
      <Line Number="2767"><![CDATA[	{	// copy _Val _Count times through [_Dest, ...), random-access iterator]]></Line>
      <Line Number="2768"><![CDATA[	_OutIt _Ans = _Dest + _Count;	// also checks range]]></Line>
      <Line Number="2769"><![CDATA[	_Ans = _Ans;	// to quiet diagnostics]]></Line>
      <Line Number="2770"><![CDATA[	_Fill_n(_Unchecked(_Dest), _Count, _Val);]]></Line>
      <Line Number="2771"><![CDATA[	}]]></Line>
      <Line Number="2772"><![CDATA[]]></Line>
      <Line Number="2773"><![CDATA[template<class _OutIt,]]></Line>
      <Line Number="2774"><![CDATA[	class _Diff,]]></Line>
      <Line Number="2775"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="2776"><![CDATA[	void _Fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val,]]></Line>
      <Line Number="2777"><![CDATA[		_STD tr1::true_type)]]></Line>
      <Line Number="2778"><![CDATA[	{	// copy _Val _Count times through [_Dest, ...), checked dest]]></Line>
      <Line Number="2779"><![CDATA[	_Fill_n1(_Dest, _Count, _Val,]]></Line>
      <Line Number="2780"><![CDATA[		_Iter_cat(_Dest));]]></Line>
      <Line Number="2781"><![CDATA[	}]]></Line>
      <Line Number="2782"><![CDATA[]]></Line>
      <Line Number="2783"><![CDATA[template<class _OutIt,]]></Line>
      <Line Number="2784"><![CDATA[	class _Diff,]]></Line>
      <Line Number="2785"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="2786"><![CDATA[_SCL_INSECURE_DEPRECATE]]></Line>
      <Line Number="2787"><![CDATA[	void _Fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val,]]></Line>
      <Line Number="2788"><![CDATA[		_STD tr1::false_type)]]></Line>
      <Line Number="2789"><![CDATA[	{	// copy _Val _Count times through [_Dest, ...), unchecked dest]]></Line>
      <Line Number="2790"><![CDATA[	_Fill_n1(_Dest, _Count, _Val,]]></Line>
      <Line Number="2791"><![CDATA[		_Iter_cat(_Dest));]]></Line>
      <Line Number="2792"><![CDATA[	}]]></Line>
      <Line Number="2793"><![CDATA[]]></Line>
      <Line Number="2794"><![CDATA[template<class _OutIt,]]></Line>
      <Line Number="2795"><![CDATA[	class _Diff,]]></Line>
      <Line Number="2796"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="2797"><![CDATA[	void fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val)]]></Line>
      <Line Number="2798"><![CDATA[	{	// copy _Val _Count times through [_Dest, ...)]]></Line>
      <Line Number="2799"><![CDATA[	_DEBUG_POINTER(_Dest);]]></Line>
      <Line Number="2800"><![CDATA[	_Fill_n(_Dest, _Count, _Val,]]></Line>
      <Line Number="2801"><![CDATA[		_Is_checked(_Dest));]]></Line>
      <Line Number="2802"><![CDATA[	}]]></Line>
      <Line Number="2803"><![CDATA[]]></Line>
      <Line Number="2804"><![CDATA[template<class _OutTy,]]></Line>
      <Line Number="2805"><![CDATA[	size_t _OutSize,]]></Line>
      <Line Number="2806"><![CDATA[	class _Diff,]]></Line>
      <Line Number="2807"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="2808"><![CDATA[	void fill_n(_OutTy (&_Dest)[_OutSize], _Diff _Count, const _Ty& _Val)]]></Line>
      <Line Number="2809"><![CDATA[	{	// copy _Val _Count times through [_Dest, ...)]]></Line>
      <Line Number="2810"><![CDATA[	_STD fill_n(_Array_iterator<_OutTy, _OutSize>(_Dest), _Count, _Val);]]></Line>
      <Line Number="2811"><![CDATA[	}]]></Line>
      <Line Number="2812"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="2813"><![CDATA[]]></Line>
      <Line Number="2814"><![CDATA[		// TEMPLATE FUNCTION mismatch]]></Line>
      <Line Number="2815"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="2816"><![CDATA[	class _InIt2> inline]]></Line>
      <Line Number="2817"><![CDATA[	pair<_InIt1, _InIt2>]]></Line>
      <Line Number="2818"><![CDATA[		_Mismatch(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="2819"><![CDATA[			_InIt2 _First2)]]></Line>
      <Line Number="2820"><![CDATA[	{	// return [_First1, _Last1)/[_First2, ...) mismatch]]></Line>
      <Line Number="2821"><![CDATA[	for (; _First1 != _Last1 && *_First1 == *_First2; )]]></Line>
      <Line Number="2822"><![CDATA[		++_First1, ++_First2;]]></Line>
      <Line Number="2823"><![CDATA[	return (pair<_InIt1, _InIt2>(_First1, _First2));]]></Line>
      <Line Number="2824"><![CDATA[	}]]></Line>
      <Line Number="2825"><![CDATA[]]></Line>
      <Line Number="2826"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 0]]></Line>
      <Line Number="2827"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="2828"><![CDATA[	class _InIt2> inline]]></Line>
      <Line Number="2829"><![CDATA[	pair<_InIt1, _InIt2>]]></Line>
      <Line Number="2830"><![CDATA[		mismatch(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="2831"><![CDATA[			_InIt2 _First2)]]></Line>
      <Line Number="2832"><![CDATA[	{	// return [_First1, _Last1)/[_First2, ...) mismatch]]></Line>
      <Line Number="2833"><![CDATA[	_STD pair<_UNCHECKED_TYPE(_InIt1), _InIt2> _Ans(]]></Line>
      <Line Number="2834"><![CDATA[		_STD _Mismatch(_Unchecked(_First1), _Unchecked(_Last1),]]></Line>
      <Line Number="2835"><![CDATA[			_First2));]]></Line>
      <Line Number="2836"><![CDATA[	return (_STD pair<_InIt1, _InIt2>(]]></Line>
      <Line Number="2837"><![CDATA[		_Rechecked(_First1, _Ans.first),]]></Line>
      <Line Number="2838"><![CDATA[		_Ans.second));]]></Line>
      <Line Number="2839"><![CDATA[	}]]></Line>
      <Line Number="2840"><![CDATA[]]></Line>
      <Line Number="2841"><![CDATA[ #else /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="2842"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="2843"><![CDATA[	class _InIt2> inline]]></Line>
      <Line Number="2844"><![CDATA[	pair<_InIt1, _InIt2>]]></Line>
      <Line Number="2845"><![CDATA[		_Mismatch1(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="2846"><![CDATA[			_InIt2 _First2, _STD tr1::true_type)]]></Line>
      <Line Number="2847"><![CDATA[	{	// return [_First1, _Last1)/[_First2, ...) mismatch, checked input]]></Line>
      <Line Number="2848"><![CDATA[	return (_STD _Mismatch(_First1, _Last1,]]></Line>
      <Line Number="2849"><![CDATA[		_First2));]]></Line>
      <Line Number="2850"><![CDATA[	}]]></Line>
      <Line Number="2851"><![CDATA[]]></Line>
      <Line Number="2852"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="2853"><![CDATA[	class _InIt2> inline]]></Line>
      <Line Number="2854"><![CDATA[_SCL_INSECURE_DEPRECATE]]></Line>
      <Line Number="2855"><![CDATA[	pair<_InIt1, _InIt2>]]></Line>
      <Line Number="2856"><![CDATA[		_Mismatch1(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="2857"><![CDATA[			_InIt2 _First2, _STD tr1::false_type)]]></Line>
      <Line Number="2858"><![CDATA[	{	// return [_First1, _Last1)/[_First2, ...) mismatch, unchecked input]]></Line>
      <Line Number="2859"><![CDATA[	return (_STD _Mismatch(_First1, _Last1,]]></Line>
      <Line Number="2860"><![CDATA[		_First2));]]></Line>
      <Line Number="2861"><![CDATA[	}]]></Line>
      <Line Number="2862"><![CDATA[]]></Line>
      <Line Number="2863"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="2864"><![CDATA[	class _InIt2> inline]]></Line>
      <Line Number="2865"><![CDATA[	pair<_InIt1, _InIt2>]]></Line>
      <Line Number="2866"><![CDATA[		mismatch(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="2867"><![CDATA[			_InIt2 _First2)]]></Line>
      <Line Number="2868"><![CDATA[	{	// return [_First1, _Last1)/[_First2, ...) mismatch]]></Line>
      <Line Number="2869"><![CDATA[	_DEBUG_RANGE(_First1, _Last1);]]></Line>
      <Line Number="2870"><![CDATA[	_DEBUG_POINTER(_First2);]]></Line>
      <Line Number="2871"><![CDATA[	_STD pair<_UNCHECKED_TYPE(_InIt1), _InIt2> _Ans(]]></Line>
      <Line Number="2872"><![CDATA[		_STD _Mismatch1(_Unchecked(_First1), _Unchecked(_Last1),]]></Line>
      <Line Number="2873"><![CDATA[			_First2, _Is_checked(_First2)));]]></Line>
      <Line Number="2874"><![CDATA[	return (_STD pair<_InIt1, _InIt2>(]]></Line>
      <Line Number="2875"><![CDATA[		_Rechecked(_First1, _Ans.first),]]></Line>
      <Line Number="2876"><![CDATA[		_Ans.second));]]></Line>
      <Line Number="2877"><![CDATA[	}]]></Line>
      <Line Number="2878"><![CDATA[]]></Line>
      <Line Number="2879"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="2880"><![CDATA[	class _InTy,]]></Line>
      <Line Number="2881"><![CDATA[	size_t _InSize> inline]]></Line>
      <Line Number="2882"><![CDATA[	pair<_InIt1, _InTy *>]]></Line>
      <Line Number="2883"><![CDATA[		mismatch(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="2884"><![CDATA[			_InTy (&_First2)[_InSize])]]></Line>
      <Line Number="2885"><![CDATA[	{	// return [_First1, _Last1)/[_First2, ...) mismatch, array input]]></Line>
      <Line Number="2886"><![CDATA[	_STD pair<_InIt1, _Array_iterator<_InTy, _InSize> > _Ans(]]></Line>
      <Line Number="2887"><![CDATA[		_STD mismatch(_First1, _Last1,]]></Line>
      <Line Number="2888"><![CDATA[			_Array_iterator<_InTy, _InSize>(_First2)));]]></Line>
      <Line Number="2889"><![CDATA[	return (_STD pair<_InIt1, _InTy *>(]]></Line>
      <Line Number="2890"><![CDATA[		_Ans.first,]]></Line>
      <Line Number="2891"><![CDATA[		_Unchecked(_Ans.second)));]]></Line>
      <Line Number="2892"><![CDATA[	}]]></Line>
      <Line Number="2893"><![CDATA[]]></Line>
      <Line Number="2894"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="2895"><![CDATA[]]></Line>
      <Line Number="2896"><![CDATA[		// TEMPLATE FUNCTION mismatch WITH PRED]]></Line>
      <Line Number="2897"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="2898"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="2899"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="2900"><![CDATA[	pair<_InIt1, _InIt2>]]></Line>
      <Line Number="2901"><![CDATA[		_Mismatch(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="2902"><![CDATA[			_InIt2 _First2, _Pr _Pred)]]></Line>
      <Line Number="2903"><![CDATA[	{	// return [_First1, _Last1)/[_First2, ...) mismatch using _Pred]]></Line>
      <Line Number="2904"><![CDATA[	for (; _First1 != _Last1 && _Pred(*_First1, *_First2); )]]></Line>
      <Line Number="2905"><![CDATA[		++_First1, ++_First2;]]></Line>
      <Line Number="2906"><![CDATA[	return (pair<_InIt1, _InIt2>(_First1, _First2));]]></Line>
      <Line Number="2907"><![CDATA[	}]]></Line>
      <Line Number="2908"><![CDATA[]]></Line>
      <Line Number="2909"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 0]]></Line>
      <Line Number="2910"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="2911"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="2912"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="2913"><![CDATA[	pair<_InIt1, _InIt2>]]></Line>
      <Line Number="2914"><![CDATA[		mismatch(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="2915"><![CDATA[			_InIt2 _First2, _Pr _Pred)]]></Line>
      <Line Number="2916"><![CDATA[	{	// return [_First1, _Last1)/[_First2, ...) mismatch using _Pred]]></Line>
      <Line Number="2917"><![CDATA[	_STD pair<_UNCHECKED_TYPE(_InIt1), _InIt2> _Ans(]]></Line>
      <Line Number="2918"><![CDATA[		_STD _Mismatch(_Unchecked(_First1), _Unchecked(_Last1),]]></Line>
      <Line Number="2919"><![CDATA[			_First2, _Pred));]]></Line>
      <Line Number="2920"><![CDATA[	return (_STD pair<_InIt1, _InIt2>(]]></Line>
      <Line Number="2921"><![CDATA[		_Rechecked(_First1, _Ans.first),]]></Line>
      <Line Number="2922"><![CDATA[		_Ans.second));]]></Line>
      <Line Number="2923"><![CDATA[	}]]></Line>
      <Line Number="2924"><![CDATA[]]></Line>
      <Line Number="2925"><![CDATA[ #else /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="2926"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="2927"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="2928"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="2929"><![CDATA[	pair<_InIt1, _InIt2>]]></Line>
      <Line Number="2930"><![CDATA[		_Mismatch2(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="2931"><![CDATA[			_InIt2 _First2, _Pr _Pred, _STD tr1::true_type)]]></Line>
      <Line Number="2932"><![CDATA[	{	// return [_First1, _Last1)/[_First2, ...) mismatch, checked input]]></Line>
      <Line Number="2933"><![CDATA[	return (_STD _Mismatch(_First1, _Last1,]]></Line>
      <Line Number="2934"><![CDATA[		_First2, _Pred));]]></Line>
      <Line Number="2935"><![CDATA[	}]]></Line>
      <Line Number="2936"><![CDATA[]]></Line>
      <Line Number="2937"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="2938"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="2939"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="2940"><![CDATA[_SCL_INSECURE_DEPRECATE]]></Line>
      <Line Number="2941"><![CDATA[	pair<_InIt1, _InIt2>]]></Line>
      <Line Number="2942"><![CDATA[		_Mismatch2(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="2943"><![CDATA[			_InIt2 _First2, _Pr _Pred, _STD tr1::false_type)]]></Line>
      <Line Number="2944"><![CDATA[	{	// return [_First1, _Last1)/[_First2, ...) mismatch, unchecked input]]></Line>
      <Line Number="2945"><![CDATA[	return (_STD _Mismatch(_First1, _Last1,]]></Line>
      <Line Number="2946"><![CDATA[		_First2, _Pred));]]></Line>
      <Line Number="2947"><![CDATA[	}]]></Line>
      <Line Number="2948"><![CDATA[]]></Line>
      <Line Number="2949"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="2950"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="2951"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="2952"><![CDATA[	pair<_InIt1, _InIt2>]]></Line>
      <Line Number="2953"><![CDATA[		mismatch(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="2954"><![CDATA[			_InIt2 _First2, _Pr _Pred)]]></Line>
      <Line Number="2955"><![CDATA[	{	// return [_First1, _Last1)/[_First2, ...) mismatch using _Pred]]></Line>
      <Line Number="2956"><![CDATA[	_DEBUG_RANGE(_First1, _Last1);]]></Line>
      <Line Number="2957"><![CDATA[	_DEBUG_POINTER(_First2);]]></Line>
      <Line Number="2958"><![CDATA[	_DEBUG_POINTER(_Pred);]]></Line>
      <Line Number="2959"><![CDATA[	_STD pair<_UNCHECKED_TYPE(_InIt1), _InIt2> _Ans(]]></Line>
      <Line Number="2960"><![CDATA[		_STD _Mismatch2(_Unchecked(_First1), _Unchecked(_Last1),]]></Line>
      <Line Number="2961"><![CDATA[			_First2, _Pred, _Is_checked(_First2)));]]></Line>
      <Line Number="2962"><![CDATA[	return (_STD pair<_InIt1, _InIt2>(]]></Line>
      <Line Number="2963"><![CDATA[		_Rechecked(_First1, _Ans.first),]]></Line>
      <Line Number="2964"><![CDATA[		_Ans.second));]]></Line>
      <Line Number="2965"><![CDATA[	}]]></Line>
      <Line Number="2966"><![CDATA[]]></Line>
      <Line Number="2967"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="2968"><![CDATA[	class _InTy,]]></Line>
      <Line Number="2969"><![CDATA[	size_t _InSize,]]></Line>
      <Line Number="2970"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="2971"><![CDATA[	pair<_InIt1, _InTy *>]]></Line>
      <Line Number="2972"><![CDATA[		mismatch(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="2973"><![CDATA[			_InTy (&_First2)[_InSize], _Pr _Pred)]]></Line>
      <Line Number="2974"><![CDATA[	{	// return [_First1, _Last1)/[_First2, ...) mismatch using _Pred]]></Line>
      <Line Number="2975"><![CDATA[	_STD pair<_InIt1, _Array_iterator<_InTy, _InSize> > _Ans(]]></Line>
      <Line Number="2976"><![CDATA[		_STD mismatch(_First1, _Last1,]]></Line>
      <Line Number="2977"><![CDATA[			_Array_iterator<_InTy, _InSize>(_First2), _Pred));]]></Line>
      <Line Number="2978"><![CDATA[	return (_STD pair<_InIt1, _InTy *>(]]></Line>
      <Line Number="2979"><![CDATA[		_Ans.first,]]></Line>
      <Line Number="2980"><![CDATA[		_Unchecked(_Ans.second)));]]></Line>
      <Line Number="2981"><![CDATA[	}]]></Line>
      <Line Number="2982"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="2983"><![CDATA[]]></Line>
      <Line Number="2984"><![CDATA[		// TEMPLATE FUNCTION equal]]></Line>
      <Line Number="2985"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="2986"><![CDATA[	class _InIt2> inline]]></Line>
      <Line Number="2987"><![CDATA[	bool _Equal(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2)]]></Line>
      <Line Number="2988"><![CDATA[	{	// compare [_First1, _Last1) to [First2, ...)]]></Line>
      <Line Number="2989"><![CDATA[	for (; _First1 != _Last1; ++_First1, ++_First2)]]></Line>
      <Line Number="2990"><![CDATA[		if (!(*_First1 == *_First2))]]></Line>
      <Line Number="2991"><![CDATA[			return (false);]]></Line>
      <Line Number="2992"><![CDATA[	return (true);]]></Line>
      <Line Number="2993"><![CDATA[	}]]></Line>
      <Line Number="2994"><![CDATA[]]></Line>
      <Line Number="2995"><![CDATA[inline bool _Equal(const char *_First1, const char *_Last1,]]></Line>
      <Line Number="2996"><![CDATA[	const char *_First2)]]></Line>
      <Line Number="2997"><![CDATA[	{	// compare [_First1, _Last1) to [First2, ...), for chars]]></Line>
      <Line Number="2998"><![CDATA[	return (_CSTD memcmp(_First1, _First2, _Last1 - _First1) == 0);]]></Line>
      <Line Number="2999"><![CDATA[	}]]></Line>
      <Line Number="3000"><![CDATA[]]></Line>
      <Line Number="3001"><![CDATA[inline bool _Equal(const signed char *_First1, const signed char *_Last1,]]></Line>
      <Line Number="3002"><![CDATA[	const signed char *_First2)]]></Line>
      <Line Number="3003"><![CDATA[	{	// compare [_First1, _Last1) to [First2, ...), for signed chars]]></Line>
      <Line Number="3004"><![CDATA[	return (_CSTD memcmp(_First1, _First2, _Last1 - _First1) == 0);]]></Line>
      <Line Number="3005"><![CDATA[	}]]></Line>
      <Line Number="3006"><![CDATA[]]></Line>
      <Line Number="3007"><![CDATA[inline bool _Equal(const unsigned char *_First1, const unsigned char *_Last1,]]></Line>
      <Line Number="3008"><![CDATA[	const unsigned char *_First2)]]></Line>
      <Line Number="3009"><![CDATA[	{	// compare [_First1, _Last1) to [First2, ...), for unsigned chars]]></Line>
      <Line Number="3010"><![CDATA[	return (_CSTD memcmp(_First1, _First2, _Last1 - _First1) == 0);]]></Line>
      <Line Number="3011"><![CDATA[	}]]></Line>
      <Line Number="3012"><![CDATA[]]></Line>
      <Line Number="3013"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 0]]></Line>
      <Line Number="3014"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="3015"><![CDATA[	class _InIt2> inline]]></Line>
      <Line Number="3016"><![CDATA[	bool equal(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="3017"><![CDATA[		_InIt2 _First2)]]></Line>
      <Line Number="3018"><![CDATA[	{	// compare [_First1, _Last1) to [First2, ...)]]></Line>
      <Line Number="3019"><![CDATA[	return (_Equal(_Unchecked(_First1), _Unchecked(_Last1),]]></Line>
      <Line Number="3020"><![CDATA[		_Unchecked(_First2)));]]></Line>
      <Line Number="3021"><![CDATA[	}]]></Line>
      <Line Number="3022"><![CDATA[]]></Line>
      <Line Number="3023"><![CDATA[ #else /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="3024"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="3025"><![CDATA[	class _InIt2> inline]]></Line>
      <Line Number="3026"><![CDATA[	bool _Equal1(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="3027"><![CDATA[		_InIt2 _First2, _STD tr1::true_type)]]></Line>
      <Line Number="3028"><![CDATA[	{	// compare [_First1, _Last1) to [First2, ...), checked dest]]></Line>
      <Line Number="3029"><![CDATA[	return (_Equal(_First1, _Last1,]]></Line>
      <Line Number="3030"><![CDATA[		_First2));]]></Line>
      <Line Number="3031"><![CDATA[	}]]></Line>
      <Line Number="3032"><![CDATA[]]></Line>
      <Line Number="3033"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="3034"><![CDATA[	class _InIt2> inline]]></Line>
      <Line Number="3035"><![CDATA[_SCL_INSECURE_DEPRECATE]]></Line>
      <Line Number="3036"><![CDATA[	bool _Equal1(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="3037"><![CDATA[		_InIt2 _First2, _STD tr1::false_type)]]></Line>
      <Line Number="3038"><![CDATA[	{	// compare [_First1, _Last1) to [First2, ...), unchecked dest]]></Line>
      <Line Number="3039"><![CDATA[	return (_Equal(_First1, _Last1,]]></Line>
      <Line Number="3040"><![CDATA[		_First2));]]></Line>
      <Line Number="3041"><![CDATA[	}]]></Line>
      <Line Number="3042"><![CDATA[]]></Line>
      <Line Number="3043"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="3044"><![CDATA[	class _InIt2> inline]]></Line>
      <Line Number="3045"><![CDATA[	bool equal(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="3046"><![CDATA[		_InIt2 _First2)]]></Line>
      <Line Number="3047"><![CDATA[	{	// compare [_First1, _Last1) to [First2, ...)]]></Line>
      <Line Number="3048"><![CDATA[	_DEBUG_RANGE(_First1, _Last1);]]></Line>
      <Line Number="3049"><![CDATA[	_DEBUG_POINTER(_First2);]]></Line>
      <Line Number="3050"><![CDATA[	return (_Equal1(_Unchecked(_First1), _Unchecked(_Last1),]]></Line>
      <Line Number="3051"><![CDATA[		_First2, _Is_checked(_First2)));]]></Line>
      <Line Number="3052"><![CDATA[	}]]></Line>
      <Line Number="3053"><![CDATA[]]></Line>
      <Line Number="3054"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="3055"><![CDATA[	class _InTy,]]></Line>
      <Line Number="3056"><![CDATA[	size_t _InSize> inline]]></Line>
      <Line Number="3057"><![CDATA[	bool equal(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="3058"><![CDATA[		_InTy (&_First2)[_InSize])]]></Line>
      <Line Number="3059"><![CDATA[	{	// compare [_First1, _Last1) to [First2, ...)]]></Line>
      <Line Number="3060"><![CDATA[	return (_STD equal(_First1, _Last1,]]></Line>
      <Line Number="3061"><![CDATA[		_Array_iterator<_InTy, _InSize>(_First2)));]]></Line>
      <Line Number="3062"><![CDATA[	}]]></Line>
      <Line Number="3063"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="3064"><![CDATA[]]></Line>
      <Line Number="3065"><![CDATA[		// TEMPLATE FUNCTION equal WITH PRED]]></Line>
      <Line Number="3066"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="3067"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="3068"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="3069"><![CDATA[	bool _Equal(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="3070"><![CDATA[		_InIt2 _First2, _Pr _Pred)]]></Line>
      <Line Number="3071"><![CDATA[	{	// compare [_First1, _Last1) to [First2, ...) using _Pred]]></Line>
      <Line Number="3072"><![CDATA[	for (; _First1 != _Last1; ++_First1, ++_First2)]]></Line>
      <Line Number="3073"><![CDATA[		if (!_Pred(*_First1, *_First2))]]></Line>
      <Line Number="3074"><![CDATA[			return (false);]]></Line>
      <Line Number="3075"><![CDATA[	return (true);]]></Line>
      <Line Number="3076"><![CDATA[	}]]></Line>
      <Line Number="3077"><![CDATA[]]></Line>
      <Line Number="3078"><![CDATA[ #if _ITERATOR_DEBUG_LEVEL == 0]]></Line>
      <Line Number="3079"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="3080"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="3081"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="3082"><![CDATA[	bool equal(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="3083"><![CDATA[		_InIt2 _First2, _Pr _Pred)]]></Line>
      <Line Number="3084"><![CDATA[	{	// compare [_First1, _Last1) to [First2, ...)]]></Line>
      <Line Number="3085"><![CDATA[	return (_Equal(_Unchecked(_First1), _Unchecked(_Last1),]]></Line>
      <Line Number="3086"><![CDATA[		_Unchecked(_First2), _Pred));]]></Line>
      <Line Number="3087"><![CDATA[	}]]></Line>
      <Line Number="3088"><![CDATA[]]></Line>
      <Line Number="3089"><![CDATA[ #else /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="3090"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="3091"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="3092"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="3093"><![CDATA[	bool _Equal2(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="3094"><![CDATA[		_InIt2 _First2, _Pr _Pred, _STD tr1::true_type)]]></Line>
      <Line Number="3095"><![CDATA[	{	// compare [_First1, _Last1) to [First2, ...), checked input]]></Line>
      <Line Number="3096"><![CDATA[	return (_Equal(_First1, _Last1,]]></Line>
      <Line Number="3097"><![CDATA[		_First2, _Pred));]]></Line>
      <Line Number="3098"><![CDATA[	}]]></Line>
      <Line Number="3099"><![CDATA[]]></Line>
      <Line Number="3100"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="3101"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="3102"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="3103"><![CDATA[_SCL_INSECURE_DEPRECATE]]></Line>
      <Line Number="3104"><![CDATA[	bool _Equal2(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="3105"><![CDATA[		_InIt2 _First2, _Pr _Pred, _STD tr1::false_type)]]></Line>
      <Line Number="3106"><![CDATA[	{	// compare [_First1, _Last1) to [First2, ...), unchecked input]]></Line>
      <Line Number="3107"><![CDATA[	return (_Equal(_First1, _Last1,]]></Line>
      <Line Number="3108"><![CDATA[		_First2, _Pred));]]></Line>
      <Line Number="3109"><![CDATA[	}]]></Line>
      <Line Number="3110"><![CDATA[]]></Line>
      <Line Number="3111"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="3112"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="3113"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="3114"><![CDATA[	bool equal(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="3115"><![CDATA[		_InIt2 _First2, _Pr _Pred)]]></Line>
      <Line Number="3116"><![CDATA[	{	// compare [_First1, _Last1) to [First2, ...)]]></Line>
      <Line Number="3117"><![CDATA[	_DEBUG_RANGE(_First1, _Last1);]]></Line>
      <Line Number="3118"><![CDATA[	_DEBUG_POINTER(_First2);]]></Line>
      <Line Number="3119"><![CDATA[	return (_Equal2(_Unchecked(_First1), _Unchecked(_Last1),]]></Line>
      <Line Number="3120"><![CDATA[		_First2, _Pred, _Is_checked(_First2)));]]></Line>
      <Line Number="3121"><![CDATA[	}]]></Line>
      <Line Number="3122"><![CDATA[]]></Line>
      <Line Number="3123"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="3124"><![CDATA[	class _InTy,]]></Line>
      <Line Number="3125"><![CDATA[	size_t _InSize,]]></Line>
      <Line Number="3126"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="3127"><![CDATA[	bool equal(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="3128"><![CDATA[		_InTy (&_First2)[_InSize], _Pr _Pred)]]></Line>
      <Line Number="3129"><![CDATA[	{	// compare [_First1, _Last1) to [First2, ...)]]></Line>
      <Line Number="3130"><![CDATA[	return (_STD equal(_First1, _Last1,]]></Line>
      <Line Number="3131"><![CDATA[		_Array_iterator<_InTy, _InSize>(_First2), _Pred));]]></Line>
      <Line Number="3132"><![CDATA[	}]]></Line>
      <Line Number="3133"><![CDATA[ #endif /* _ITERATOR_DEBUG_LEVEL == 0 */]]></Line>
      <Line Number="3134"><![CDATA[]]></Line>
      <Line Number="3135"><![CDATA[		// TEMPLATE FUNCTION lexicographical_compare]]></Line>
      <Line Number="3136"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="3137"><![CDATA[	class _InIt2> inline]]></Line>
      <Line Number="3138"><![CDATA[	bool _Lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="3139"><![CDATA[		_InIt2 _First2, _InIt2 _Last2)]]></Line>
      <Line Number="3140"><![CDATA[	{	// order [_First1, _Last1) vs. [First2, Last2)]]></Line>
      <Line Number="3141"><![CDATA[	for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, ++_First2)]]></Line>
      <Line Number="3142"><![CDATA[		if (_DEBUG_LT(*_First1, *_First2))]]></Line>
      <Line Number="3143"><![CDATA[			return (true);]]></Line>
      <Line Number="3144"><![CDATA[		else if (*_First2 < *_First1)]]></Line>
      <Line Number="3145"><![CDATA[			return (false);]]></Line>
      <Line Number="3146"><![CDATA[	return (_First1 == _Last1 && _First2 != _Last2);]]></Line>
      <Line Number="3147"><![CDATA[	}]]></Line>
      <Line Number="3148"><![CDATA[]]></Line>
      <Line Number="3149"><![CDATA[inline bool _Lexicographical_compare(]]></Line>
      <Line Number="3150"><![CDATA[	const unsigned char *_First1, const unsigned char *_Last1,]]></Line>
      <Line Number="3151"><![CDATA[	const unsigned char *_First2, const unsigned char *_Last2)]]></Line>
      <Line Number="3152"><![CDATA[	{	// order [_First1, _Last1) vs. [First2, Last2), for unsigned char]]></Line>
      <Line Number="3153"><![CDATA[	ptrdiff_t _Num1 = _Last1 - _First1;]]></Line>
      <Line Number="3154"><![CDATA[	ptrdiff_t _Num2 = _Last2 - _First2;]]></Line>
      <Line Number="3155"><![CDATA[	int _Ans = _CSTD memcmp(_First1, _First2, _Num1 < _Num2 ? _Num1 : _Num2);]]></Line>
      <Line Number="3156"><![CDATA[	return (_Ans < 0 || _Ans == 0 && _Num1 < _Num2);]]></Line>
      <Line Number="3157"><![CDATA[	}]]></Line>
      <Line Number="3158"><![CDATA[]]></Line>
      <Line Number="3159"><![CDATA[ #if CHAR_MAX == UCHAR_MAX]]></Line>
      <Line Number="3160"><![CDATA[inline bool _Lexicographical_compare(]]></Line>
      <Line Number="3161"><![CDATA[	const char *_First1, const char *_Last1,]]></Line>
      <Line Number="3162"><![CDATA[	const char *_First2, const char *_Last2)]]></Line>
      <Line Number="3163"><![CDATA[	{	// order [_First1, _Last1) vs. [First2, Last2), for nonnegative char]]></Line>
      <Line Number="3164"><![CDATA[	ptrdiff_t _Num1 = _Last1 - _First1;]]></Line>
      <Line Number="3165"><![CDATA[	ptrdiff_t _Num2 = _Last2 - _First2;]]></Line>
      <Line Number="3166"><![CDATA[	int _Ans = _CSTD memcmp(_First1, _First2, _Num1 < _Num2 ? _Num1 : _Num2);]]></Line>
      <Line Number="3167"><![CDATA[	return (_Ans < 0 || _Ans == 0 && _Num1 < _Num2);]]></Line>
      <Line Number="3168"><![CDATA[	}]]></Line>
      <Line Number="3169"><![CDATA[ #endif /* CHAR_MAX == UCHAR_MAX */]]></Line>
      <Line Number="3170"><![CDATA[]]></Line>
      <Line Number="3171"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="3172"><![CDATA[	class _InIt2> inline]]></Line>
      <Line Number="3173"><![CDATA[	bool lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="3174"><![CDATA[		_InIt2 _First2, _InIt2 _Last2)]]></Line>
      <Line Number="3175"><![CDATA[	{	// order [_First1, _Last1) vs. [First2, Last2)]]></Line>
      <Line Number="3176"><![CDATA[	_DEBUG_RANGE(_First1, _Last1);]]></Line>
      <Line Number="3177"><![CDATA[	_DEBUG_RANGE(_First2, _Last2);]]></Line>
      <Line Number="3178"><![CDATA[	return (_Lexicographical_compare(_Unchecked(_First1), _Unchecked(_Last1),]]></Line>
      <Line Number="3179"><![CDATA[		_Unchecked(_First2), _Unchecked(_Last2)));]]></Line>
      <Line Number="3180"><![CDATA[	}]]></Line>
      <Line Number="3181"><![CDATA[]]></Line>
      <Line Number="3182"><![CDATA[		// TEMPLATE FUNCTION lexicographical_compare WITH PRED]]></Line>
      <Line Number="3183"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="3184"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="3185"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="3186"><![CDATA[	bool _Lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="3187"><![CDATA[		_InIt2 _First2, _InIt2 _Last2, _Pr _Pred)]]></Line>
      <Line Number="3188"><![CDATA[	{	// order [_First1, _Last1) vs. [First2, Last2) using _Pred]]></Line>
      <Line Number="3189"><![CDATA[	for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, ++_First2)]]></Line>
      <Line Number="3190"><![CDATA[		if (_DEBUG_LT_PRED(_Pred, *_First1, *_First2))]]></Line>
      <Line Number="3191"><![CDATA[			return (true);]]></Line>
      <Line Number="3192"><![CDATA[		else if (_Pred(*_First2, *_First1))]]></Line>
      <Line Number="3193"><![CDATA[			return (false);]]></Line>
      <Line Number="3194"><![CDATA[	return (_First1 == _Last1 && _First2 != _Last2);]]></Line>
      <Line Number="3195"><![CDATA[	}]]></Line>
      <Line Number="3196"><![CDATA[]]></Line>
      <Line Number="3197"><![CDATA[template<class _InIt1,]]></Line>
      <Line Number="3198"><![CDATA[	class _InIt2,]]></Line>
      <Line Number="3199"><![CDATA[	class _Pr> inline]]></Line>
      <Line Number="3200"><![CDATA[	bool lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,]]></Line>
      <Line Number="3201"><![CDATA[		_InIt2 _First2, _InIt2 _Last2, _Pr _Pred)]]></Line>
      <Line Number="3202"><![CDATA[	{	// order [_First1, _Last1) vs. [First2, Last2) using _Pred]]></Line>
      <Line Number="3203"><![CDATA[	_DEBUG_RANGE(_First1, _Last1);]]></Line>
      <Line Number="3204"><![CDATA[	_DEBUG_RANGE(_First2, _Last2);]]></Line>
      <Line Number="3205"><![CDATA[	_DEBUG_POINTER(_Pred);]]></Line>
      <Line Number="3206"><![CDATA[	return (_Lexicographical_compare(_Unchecked(_First1), _Unchecked(_Last1),]]></Line>
      <Line Number="3207"><![CDATA[		_Unchecked(_First2), _Unchecked(_Last2), _Pred));]]></Line>
      <Line Number="3208"><![CDATA[	}]]></Line>
      <Line Number="3209"><![CDATA[]]></Line>
      <Line Number="3210"><![CDATA[		// TEMPLATE FUNCTION reverse]]></Line>
      <Line Number="3211"><![CDATA[template<class _BidIt> inline]]></Line>
      <Line Number="3212"><![CDATA[	void _Reverse(_BidIt _First, _BidIt _Last, bidirectional_iterator_tag)]]></Line>
      <Line Number="3213"><![CDATA[	{	// reverse elements in [_First, _Last), bidirectional iterators]]></Line>
      <Line Number="3214"><![CDATA[	for (; _First != _Last && _First != --_Last; ++_First)]]></Line>
      <Line Number="3215"><![CDATA[		_STD iter_swap(_First, _Last);]]></Line>
      <Line Number="3216"><![CDATA[	}]]></Line>
      <Line Number="3217"><![CDATA[]]></Line>
      <Line Number="3218"><![CDATA[template<class _BidIt> inline]]></Line>
      <Line Number="3219"><![CDATA[	void reverse(_BidIt _First, _BidIt _Last)]]></Line>
      <Line Number="3220"><![CDATA[	{	// reverse elements in [_First, _Last)]]></Line>
      <Line Number="3221"><![CDATA[	_DEBUG_RANGE(_First, _Last);]]></Line>
      <Line Number="3222"><![CDATA[	_Reverse(_Unchecked(_First), _Unchecked(_Last), _Iter_cat(_First));]]></Line>
      <Line Number="3223"><![CDATA[	}]]></Line>
      <Line Number="3224"><![CDATA[]]></Line>
      <Line Number="3225"><![CDATA[		// TEMPLATE FUNCTION rotate]]></Line>
      <Line Number="3226"><![CDATA[template<class _FwdIt> inline]]></Line>
      <Line Number="3227"><![CDATA[	void _Rotate(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last,]]></Line>
      <Line Number="3228"><![CDATA[		forward_iterator_tag)]]></Line>
      <Line Number="3229"><![CDATA[	{	// rotate [_First, _Last), forward iterators]]></Line>
      <Line Number="3230"><![CDATA[	for (_FwdIt _Next = _Mid; ; )]]></Line>
      <Line Number="3231"><![CDATA[		{	// swap [_First, ...) into place]]></Line>
      <Line Number="3232"><![CDATA[		_STD iter_swap(_First, _Next);]]></Line>
      <Line Number="3233"><![CDATA[		if (++_First == _Mid)]]></Line>
      <Line Number="3234"><![CDATA[			if (++_Next == _Last)]]></Line>
      <Line Number="3235"><![CDATA[				break;	// done, quit]]></Line>
      <Line Number="3236"><![CDATA[			else]]></Line>
      <Line Number="3237"><![CDATA[				_Mid = _Next;	// mark end of next interval]]></Line>
      <Line Number="3238"><![CDATA[		else if (++_Next == _Last)]]></Line>
      <Line Number="3239"><![CDATA[			_Next = _Mid;	// wrap to last end]]></Line>
      <Line Number="3240"><![CDATA[		}]]></Line>
      <Line Number="3241"><![CDATA[	}]]></Line>
      <Line Number="3242"><![CDATA[]]></Line>
      <Line Number="3243"><![CDATA[template<class _BidIt> inline]]></Line>
      <Line Number="3244"><![CDATA[	void _Rotate(_BidIt _First, _BidIt _Mid, _BidIt _Last,]]></Line>
      <Line Number="3245"><![CDATA[		bidirectional_iterator_tag)]]></Line>
      <Line Number="3246"><![CDATA[	{	// rotate [_First, _Last), bidirectional iterators]]></Line>
      <Line Number="3247"><![CDATA[	_STD reverse(_First, _Mid);]]></Line>
      <Line Number="3248"><![CDATA[	_STD reverse(_Mid, _Last);]]></Line>
      <Line Number="3249"><![CDATA[	_STD reverse(_First, _Last);]]></Line>
      <Line Number="3250"><![CDATA[	}]]></Line>
      <Line Number="3251"><![CDATA[]]></Line>
      <Line Number="3252"><![CDATA[template<class _RanIt,]]></Line>
      <Line Number="3253"><![CDATA[	class _Diff,]]></Line>
      <Line Number="3254"><![CDATA[	class _Ty> inline]]></Line>
      <Line Number="3255"><![CDATA[	void _Rotate(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Diff *, _Ty *)]]></Line>
      <Line Number="3256"><![CDATA[	{	// rotate [_First, _Last), random-access iterators]]></Line>
      <Line Number="3257"><![CDATA[	_Diff _Shift = _Mid - _First;]]></Line>
      <Line Number="3258"><![CDATA[	_Diff _Count = _Last - _First;]]></Line>
      <Line Number="3259"><![CDATA[]]></Line>
      <Line Number="3260"><![CDATA[	for (_Diff _Factor = _Shift; _Factor != 0; )]]></Line>
      <Line Number="3261"><![CDATA[		{	// find subcycle count as GCD of shift count and length]]></Line>
      <Line Number="3262"><![CDATA[		_Diff _Tmp = _Count % _Factor;]]></Line>
      <Line Number="3263"><![CDATA[		_Count = _Factor;]]></Line>
      <Line Number="3264"><![CDATA[		_Factor = _Tmp;]]></Line>
      <Line Number="3265"><![CDATA[		}]]></Line>
      <Line Number="3266"><![CDATA[]]></Line>
      <Line Number="3267"><![CDATA[	if (_Count < _Last - _First)]]></Line>
      <Line Number="3268"><![CDATA[		for (; 0 < _Count; --_Count)]]></Line>
      <Line Number="3269"><![CDATA[			{	// rotate each subcycle]]></Line>
      <Line Number="3270"><![CDATA[			_RanIt _Hole = _First + _Count;]]></Line>
      <Line Number="3271"><![CDATA[			_RanIt _Next = _Hole;]]></Line>
      <Line Number="3272"><![CDATA[			_RanIt _Next1 = _Next + _Shift == _Last ? _First : _Next + _Shift;]]></Line>
      <Line Number="3273"><![CDATA[			for (; ; )]]></Line>
      <Line Number="3274"><![CDATA[				{	// percolate elements back around subcycle]]></Line>
      <Line Number="3275"><![CDATA[				iter_swap(_Next, _Next1);]]></Line>
      <Line Number="3276"><![CDATA[				_Next = _Next1;]]></Line>
      <Line Number="3277"><![CDATA[				_Next1 = _Shift < _Last - _Next1 ? _Next1 + _Shift]]></Line>
      <Line Number="3278"><![CDATA[					: _First + (_Shift - (_Last - _Next1));]]></Line>
      <Line Number="3279"><![CDATA[				if (_Next1 == _Hole)]]></Line>
      <Line Number="3280"><![CDATA[					break;]]></Line>
      <Line Number="3281"><![CDATA[				}]]></Line>
      <Line Number="3282"><![CDATA[			}]]></Line>
      <Line Number="3283"><![CDATA[	}]]></Line>
      <Line Number="3284"><![CDATA[]]></Line>
      <Line Number="3285"><![CDATA[template<class _RanIt> inline]]></Line>
      <Line Number="3286"><![CDATA[	void _Rotate(_RanIt _First, _RanIt _Mid, _RanIt _Last,]]></Line>
      <Line Number="3287"><![CDATA[		random_access_iterator_tag)]]></Line>
      <Line Number="3288"><![CDATA[	{	// rotate [_First, _Last), random-access iterators]]></Line>
      <Line Number="3289"><![CDATA[	_Rotate(_First, _Mid, _Last, _Dist_type(_First), _Val_type(_First));]]></Line>
      <Line Number="3290"><![CDATA[	}]]></Line>
      <Line Number="3291"><![CDATA[]]></Line>
      <Line Number="3292"><![CDATA[template<class _FwdIt> inline]]></Line>
      <Line Number="3293"><![CDATA[	_FwdIt rotate(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last)]]></Line>
      <Line Number="3294"><![CDATA[	{	// rotate [_First, _Last)]]></Line>
      <Line Number="3295"><![CDATA[	_DEBUG_RANGE(_First, _Mid);]]></Line>
      <Line Number="3296"><![CDATA[	_DEBUG_RANGE(_Mid, _Last);]]></Line>
      <Line Number="3297"><![CDATA[	if (_First != _Mid && _Mid != _Last)]]></Line>
      <Line Number="3298"><![CDATA[		{	// rotate and compute new first iterator]]></Line>
      <Line Number="3299"><![CDATA[		_Rotate(_Unchecked(_First), _Unchecked(_Mid), _Unchecked(_Last),]]></Line>
      <Line Number="3300"><![CDATA[			_Iter_cat(_First));]]></Line>
      <Line Number="3301"><![CDATA[		_STD advance(_First, _STD distance(_Mid, _Last));]]></Line>
      <Line Number="3302"><![CDATA[		}]]></Line>
      <Line Number="3303"><![CDATA[	return (_First);]]></Line>
      <Line Number="3304"><![CDATA[	}]]></Line>
      <Line Number="3305"><![CDATA[]]></Line>
      <Line Number="3306"><![CDATA[		// TEMPLATE CLASS _Yarn]]></Line>
      <Line Number="3307"><![CDATA[template<class _Elem>]]></Line>
      <Line Number="3308"><![CDATA[	class _CRTIMP2_PURE _Yarn]]></Line>
      <Line Number="3309"><![CDATA[	{	// wrap a NTBS]]></Line>
      <Line Number="3310"><![CDATA[public:]]></Line>
      <Line Number="3311"><![CDATA[	typedef _Yarn<_Elem> _Myt;]]></Line>
      <Line Number="3312"><![CDATA[]]></Line>
      <Line Number="3313"><![CDATA[	__CLR_OR_THIS_CALL _Yarn()]]></Line>
      <Line Number="3314"><![CDATA[		: _Myptr(0), _Nul(0)]]></Line>
      <Line Number="3315"><![CDATA[		{	// default construct]]></Line>
      <Line Number="3316"><![CDATA[		}]]></Line>
      <Line Number="3317"><![CDATA[]]></Line>
      <Line Number="3318"><![CDATA[	__CLR_OR_THIS_CALL _Yarn(const _Myt& _Right)]]></Line>
      <Line Number="3319"><![CDATA[		: _Myptr(0), _Nul(0)]]></Line>
      <Line Number="3320"><![CDATA[		{	// construct from _Yarn]]></Line>
      <Line Number="3321"><![CDATA[		*this = _Right;]]></Line>
      <Line Number="3322"><![CDATA[		}]]></Line>
      <Line Number="3323"><![CDATA[]]></Line>
      <Line Number="3324"><![CDATA[	__CLR_OR_THIS_CALL _Yarn(const _Elem *_Right)]]></Line>
      <Line Number="3325"><![CDATA[		: _Myptr(0), _Nul(0)]]></Line>
      <Line Number="3326"><![CDATA[		{	// construct from NTBS]]></Line>
      <Line Number="3327"><![CDATA[		*this = _Right;]]></Line>
      <Line Number="3328"><![CDATA[		}]]></Line>
      <Line Number="3329"><![CDATA[]]></Line>
      <Line Number="3330"><![CDATA[	_Myt& __CLR_OR_THIS_CALL operator=(const _Myt& _Right)]]></Line>
      <Line Number="3331"><![CDATA[		{	// assign from _Yarn]]></Line>
      <Line Number="3332"><![CDATA[		return (*this = _Right._Myptr);]]></Line>
      <Line Number="3333"><![CDATA[		}]]></Line>
      <Line Number="3334"><![CDATA[]]></Line>
      <Line Number="3335"><![CDATA[	_Myt& __CLR_OR_THIS_CALL operator=(const _Elem *_Right)]]></Line>
      <Line Number="3336"><![CDATA[		{	// assign from NTBS]]></Line>
      <Line Number="3337"><![CDATA[		if (_Myptr != _Right)]]></Line>
      <Line Number="3338"><![CDATA[			{	// new value, discard old and copy new]]></Line>
      <Line Number="3339"><![CDATA[			_Tidy();]]></Line>
      <Line Number="3340"><![CDATA[]]></Line>
      <Line Number="3341"><![CDATA[			if (_Right != 0)]]></Line>
      <Line Number="3342"><![CDATA[				{	// new is not empty, copy it]]></Line>
      <Line Number="3343"><![CDATA[				const _Elem *_Ptr = _Right;]]></Line>
      <Line Number="3344"><![CDATA[				while (*_Ptr != (_Elem)0)]]></Line>
      <Line Number="3345"><![CDATA[					++_Ptr;]]></Line>
      <Line Number="3346"><![CDATA[				size_t _Count = ((const char *)++_Ptr - (const char *)_Right)]]></Line>
      <Line Number="3347"><![CDATA[					* sizeof (_Elem);]]></Line>
      <Line Number="3348"><![CDATA[]]></Line>
      <Line Number="3349"><![CDATA[ #ifdef _DEBUG]]></Line>
      <Line Number="3350"><![CDATA[				_Myptr = (_Elem *)_malloc_dbg(_Count, _CRT_BLOCK,]]></Line>
      <Line Number="3351"><![CDATA[					__FILE__, __LINE__);]]></Line>
      <Line Number="3352"><![CDATA[]]></Line>
      <Line Number="3353"><![CDATA[ #else /* _DEBUG */]]></Line>
      <Line Number="3354"><![CDATA[				_Myptr = (_Elem *)_CSTD malloc(_Count);]]></Line>
      <Line Number="3355"><![CDATA[ #endif /* _DEBUG */]]></Line>
      <Line Number="3356"><![CDATA[]]></Line>
      <Line Number="3357"><![CDATA[				if (_Myptr != 0)]]></Line>
      <Line Number="3358"><![CDATA[					_CSTD memcpy(_Myptr, _Right, _Count);]]></Line>
      <Line Number="3359"><![CDATA[				}]]></Line>
      <Line Number="3360"><![CDATA[			}]]></Line>
      <Line Number="3361"><![CDATA[		return (*this);]]></Line>
      <Line Number="3362"><![CDATA[		}]]></Line>
      <Line Number="3363"><![CDATA[]]></Line>
      <Line Number="3364"><![CDATA[	__CLR_OR_THIS_CALL ~_Yarn()]]></Line>
      <Line Number="3365"><![CDATA[		{	// destroy the object]]></Line>
      <Line Number="3366"><![CDATA[		_Tidy();]]></Line>
      <Line Number="3367"><![CDATA[		}]]></Line>
      <Line Number="3368"><![CDATA[]]></Line>
      <Line Number="3369"><![CDATA[	bool __CLR_OR_THIS_CALL empty() const]]></Line>
      <Line Number="3370"><![CDATA[		{	// test if empty string]]></Line>
      <Line Number="3371"><![CDATA[		return (_Myptr == 0);]]></Line>
      <Line Number="3372"><![CDATA[		}]]></Line>
      <Line Number="3373"><![CDATA[]]></Line>
      <Line Number="3374"><![CDATA[	const _Elem *__CLR_OR_THIS_CALL c_str() const]]></Line>
      <Line Number="3375"><![CDATA[		{	// return NTBS]]></Line>
      <Line Number="3376"><![CDATA[		return (_Myptr != 0 ? _Myptr : &_Nul);]]></Line>
      <Line Number="3377"><![CDATA[		}]]></Line>
      <Line Number="3378"><![CDATA[]]></Line>
      <Line Number="3379"><![CDATA[	bool __CLR_OR_THIS_CALL _Empty() const]]></Line>
      <Line Number="3380"><![CDATA[		{	// test if empty string]]></Line>
      <Line Number="3381"><![CDATA[		return (_Myptr == 0);]]></Line>
      <Line Number="3382"><![CDATA[		}]]></Line>
      <Line Number="3383"><![CDATA[]]></Line>
      <Line Number="3384"><![CDATA[	const _Elem *__CLR_OR_THIS_CALL _C_str() const]]></Line>
      <Line Number="3385"><![CDATA[		{	// return NTBS]]></Line>
      <Line Number="3386"><![CDATA[		return (_Myptr != 0 ? _Myptr : &_Nul);]]></Line>
      <Line Number="3387"><![CDATA[		}]]></Line>
      <Line Number="3388"><![CDATA[]]></Line>
      <Line Number="3389"><![CDATA[private:]]></Line>
      <Line Number="3390"><![CDATA[	void __CLR_OR_THIS_CALL _Tidy()]]></Line>
      <Line Number="3391"><![CDATA[		{	// discard any string]]></Line>
      <Line Number="3392"><![CDATA[		if (_Myptr != 0)]]></Line>
      <Line Number="3393"><![CDATA[]]></Line>
      <Line Number="3394"><![CDATA[ #ifdef _DEBUG]]></Line>
      <Line Number="3395"><![CDATA[			_free_dbg(_Myptr, _CRT_BLOCK);]]></Line>
      <Line Number="3396"><![CDATA[]]></Line>
      <Line Number="3397"><![CDATA[ #else /* _DEBUG */]]></Line>
      <Line Number="3398"><![CDATA[			_CSTD free(_Myptr);]]></Line>
      <Line Number="3399"><![CDATA[ #endif /* _DEBUG */]]></Line>
      <Line Number="3400"><![CDATA[]]></Line>
      <Line Number="3401"><![CDATA[		_Myptr = 0;]]></Line>
      <Line Number="3402"><![CDATA[		}]]></Line>
      <Line Number="3403"><![CDATA[]]></Line>
      <Line Number="3404"><![CDATA[	_Elem *_Myptr;	// pointer to allocated string]]></Line>
      <Line Number="3405"><![CDATA[	_Elem _Nul;		// nul terminator for unallocated string]]></Line>
      <Line Number="3406"><![CDATA[	};]]></Line>
      <Line Number="3407"><![CDATA[]]></Line>
      <Line Number="3408"><![CDATA[_CRTIMP2_PURE __declspec(noreturn) void __CLRCALL_PURE_OR_CDECL _Xinvalid_argument(_In_z_ const char *);]]></Line>
      <Line Number="3409"><![CDATA[_CRTIMP2_PURE __declspec(noreturn) void __CLRCALL_PURE_OR_CDECL _Xlength_error(_In_z_ const char *);]]></Line>
      <Line Number="3410"><![CDATA[_CRTIMP2_PURE __declspec(noreturn) void __CLRCALL_PURE_OR_CDECL _Xout_of_range(_In_z_ const char *);]]></Line>
      <Line Number="3411"><![CDATA[_CRTIMP2_PURE __declspec(noreturn) void __CLRCALL_PURE_OR_CDECL _Xoverflow_error(_In_z_ const char *);]]></Line>
      <Line Number="3412"><![CDATA[_CRTIMP2_PURE __declspec(noreturn) void __CLRCALL_PURE_OR_CDECL _Xruntime_error(_In_z_ const char *);]]></Line>
      <Line Number="3413"><![CDATA[_STD_END]]></Line>
      <Line Number="3414"><![CDATA[ #pragma warning(pop)]]></Line>
      <Line Number="3415"><![CDATA[ #pragma pack(pop)]]></Line>
      <Line Number="3416"><![CDATA[]]></Line>
      <Line Number="3417"><![CDATA[#endif /* RC_INVOKED */]]></Line>
      <Line Number="3418"><![CDATA[#endif /* _XUTILITY_ */]]></Line>
      <Line Number="3419"><![CDATA[]]></Line>
      <Line Number="3420"><![CDATA[/*]]></Line>
      <Line Number="3421"><![CDATA[ * This file is derived from software bearing the following]]></Line>
      <Line Number="3422"><![CDATA[ * restrictions:]]></Line>
      <Line Number="3423"><![CDATA[ *]]></Line>
      <Line Number="3424"><![CDATA[ * Copyright (c) 1994]]></Line>
      <Line Number="3425"><![CDATA[ * Hewlett-Packard Company]]></Line>
      <Line Number="3426"><![CDATA[ *]]></Line>
      <Line Number="3427"><![CDATA[ * Permission to use, copy, modify, distribute and sell this]]></Line>
      <Line Number="3428"><![CDATA[ * software and its documentation for any purpose is hereby]]></Line>
      <Line Number="3429"><![CDATA[ * granted without fee, provided that the above copyright notice]]></Line>
      <Line Number="3430"><![CDATA[ * appear in all copies and that both that copyright notice and]]></Line>
      <Line Number="3431"><![CDATA[ * this permission notice appear in supporting documentation.]]></Line>
      <Line Number="3432"><![CDATA[ * Hewlett-Packard Company makes no representations about the]]></Line>
      <Line Number="3433"><![CDATA[ * suitability of this software for any purpose. It is provided]]></Line>
      <Line Number="3434"><![CDATA[ * "as is" without express or implied warranty.]]></Line>
      <Line Number="3435"><![CDATA[ */]]></Line>
      <Line Number="3436"><![CDATA[]]></Line>
      <Line Number="3437"><![CDATA[/*]]></Line>
      <Line Number="3438"><![CDATA[ * Copyright (c) 1992-2009 by P.J. Plauger.  ALL RIGHTS RESERVED.]]></Line>
      <Line Number="3439"><![CDATA[ * Consult your license regarding permissions and restrictions.]]></Line>
      <Line Number="3440"><![CDATA[V5.20:0009 */]]></Line>
      <Line Number="3441"><![CDATA[]]></Line>
    </File>
    <File Name="c:\users\paul\documents\programs\proffy\proffy\launcher.h">
      <Line Number="1"><![CDATA[/*]]></Line>
      <Line Number="2"><![CDATA[    Copyright (C) 2009, 2010  Paul Richards.]]></Line>
      <Line Number="3"><![CDATA[]]></Line>
      <Line Number="4"><![CDATA[    This program is free software: you can redistribute it and/or modify]]></Line>
      <Line Number="5"><![CDATA[    it under the terms of the GNU General Public License as published by]]></Line>
      <Line Number="6"><![CDATA[    the Free Software Foundation, either version 3 of the License, or]]></Line>
      <Line Number="7"><![CDATA[    (at your option) any later version.]]></Line>
      <Line Number="8"><![CDATA[]]></Line>
      <Line Number="9"><![CDATA[    This program is distributed in the hope that it will be useful,]]></Line>
      <Line Number="10"><![CDATA[    but WITHOUT ANY WARRANTY; without even the implied warranty of]]></Line>
      <Line Number="11"><![CDATA[    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the]]></Line>
      <Line Number="12"><![CDATA[    GNU General Public License for more details.]]></Line>
      <Line Number="13"><![CDATA[]]></Line>
      <Line Number="14"><![CDATA[    You should have received a copy of the GNU General Public License]]></Line>
      <Line Number="15"><![CDATA[    along with this program.  If not, see <http://www.gnu.org/licenses/>.]]></Line>
      <Line Number="16"><![CDATA[*/]]></Line>
      <Line Number="17"><![CDATA[#pragma once]]></Line>
      <Line Number="18"><![CDATA[]]></Line>
      <Line Number="19"><![CDATA[#include <Windows.h>]]></Line>
      <Line Number="20"><![CDATA[#include <exception>]]></Line>
      <Line Number="21"><![CDATA[#include <memory>]]></Line>
      <Line Number="22"><![CDATA[#include <sstream>]]></Line>
      <Line Number="23"><![CDATA[#include <string>]]></Line>
      <Line Number="24"><![CDATA[]]></Line>
      <Line Number="25"><![CDATA[#pragma warning(push)]]></Line>
      <Line Number="26"><![CDATA[#pragma warning(disable: 4512) // assignment operator could not be generated]]></Line>
      <Line Number="27"><![CDATA[]]></Line>
      <Line Number="28"><![CDATA[namespace Proffy {]]></Line>
      <Line Number="29"><![CDATA[    class LauncherException : public std::exception]]></Line>
      <Line Number="30"><![CDATA[    {]]></Line>
      <Line Number="31"><![CDATA[    public:]]></Line>
      <Line Number="32"><![CDATA[        LauncherException(const std::string& reason) :]]></Line>
      <Line Number="33"><![CDATA[            fReason(reason)]]></Line>
      <Line Number="34"><![CDATA[        {]]></Line>
      <Line Number="35"><![CDATA[        }]]></Line>
      <Line Number="36"><![CDATA[]]></Line>
      <Line Number="37"><![CDATA[        /// std::exception]]></Line>
      <Line Number="38"><![CDATA[        virtual const char* what () const throw ()]]></Line>
      <Line Number="39"><![CDATA[        {]]></Line>
      <Line Number="40"><![CDATA[            return fReason.c_str();]]></Line>
      <Line Number="41"><![CDATA[        }]]></Line>
      <Line Number="42"><![CDATA[]]></Line>
      <Line Number="43"><![CDATA[    private:]]></Line>
      <Line Number="44"><![CDATA[        const std::string fReason;]]></Line>
      <Line Number="45"><![CDATA[    };]]></Line>
      <Line Number="46"><![CDATA[]]></Line>
      <Line Number="47"><![CDATA[    class LauncherOwnedHandle]]></Line>
      <Line Number="48"><![CDATA[    {]]></Line>
      <Line Number="49"><![CDATA[    public:]]></Line>
      <Line Number="50"><![CDATA[        LauncherOwnedHandle(const HANDLE handle) : fHandle(handle)]]></Line>
      <Line Number="51"><![CDATA[        {]]></Line>
      <Line Number="52"><![CDATA[        }]]></Line>
      <Line Number="53"><![CDATA[]]></Line>
      <Line Number="54"><![CDATA[        ~LauncherOwnedHandle()]]></Line>
      <Line Number="55"><![CDATA[        {]]></Line>
      <Line Number="56"><![CDATA[            ::CloseHandle(fHandle);]]></Line>
      <Line Number="57"><![CDATA[        }]]></Line>
      <Line Number="58"><![CDATA[]]></Line>
      <Line Number="59"><![CDATA[        const HANDLE fHandle;]]></Line>
      <Line Number="60"><![CDATA[    };]]></Line>
      <Line Number="61"><![CDATA[]]></Line>
      <Line Number="62"><![CDATA[    /**]]></Line>
      <Line Number="63"><![CDATA[        This class is implemented entirely in the header and can be]]></Line>
      <Line Number="64"><![CDATA[        used by applications to launch Proffy.]]></Line>
      <Line Number="65"><![CDATA[    */]]></Line>
      <Line Number="66"><![CDATA[    class Launcher]]></Line>
      <Line Number="67"><![CDATA[    {]]></Line>
      <Line Number="68"><![CDATA[    public:]]></Line>
      <Line Number="69"><![CDATA[        Launcher(]]></Line>
      <Line Number="70"><![CDATA[            const std::wstring& proffyExecutable,]]></Line>
      <Line Number="71"><![CDATA[            const std::wstring& outputDirectory,]]></Line>
      <Line Number="72"><![CDATA[            const double delayBetweenSamplesInSeconds,]]></Line>
      <Line Number="73"><![CDATA[            const bool profileTheProfiler = false)]]></Line>
      <Line Number="74"><![CDATA[        {]]></Line>
      <Line Number="75"><![CDATA[            SECURITY_ATTRIBUTES security = {0};]]></Line>
      <Line Number="76"><![CDATA[            security.nLength = sizeof(security);]]></Line>
      <Line Number="77"><![CDATA[            security.bInheritHandle = TRUE;]]></Line>
      <Line Number="78"><![CDATA[            fStartFlag.reset(new LauncherOwnedHandle(::CreateSemaphoreW(&security, 0, LONG_MAX, NULL)));]]></Line>
      <Line Number="79"><![CDATA[            fStopFlag.reset(new LauncherOwnedHandle(::CreateSemaphoreW(&security, 0, LONG_MAX, NULL)));]]></Line>
      <Line Number="80"><![CDATA[]]></Line>
      <Line Number="81"><![CDATA[            std::wostringstream buf;]]></Line>
      <Line Number="82"><![CDATA[            buf]]></Line>
      <Line Number="83"><![CDATA[                << L"\"" << proffyExecutable << L"\""]]></Line>
      <Line Number="84"><![CDATA[                << L" " << ::GetCurrentProcessId()]]></Line>
      <Line Number="85"><![CDATA[                << L" \"" << outputDirectory << L"\""]]></Line>
      <Line Number="86"><![CDATA[                << L" " << reinterpret_cast<uintptr_t>(fStartFlag->fHandle)]]></Line>
      <Line Number="87"><![CDATA[                << L" " << reinterpret_cast<uintptr_t>(fStopFlag->fHandle)]]></Line>
      <Line Number="88"><![CDATA[                << L" " << delayBetweenSamplesInSeconds]]></Line>
      <Line Number="89"><![CDATA[                << L" " << profileTheProfiler;]]></Line>
      <Line Number="90"><![CDATA[            const std::wstring commandLine = buf.str();]]></Line>
      <Line Number="91"><![CDATA[]]></Line>
      <Line Number="92"><![CDATA[            STARTUPINFOW startupInfo = {0};]]></Line>
      <Line Number="93"><![CDATA[            PROCESS_INFORMATION processInformation = {0};]]></Line>
      <Line Number="94"><![CDATA[]]></Line>
      <Line Number="95"><![CDATA[            BOOL result = ::CreateProcessW(]]></Line>
      <Line Number="96"><![CDATA[                proffyExecutable.c_str(),]]></Line>
      <Line Number="97"><![CDATA[                const_cast<wchar_t*>(commandLine.c_str()),]]></Line>
      <Line Number="98"><![CDATA[                NULL,]]></Line>
      <Line Number="99"><![CDATA[                NULL,]]></Line>
      <Line Number="100"><![CDATA[                TRUE,]]></Line>
      <Line Number="101"><![CDATA[                CREATE_NEW_CONSOLE,]]></Line>
      <Line Number="102"><![CDATA[                NULL,]]></Line>
      <Line Number="103"><![CDATA[                NULL,]]></Line>
      <Line Number="104"><![CDATA[                &startupInfo,]]></Line>
      <Line Number="105"><![CDATA[                &processInformation);]]></Line>
      <Line Number="106"><![CDATA[]]></Line>
      <Line Number="107"><![CDATA[            if (result == FALSE) {]]></Line>
      <Line Number="108"><![CDATA[                throw LauncherException("Failed to launch profiler.");]]></Line>
      <Line Number="109"><![CDATA[            }]]></Line>
      <Line Number="110"><![CDATA[]]></Line>
      <Line Number="111"><![CDATA[            ::CloseHandle(processInformation.hThread);]]></Line>
      <Line Number="112"><![CDATA[            fProfilerProcess.reset(new LauncherOwnedHandle(processInformation.hProcess));]]></Line>
      <Line Number="113"><![CDATA[]]></Line>
      <Line Number="114"><![CDATA[            if (::WaitForSingleObject(fStartFlag->fHandle, INFINITE) != WAIT_OBJECT_0) {]]></Line>
      <Line Number="115"><![CDATA[                throw LauncherException("Failed while waiting for the profiler to start.");]]></Line>
      <Line Number="116"><![CDATA[            }]]></Line>
      <Line Number="117"><![CDATA[        }]]></Line>
      <Line Number="118"><![CDATA[]]></Line>
      <Line Number="119"><![CDATA[        /**]]></Line>
      <Line Number="120"><![CDATA[            Signal the profiler to stop, and wait for it to do so.]]></Line>
      <Line Number="121"><![CDATA[        */]]></Line>
      <Line Number="122"><![CDATA[        void Finish()]]></Line>
      <Line Number="123"><![CDATA[        {]]></Line>
      <Line Number="124"><![CDATA[            if (::ReleaseSemaphore(fStopFlag->fHandle, 1, NULL) == FALSE) {]]></Line>
      <Line Number="125"><![CDATA[                throw LauncherException("Failed to raise stop flag.");]]></Line>
      <Line Number="126"><![CDATA[            }]]></Line>
      <Line Number="127"><![CDATA[]]></Line>
      <Line Number="128"><![CDATA[            if (::WaitForSingleObject(fProfilerProcess->fHandle, INFINITE) != WAIT_OBJECT_0) {]]></Line>
      <Line Number="129"><![CDATA[                throw LauncherException("Failed while waiting for the profiler to exit.");]]></Line>
      <Line Number="130"><![CDATA[            }]]></Line>
      <Line Number="131"><![CDATA[        }]]></Line>
      <Line Number="132"><![CDATA[]]></Line>
      <Line Number="133"><![CDATA[        ~Launcher()]]></Line>
      <Line Number="134"><![CDATA[        {]]></Line>
      <Line Number="135"><![CDATA[            try {]]></Line>
      <Line Number="136"><![CDATA[                Finish();]]></Line>
      <Line Number="137"><![CDATA[            } catch (const LauncherException&) {]]></Line>
      <Line Number="138"><![CDATA[            }]]></Line>
      <Line Number="139"><![CDATA[        }]]></Line>
      <Line Number="140"><![CDATA[]]></Line>
      <Line Number="141"><![CDATA[    private:]]></Line>
      <Line Number="142"><![CDATA[        std::auto_ptr<LauncherOwnedHandle> fStartFlag;]]></Line>
      <Line Number="143"><![CDATA[        std::auto_ptr<LauncherOwnedHandle> fStopFlag;]]></Line>
      <Line Number="144"><![CDATA[        std::auto_ptr<LauncherOwnedHandle> fProfilerProcess;]]></Line>
      <Line Number="145"><![CDATA[    };]]></Line>
      <Line Number="146"><![CDATA[}]]></Line>
      <Line Number="147"><![CDATA[]]></Line>
      <Line Number="148"><![CDATA[#pragma warning(pop)]]></Line>
      <Line Number="149"><![CDATA[]]></Line>
    </File>
    <File Name="c:\users\paul\documents\programs\proffy\sampletarget\main.cpp">
      <Line Number="1"><![CDATA[/*]]></Line>
      <Line Number="2"><![CDATA[    Copyright (C) 2008, 2009, 2010  Paul Richards.]]></Line>
      <Line Number="3"><![CDATA[]]></Line>
      <Line Number="4"><![CDATA[    This program is free software: you can redistribute it and/or modify]]></Line>
      <Line Number="5"><![CDATA[    it under the terms of the GNU General Public License as published by]]></Line>
      <Line Number="6"><![CDATA[    the Free Software Foundation, either version 3 of the License, or]]></Line>
      <Line Number="7"><![CDATA[    (at your option) any later version.]]></Line>
      <Line Number="8"><![CDATA[]]></Line>
      <Line Number="9"><![CDATA[    This program is distributed in the hope that it will be useful,]]></Line>
      <Line Number="10"><![CDATA[    but WITHOUT ANY WARRANTY; without even the implied warranty of]]></Line>
      <Line Number="11"><![CDATA[    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the]]></Line>
      <Line Number="12"><![CDATA[    GNU General Public License for more details.]]></Line>
      <Line Number="13"><![CDATA[]]></Line>
      <Line Number="14"><![CDATA[    You should have received a copy of the GNU General Public License]]></Line>
      <Line Number="15"><![CDATA[    along with this program.  If not, see <http://www.gnu.org/licenses/>.]]></Line>
      <Line Number="16"><![CDATA[*/]]></Line>
      <Line Number="17"><![CDATA[]]></Line>
      <Line Number="18"><![CDATA[#include "../Proffy/Launcher.h"]]></Line>
      <Line Number="19"><![CDATA[]]></Line>
      <Line Number="20"><![CDATA[#include <algorithm>]]></Line>
      <Line Number="21"><![CDATA[#include <cstdlib>]]></Line>
      <Line Number="22"><![CDATA[#include <ctime>]]></Line>
      <Line Number="23"><![CDATA[#include <iostream>]]></Line>
      <Line Number="24"><![CDATA[#include <vector>]]></Line>
      <Line Number="25"><![CDATA[]]></Line>
      <Line Number="26"><![CDATA[#pragma warning(disable: 4127) // conditional expression is constant]]></Line>
      <Line Number="27"><![CDATA[]]></Line>
      <Line Number="28"><![CDATA[int main(void)]]></Line>
      <Line Number="29"><![CDATA[{]]></Line>
      <Line Number="30"><![CDATA[    std::cout << "Running dummy target.\n";]]></Line>
      <Line Number="31"><![CDATA[]]></Line>
      <Line Number="32"><![CDATA[    const int count = 10000;]]></Line>
      <Line Number="33"><![CDATA[    std::vector<int> values;]]></Line>
      <Line Number="34"><![CDATA[    values.reserve(count);]]></Line>
      <Line Number="35"><![CDATA[    for (int i = 0; i < count; i++) {]]></Line>
      <Line Number="36"><![CDATA[        values.push_back(i);]]></Line>
      <Line Number="37"><![CDATA[    }]]></Line>
      <Line Number="38"><![CDATA[]]></Line>
      <Line Number="39"><![CDATA[    std::wostringstream pathToProffy;]]></Line>
      <Line Number="40"><![CDATA[    pathToProffy << L"../dist/bin" << (sizeof(void*)*8) << L"/Proffy" << (sizeof(void*)*8) << L".exe";]]></Line>
      <Line Number="41"><![CDATA[]]></Line>
      <Line Number="42"><![CDATA[    Proffy::Launcher profiler(]]></Line>
      <Line Number="43"><![CDATA[        pathToProffy.str(), L"../dist", 1.0 / 20);]]></Line>
      <Line Number="44"><![CDATA[    const clock_t begin = clock();]]></Line>
      <Line Number="45"><![CDATA[    while ((clock() - begin) < 10*CLOCKS_PER_SEC) {]]></Line>
      <Line Number="46"><![CDATA[        std::random_shuffle(values.begin(), values.end());]]></Line>
      <Line Number="47"><![CDATA[        std::sort(values.begin(), values.end());]]></Line>
      <Line Number="48"><![CDATA[    }]]></Line>
      <Line Number="49"><![CDATA[    profiler.Finish();]]></Line>
      <Line Number="50"><![CDATA[]]></Line>
      <Line Number="51"><![CDATA[    std::cout << "\nDone.\n";]]></Line>
      <Line Number="52"><![CDATA[]]></Line>
      <Line Number="53"><![CDATA[    return EXIT_SUCCESS;]]></Line>
      <Line Number="54"><![CDATA[}]]></Line>
      <Line Number="55"><![CDATA[]]></Line>
      <Line Number="56"><![CDATA[]]></Line>
    </File>
    <File Name="f:\dd\vctools\crt_bld\self_x86\crt\src\crtexe.c"/>
  </Files>

</ProffyResults>
