/*
    Copyright (c) 2005-2007, Paul Richards
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:

        * Redistributions of source code must retain the above copyright notice,
        this list of conditions and the following disclaimer.

        * Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.

        * Neither the name of Paul Richards nor the names of contributors may be
        used to endorse or promote products derived from this software without
        specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
    ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
    POSSIBILITY OF SUCH DAMAGE.
*/


package pigeon.view;

import java.awt.Component;
import java.util.Collection;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import pigeon.competitions.Competition;
import pigeon.model.Clock;
import pigeon.model.Time;

/**
 * Edits the list of times associated with a clock.
 *
 * The ClockSummary final class edits the higher level info like open / close times.
 */
final class ClockEditor extends javax.swing.JPanel
{

    private static final long serialVersionUID = 7677569341121266746L;

    private final Clock clock;
    private final int daysInRace;
    private final Collection<Competition> competitions;

    public ClockEditor(Clock clock, int daysInRace, Collection<Competition> competitions)
    {
        this.clock = clock;
        this.daysInRace = daysInRace;
        this.competitions = competitions;
        initComponents();
        timesTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
            public void valueChanged(ListSelectionEvent e) {
                refreshButtons();
            }
        });     
        clockTimesPanel.setBorder(new javax.swing.border.TitledBorder("Clock Times For " + clock.getMember()));
        reloadTimesTable();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        clockTimesPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        timesTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        clockTimesPanel.setLayout(new java.awt.BorderLayout());

        clockTimesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("Clock Times For")));
        timesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String []
            {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(timesTable);

        clockTimesPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        addButton.setText("Add Ring Number");
        addButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                addButtonActionPerformed(evt);
            }
        });

        jPanel1.add(addButton);

        editButton.setText("Edit Ring Number");
        editButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                editButtonActionPerformed(evt);
            }
        });

        jPanel1.add(editButton);

        removeButton.setText("Remove Ring Number");
        removeButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                removeButtonActionPerformed(evt);
            }
        });

        jPanel1.add(removeButton);

        clockTimesPanel.add(jPanel1, java.awt.BorderLayout.SOUTH);

        jLabel1.setText("Please enter details for all the birds timed in this clock.");
        clockTimesPanel.add(jLabel1, java.awt.BorderLayout.NORTH);

        add(clockTimesPanel, java.awt.BorderLayout.CENTER);

    }// </editor-fold>//GEN-END:initComponents

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_editButtonActionPerformed
    {//GEN-HEADEREND:event_editButtonActionPerformed
        try {
            int index = timesTable.getSelectedRow();
            Time time = clock.getTimes().get(index);
            RingTimeEditor.editEntry(this, time, daysInRace, competitions);
            reloadTimesTable();
        } catch (UserCancelledException e) {
        }
    }//GEN-LAST:event_editButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_removeButtonActionPerformed
    {//GEN-HEADEREND:event_removeButtonActionPerformed
        int index = timesTable.getSelectedRow();
        Time time = clock.getTimes().get(index);
        clock.removeTime(time);
        reloadTimesTable();
    }//GEN-LAST:event_removeButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addButtonActionPerformed
    {//GEN-HEADEREND:event_addButtonActionPerformed
        try {
            Time time = RingTimeEditor.createEntry(this, daysInRace, competitions);
            clock.addTime(time);
            reloadTimesTable();
        } catch (UserCancelledException e) {
        }
    }//GEN-LAST:event_addButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JPanel clockTimesPanel;
    private javax.swing.JButton editButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton removeButton;
    private javax.swing.JTable timesTable;
    // End of variables declaration//GEN-END:variables

    public static void editClockResults(Component parent, Clock clock, int daysInRace, Collection<Competition> competitions)
    {
        ClockEditor panel = new ClockEditor(clock, daysInRace, competitions);
        Object[] options = {"Finished"};
        int result = JOptionPane.showOptionDialog(parent, panel, "Clock Times", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options[0]);
    }

    private void reloadTimesTable()
    {
        timesTable.setModel(new TimesTableModel(clock, daysInRace, true));
        refreshButtons();
    }
    
    private void refreshButtons()
    {
        removeButton.setEnabled( timesTable.getSelectedRow() != -1 );
    }
}
