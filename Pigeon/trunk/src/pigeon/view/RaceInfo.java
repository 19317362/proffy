/*
 * Pigeon: A pigeon club race result management program.
 * Copyright (C) 2005-2006  Paul Richards
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

package pigeon.view;

import java.awt.Component;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Vector;
import javax.swing.JOptionPane;
import pigeon.model.Club;
import pigeon.model.Race;
import pigeon.model.Racepoint;
import pigeon.model.ValidationException;

/**
 *
 * @author  Paul
 */
class RaceInfo extends javax.swing.JPanel {
    
    private static final long serialVersionUID = 42L;

    private static final int BASE_YEAR = 2000;
    
    private final Race race;
    
    /** Creates new form RaceInfo */
    public RaceInfo(Race race, Club club, boolean editable) {
        this.race = race;
        initComponents();
        addComboOptions(club);

        if (race.getRacepoint() != null) {
            racepointCombo.setSelectedItem(race.getRacepoint());
        } else {
            racepointCombo.setSelectedIndex(0);
        }
        
        Calendar calendar = new GregorianCalendar();
        calendar.setTime(race.getLiberationDate());
        dayCombo.setSelectedIndex(calendar.get(Calendar.DAY_OF_MONTH) - 1);
        monthCombo.setSelectedIndex(calendar.get(Calendar.MONTH));
        yearCombo.setSelectedIndex(calendar.get(Calendar.YEAR) - BASE_YEAR);
        hourCombo.setSelectedIndex(calendar.get(Calendar.HOUR_OF_DAY));
        minuteCombo.setSelectedIndex(calendar.get(Calendar.MINUTE));
        
        daysCoveredCombo.setSelectedIndex(race.getDaysCovered() - 1);
    }
    
    private void addComboOptions(Club club) {
        for (Racepoint r: Utilities.sortCollection(club.getRacepoints())) {
            racepointCombo.addItem( r );
        }
        
        for (int day = 1; day <= 31; day++) {
            String str = new Integer(day).toString();
            if (day < 10) {
                str = "0" + str;
            }
            dayCombo.addItem(str);
        }
        
        for (int month = 1; month <= 12; month++) {
            String str = new Integer(month).toString();
            if (month < 10) {
                str = "0" + str;
            }
            monthCombo.addItem(str);
        }
        
        for (int year = BASE_YEAR; year <= BASE_YEAR + 20; year++) {
            yearCombo.addItem(year);
        }
        
        for (int day = 1; day <= 3; day++) {
            daysCoveredCombo.addItem(day);
        }
        
        for (int hour = 0; hour <= 23; hour++) {
            String str = new Integer(hour).toString();
            if (hour < 10) {
                str = "0" + str;
            }
            hourCombo.addItem(str);
        }
        
        for (int minute = 0; minute <= 59; minute++) {
            String str = new Integer(minute).toString();
            if (minute < 10) {
                str = "0" + str;
            }
            minuteCombo.addItem(str);
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        racepointLabel = new javax.swing.JLabel();
        racepointCombo = new javax.swing.JComboBox();
        liberationDateLabel = new javax.swing.JLabel();
        dayCombo = new javax.swing.JComboBox();
        hourCombo = new javax.swing.JComboBox();
        minuteCombo = new javax.swing.JComboBox();
        yearCombo = new javax.swing.JComboBox();
        monthCombo = new javax.swing.JComboBox();
        monthYearSeperator = new javax.swing.JLabel();
        hourMinuteSeperator = new javax.swing.JLabel();
        dayMonthSeperator = new javax.swing.JLabel();
        liberationTimeLabel = new javax.swing.JLabel();
        windDirectionLabel = new javax.swing.JLabel();
        windDirectionText = new javax.swing.JTextField();
        daysCoveredLabel = new javax.swing.JLabel();
        daysCoveredCombo = new javax.swing.JComboBox();

        setLayout(new java.awt.GridBagLayout());

        racepointLabel.setText("Racepoint");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(racepointLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(racepointCombo, gridBagConstraints);

        liberationDateLabel.setText("Liberation Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(liberationDateLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 2);
        add(dayCombo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 2);
        add(hourCombo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 2, 10, 10);
        add(minuteCombo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 2, 10, 10);
        add(yearCombo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 2, 10, 2);
        add(monthCombo, gridBagConstraints);

        monthYearSeperator.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        monthYearSeperator.setText("/");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 2, 10, 2);
        add(monthYearSeperator, gridBagConstraints);

        hourMinuteSeperator.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        hourMinuteSeperator.setText(":");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 2, 10, 2);
        add(hourMinuteSeperator, gridBagConstraints);

        dayMonthSeperator.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dayMonthSeperator.setText("/");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 2, 10, 2);
        add(dayMonthSeperator, gridBagConstraints);

        liberationTimeLabel.setText("Liberation Time");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(liberationTimeLabel, gridBagConstraints);

        windDirectionLabel.setText("Wind Direction");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(windDirectionLabel, gridBagConstraints);

        windDirectionText.setColumns(20);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(windDirectionText, gridBagConstraints);

        daysCoveredLabel.setText("No. of days covered");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(daysCoveredLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(daysCoveredCombo, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox dayCombo;
    private javax.swing.JLabel dayMonthSeperator;
    private javax.swing.JComboBox daysCoveredCombo;
    private javax.swing.JLabel daysCoveredLabel;
    private javax.swing.JComboBox hourCombo;
    private javax.swing.JLabel hourMinuteSeperator;
    private javax.swing.JLabel liberationDateLabel;
    private javax.swing.JLabel liberationTimeLabel;
    private javax.swing.JComboBox minuteCombo;
    private javax.swing.JComboBox monthCombo;
    private javax.swing.JLabel monthYearSeperator;
    private javax.swing.JComboBox racepointCombo;
    private javax.swing.JLabel racepointLabel;
    private javax.swing.JLabel windDirectionLabel;
    private javax.swing.JTextField windDirectionText;
    private javax.swing.JComboBox yearCombo;
    // End of variables declaration//GEN-END:variables

    private void updateRaceObject() throws ValidationException {
        race.setRacepoint((Racepoint)racepointCombo.getSelectedItem());
        Date liberationDate = new GregorianCalendar(
                new Integer(yearCombo.getSelectedItem().toString()),
                new Integer(monthCombo.getSelectedItem().toString()) - 1,
                new Integer(dayCombo.getSelectedItem().toString()),
                new Integer(hourCombo.getSelectedItem().toString()),
                new Integer(minuteCombo.getSelectedItem().toString())).getTime();
        race.setLiberationDate(liberationDate);
        race.setDaysCovered(new Integer(daysCoveredCombo.getSelectedItem().toString()));
        race.setWindDirection(windDirectionText.getText());
    }
        
    public static void editRace(Component parent, Race race, Club club, boolean newRace) throws UserCancelledException {
        RaceInfo panel = new RaceInfo(race, club, true);
        while (true) {
            Object[] options = { (newRace ? "Add" : "Ok"), "Cancel" };
            int result = JOptionPane.showOptionDialog(parent, panel, "Race Information", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options[0]);
            if (result == 0) {
                try {
                    panel.updateRaceObject();
                    break;
                } catch (ValidationException e) {
                    e.displayErrorDialog(parent);
                }
            } else {
                result = JOptionPane.showConfirmDialog(parent, "Return to Race window and discard these changes?", "Warning", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                if (result == JOptionPane.YES_OPTION) {
                    throw new UserCancelledException();
                }
            }
        }
    }
    
    public static Race createRace(Component parent, Club club) throws UserCancelledException {
        Race race = new Race();
        editRace(parent, race, club, true);
        return race;
    }

}
